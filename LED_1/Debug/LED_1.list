
LED_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035cc  080133f0  080133f0  000233f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080169bc  080169bc  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080169bc  080169bc  000269bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080169c4  080169c4  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080169c4  080169c4  000269c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080169c8  080169c8  000269c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080169cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007154  2000007c  08016a48  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200071d0  08016a48  000371d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032795  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f0b  00000000  00000000  0006283f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  00068750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001700  00000000  00000000  00069f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035121  00000000  00000000  0006b678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022320  00000000  00000000  000a0799  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e079  00000000  00000000  000c2ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d0b32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ac  00000000  00000000  001d0bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	080133d8 	.word	0x080133d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	080133d8 	.word	0x080133d8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <LedCGIhandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	603b      	str	r3, [r7, #0]
	uint32_t i= 0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

	if (iIndex==0){
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10f      	bne.n	8000648 <LedCGIhandler+0x38>

		//turning the LED light off
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	482e      	ldr	r0, [pc, #184]	; (80006e8 <LedCGIhandler+0xd8>)
 800062e:	f001 fe7b 	bl	8002328 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	482b      	ldr	r0, [pc, #172]	; (80006e8 <LedCGIhandler+0xd8>)
 800063a:	f001 fe75 	bl	8002328 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4829      	ldr	r0, [pc, #164]	; (80006e8 <LedCGIhandler+0xd8>)
 8000644:	f001 fe70 	bl	8002328 <HAL_GPIO_WritePin>


	}
	for(i=0; i<iNumParams; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e042      	b.n	80006d4 <LedCGIhandler+0xc4>

		if(strcmp(pcParam[i],"led")==0){
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4924      	ldr	r1, [pc, #144]	; (80006ec <LedCGIhandler+0xdc>)
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdf0 	bl	8000240 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d133      	bne.n	80006ce <LedCGIhandler+0xbe>

			if (strcmp(pcValue[i], "1") == 0) {
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	491f      	ldr	r1, [pc, #124]	; (80006f0 <LedCGIhandler+0xe0>)
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fde4 	bl	8000240 <strcmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d104      	bne.n	8000688 <LedCGIhandler+0x78>
				HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <LedCGIhandler+0xd8>)
 8000684:	f001 fe50 	bl	8002328 <HAL_GPIO_WritePin>

			}
			if (strcmp(pcValue[i], "2") == 0) {
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4918      	ldr	r1, [pc, #96]	; (80006f4 <LedCGIhandler+0xe4>)
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fdd3 	bl	8000240 <strcmp>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d105      	bne.n	80006ac <LedCGIhandler+0x9c>
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4810      	ldr	r0, [pc, #64]	; (80006e8 <LedCGIhandler+0xd8>)
 80006a8:	f001 fe3e 	bl	8002328 <HAL_GPIO_WritePin>

			}
			if (strcmp(pcValue[i], "3") == 0) {
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <LedCGIhandler+0xe8>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fdc1 	bl	8000240 <strcmp>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d104      	bne.n	80006ce <LedCGIhandler+0xbe>
				HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <LedCGIhandler+0xd8>)
 80006ca:	f001 fe2d 	bl	8002328 <HAL_GPIO_WritePin>
	for(i=0; i<iNumParams; i++){
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3b8      	bcc.n	800064e <LedCGIhandler+0x3e>
		}
	}

	//the extension .shtml for SSI to work

return "/index.shtml";
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <LedCGIhandler+0xec>)
}// END [= CGI #5 =]
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40020400 	.word	0x40020400
 80006ec:	080133fc 	.word	0x080133fc
 80006f0:	08013400 	.word	0x08013400
 80006f4:	08013404 	.word	0x08013404
 80006f8:	08013408 	.word	0x08013408
 80006fc:	0801340c 	.word	0x0801340c

08000700 <myCGIinit>:

//function to initialize CGI [= CGI #6 =]

void myCGIinit(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	 theCGItable[0] = LedCGI;
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <myCGIinit+0x1c>)
 8000706:	4a06      	ldr	r2, [pc, #24]	; (8000720 <myCGIinit+0x20>)
 8000708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070c:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	 http_set_cgi_handlers(theCGItable, 1);
 8000710:	2101      	movs	r1, #1
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <myCGIinit+0x1c>)
 8000714:	f005 f9a2 	bl	8005a5c <http_set_cgi_handlers>
} // END [= CGI #6 =]
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000af0 	.word	0x20000af0
 8000720:	080163e8 	.word	0x080163e8

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fb7b 	bl	8000e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f810 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 f900 	bl	8000934 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000734:	f000 f8a0 	bl	8000878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000738:	f000 f8ce 	bl	80008d8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800073c:	f003 ff7c 	bl	8004638 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  //initializing the HTTPd [-HTTPd #2-]
    httpd_init();
 8000740:	f005 f96c 	bl	8005a1c <httpd_init>
    // initializing CGI  [= CGI #7 =]
    myCGIinit();
 8000744:	f7ff ffdc 	bl	8000700 <myCGIinit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//starting the LWIP process
	  MX_LWIP_Process();
 8000748:	f003 ffb6 	bl	80046b8 <MX_LWIP_Process>
 800074c:	e7fc      	b.n	8000748 <main+0x24>
	...

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0b8      	sub	sp, #224	; 0xe0
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800075a:	2234      	movs	r2, #52	; 0x34
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f011 fef2 	bl	8012548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2290      	movs	r2, #144	; 0x90
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f011 fee3 	bl	8012548 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b3a      	ldr	r3, [pc, #232]	; (800086c <SystemClock_Config+0x11c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a39      	ldr	r2, [pc, #228]	; (800086c <SystemClock_Config+0x11c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <SystemClock_Config+0x11c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800079a:	4b35      	ldr	r3, [pc, #212]	; (8000870 <SystemClock_Config+0x120>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <SystemClock_Config+0x120>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <SystemClock_Config+0x120>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007d8:	2360      	movs	r3, #96	; 0x60
 80007da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ff4c 	bl	800268c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007fa:	f000 f93d 	bl	8000a78 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fe:	f001 fef5 	bl	80025ec <HAL_PWREx_EnableOverDrive>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000808:	f000 f936 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000830:	2103      	movs	r1, #3
 8000832:	4618      	mov	r0, r3
 8000834:	f002 f9d8 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800083e:	f000 f91b 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <SystemClock_Config+0x124>)
 8000844:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fbbf 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000860:	f000 f90a 	bl	8000a78 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	37e0      	adds	r7, #224	; 0xe0
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000
 8000874:	00200100 	.word	0x00200100

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART3_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008bc:	f002 ffb2 	bl	8003824 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f8d7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000066c 	.word	0x2000066c
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2206      	movs	r2, #6
 80008e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2201      	movs	r2, #1
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	f001 fd1d 	bl	800235a <HAL_PCD_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f8a7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200006ec 	.word	0x200006ec

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <MX_GPIO_Init+0x130>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a3f      	ldr	r2, [pc, #252]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <MX_GPIO_Init+0x130>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a39      	ldr	r2, [pc, #228]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e0:	4821      	ldr	r0, [pc, #132]	; (8000a68 <MX_GPIO_Init+0x134>)
 80009e2:	f001 fca1 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	4820      	ldr	r0, [pc, #128]	; (8000a6c <MX_GPIO_Init+0x138>)
 80009ec:	f001 fc9c 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_GPIO_Init+0x13c>)
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MX_GPIO_Init+0x140>)
 8000a06:	f001 fae5 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8000a0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0x134>)
 8000a24:	f001 fad6 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a28:	2340      	movs	r3, #64	; 0x40
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x138>)
 8000a40:	f001 fac8 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x138>)
 8000a58:	f001 fabc 	bl	8001fd4 <HAL_GPIO_Init>

}
 8000a5c:	bf00      	nop
 8000a5e:	3730      	adds	r7, #48	; 0x30
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	10110000 	.word	0x10110000
 8000a74:	40020800 	.word	0x40020800

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x7c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d128      	bne.n	8000b44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b34:	2307      	movs	r3, #7
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b40:	f001 fa48 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b78:	d141      	bne.n	8000bfe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4817      	ldr	r0, [pc, #92]	; (8000c0c <HAL_PCD_MspInit+0xb4>)
 8000bb0:	f001 fa10 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <HAL_PCD_MspInit+0xb4>)
 8000bca:	f001 fa03 	bl	8001fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f91a 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
	}

return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
	}
	return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x50>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x16>
		heap_end = &end;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <_sbrk+0x50>)
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <_sbrk+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_sbrk+0x50>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <_sbrk+0x50>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	466a      	mov	r2, sp
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d905      	bls.n	8000d7e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <_sbrk+0x58>)
 8000d74:	220c      	movs	r2, #12
 8000d76:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	e006      	b.n	8000d8c <_sbrk+0x44>
	}

	heap_end += incr;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <_sbrk+0x50>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <_sbrk+0x50>)
 8000d88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000098 	.word	0x20000098
 8000d9c:	200071d0 	.word	0x200071d0
 8000da0:	200071cc 	.word	0x200071cc

08000da4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SystemInit+0x28>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <SystemInit+0x28>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SystemInit+0x28>)
 8000dba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000df0:	f842 3b04 	str.w	r3, [r2], #4

08000df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd3 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f011 fb65 	bl	80124cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc8f 	bl	8000724 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e0c:	080169cc 	.word	0x080169cc
  ldr  r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e14:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000e18:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000e1c:	200071d0 	.word	0x200071d0

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>

08000e22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f92c 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f805 	bl	8000e3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e32:	f7ff fe29 	bl	8000a88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f939 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f90f 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000af8 	.word	0x20000af8

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000af8 	.word	0x20000af8

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_Delay+0x40>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	05fa0000 	.word	0x05fa0000

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5c 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb0 	bl	8001040 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80010fc:	4ba9      	ldr	r3, [pc, #676]	; (80013a4 <HAL_ETH_Init+0x2b8>)
 80010fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e183      	b.n	800141a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d106      	bne.n	800112c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f003 fad2 	bl	80046d0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	4b9e      	ldr	r3, [pc, #632]	; (80013a8 <HAL_ETH_Init+0x2bc>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	4a9d      	ldr	r2, [pc, #628]	; (80013a8 <HAL_ETH_Init+0x2bc>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6453      	str	r3, [r2, #68]	; 0x44
 8001138:	4b9b      	ldr	r3, [pc, #620]	; (80013a8 <HAL_ETH_Init+0x2bc>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_ETH_Init+0x2c0>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a98      	ldr	r2, [pc, #608]	; (80013ac <HAL_ETH_Init+0x2c0>)
 800114a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800114e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001150:	4b96      	ldr	r3, [pc, #600]	; (80013ac <HAL_ETH_Init+0x2c0>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4994      	ldr	r1, [pc, #592]	; (80013ac <HAL_ETH_Init+0x2c0>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001174:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001176:	f7ff fea5 	bl	8000ec4 <HAL_GetTick>
 800117a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800117c:	e011      	b.n	80011a2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800117e:	f7ff fea1 	bl	8000ec4 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800118c:	d909      	bls.n	80011a2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e13b      	b.n	800141a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e4      	bne.n	800117e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f023 031c 	bic.w	r3, r3, #28
 80011c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011c4:	f001 fed4 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 80011c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4a78      	ldr	r2, [pc, #480]	; (80013b0 <HAL_ETH_Init+0x2c4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d908      	bls.n	80011e4 <HAL_ETH_Init+0xf8>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_ETH_Init+0x2c8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d804      	bhi.n	80011e4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e027      	b.n	8001234 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4a73      	ldr	r2, [pc, #460]	; (80013b4 <HAL_ETH_Init+0x2c8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d908      	bls.n	80011fe <HAL_ETH_Init+0x112>
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	4a72      	ldr	r2, [pc, #456]	; (80013b8 <HAL_ETH_Init+0x2cc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d804      	bhi.n	80011fe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f043 030c 	orr.w	r3, r3, #12
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	e01a      	b.n	8001234 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4a6d      	ldr	r2, [pc, #436]	; (80013b8 <HAL_ETH_Init+0x2cc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d903      	bls.n	800120e <HAL_ETH_Init+0x122>
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4a6c      	ldr	r2, [pc, #432]	; (80013bc <HAL_ETH_Init+0x2d0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d911      	bls.n	8001232 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <HAL_ETH_Init+0x2d0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d908      	bls.n	8001228 <HAL_ETH_Init+0x13c>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_ETH_Init+0x2d4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d804      	bhi.n	8001228 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e005      	b.n	8001234 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	e000      	b.n	8001234 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001232:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800123c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fb9a 	bl	800197c <HAL_ETH_WritePHYRegister>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fc27 	bl	8001aa8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0d9      	b.n	800141a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001266:	20ff      	movs	r0, #255	; 0xff
 8001268:	f7ff fe38 	bl	8000edc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a7 	beq.w	80013c4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001276:	f7ff fe25 	bl	8000ec4 <HAL_GetTick>
 800127a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	461a      	mov	r2, r3
 8001282:	2101      	movs	r1, #1
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fb11 	bl	80018ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800128a:	f7ff fe1b 	bl	8000ec4 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f241 3288 	movw	r2, #5000	; 0x1388
 8001298:	4293      	cmp	r3, r2
 800129a:	d90f      	bls.n	80012bc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fc00 	bl	8001aa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0ae      	b.n	800141a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0da      	beq.n	800127c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ca:	2100      	movs	r1, #0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fb55 	bl	800197c <HAL_ETH_WritePHYRegister>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fbe2 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012ec:	2301      	movs	r3, #1
 80012ee:	e094      	b.n	800141a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012f0:	f7ff fde8 	bl	8000ec4 <HAL_GetTick>
 80012f4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	461a      	mov	r2, r3
 80012fc:	2101      	movs	r1, #1
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fad4 	bl	80018ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001304:	f7ff fdde 	bl	8000ec4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d90f      	bls.n	8001336 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fbc3 	bl	8001aa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e071      	b.n	800141a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0da      	beq.n	80012f6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	461a      	mov	r2, r3
 8001346:	211f      	movs	r1, #31
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 faaf 	bl	80018ac <HAL_ETH_ReadPHYRegister>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fba4 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001368:	2301      	movs	r3, #1
 800136a:	e056      	b.n	800141a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e002      	b.n	8001386 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	e037      	b.n	8001408 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	e032      	b.n	8001408 <HAL_ETH_Init+0x31c>
 80013a2:	bf00      	nop
 80013a4:	03938700 	.word	0x03938700
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800
 80013b0:	01312cff 	.word	0x01312cff
 80013b4:	02160ebf 	.word	0x02160ebf
 80013b8:	039386ff 	.word	0x039386ff
 80013bc:	05f5e0ff 	.word	0x05f5e0ff
 80013c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 facd 	bl	800197c <HAL_ETH_WritePHYRegister>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fb5a 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e00c      	b.n	800141a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001400:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001404:	f7ff fd6a 	bl	8000edc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fb4c 	bl	8001aa8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ETH_DMATxDescListInit+0x20>
 8001440:	2302      	movs	r3, #2
 8001442:	e052      	b.n	80014ea <HAL_ETH_DMATxDescListInit+0xc6>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e030      	b.n	80014c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001470:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	461a      	mov	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d208      	bcs.n	80014b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	015b      	lsls	r3, r3, #5
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	461a      	mov	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	e002      	b.n	80014bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3ca      	bcc.n	8001460 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f241 0310 	movw	r3, #4112	; 0x1010
 80014d4:	440b      	add	r3, r1
 80014d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b087      	sub	sp, #28
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ETH_DMARxDescListInit+0x20>
 8001512:	2302      	movs	r3, #2
 8001514:	e056      	b.n	80015c4 <HAL_ETH_DMARxDescListInit+0xce>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2202      	movs	r2, #2
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e034      	b.n	800159c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	4413      	add	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800154a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	461a      	mov	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	429a      	cmp	r2, r3
 800157c:	d208      	bcs.n	8001590 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	461a      	mov	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e002      	b.n	8001596 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3c6      	bcc.n	8001532 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ETH_TransmitFrame+0x24>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0cd      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800161a:	2301      	movs	r3, #1
 800161c:	e0b8      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da09      	bge.n	800163c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2212      	movs	r2, #18
 800162c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0a9      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001642:	4293      	cmp	r3, r2
 8001644:	d915      	bls.n	8001672 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_ETH_TransmitFrame+0x1cc>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_ETH_TransmitFrame+0x1cc>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	0a9b      	lsrs	r3, r3, #10
 800165c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e001      	b.n	8001676 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11c      	bne.n	80016b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800168a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001696:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b4:	e04b      	b.n	800174e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e044      	b.n	8001746 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d107      	bne.n	80016e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d116      	bne.n	8001724 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001704:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800170a:	fb02 f203 	mul.w	r2, r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001716:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001722:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001732:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	3301      	adds	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	429a      	cmp	r2, r3
 800174c:	d3b6      	bcc.n	80016bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f241 0314 	movw	r3, #4116	; 0x1014
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f241 0314 	movw	r3, #4116	; 0x1014
 800176a:	4413      	add	r3, r2
 800176c:	2204      	movs	r2, #4
 800176e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f241 0304 	movw	r3, #4100	; 0x1004
 8001778:	4413      	add	r3, r2
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	ac02b00b 	.word	0xac02b00b
 80017a0:	fffffa0c 	.word	0xfffffa0c

080017a4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ETH_GetReceivedFrame+0x1a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e070      	b.n	80018a0 <HAL_ETH_GetReceivedFrame+0xfc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db5a      	blt.n	800188e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d030      	beq.n	8001848 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d103      	bne.n	8001800 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001814:	3b04      	subs	r3, #4
 8001816:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e02b      	b.n	80018a0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001852:	2b00      	cmp	r3, #0
 8001854:	d010      	beq.n	8001878 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
 8001876:	e00a      	b.n	800188e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	460b      	mov	r3, r1
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b82      	cmp	r3, #130	; 0x82
 80018cc:	d101      	bne.n	80018d2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e050      	b.n	8001974 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2282      	movs	r2, #130	; 0x82
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 031c 	and.w	r3, r3, #28
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8a1b      	ldrh	r3, [r3, #16]
 80018ee:	02db      	lsls	r3, r3, #11
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	019b      	lsls	r3, r3, #6
 80018fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800191e:	f7ff fad1 	bl	8000ec4 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001924:	e015      	b.n	8001952 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001926:	f7ff facd 	bl	8000ec4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d309      	bcc.n	800194a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e014      	b.n	8001974 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e4      	bne.n	8001926 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	460b      	mov	r3, r1
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b42      	cmp	r3, #66	; 0x42
 800199c:	d101      	bne.n	80019a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e04e      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2242      	movs	r2, #66	; 0x42
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 031c 	and.w	r3, r3, #28
 80019b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8a1b      	ldrh	r3, [r3, #16]
 80019be:	02db      	lsls	r3, r3, #11
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019f8:	f7ff fa64 	bl	8000ec4 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fe:	e015      	b.n	8001a2c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a00:	f7ff fa60 	bl	8000ec4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d309      	bcc.n	8001a24 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e00d      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e4      	bne.n	8001a00 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_ETH_Start+0x16>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e01f      	b.n	8001a9e <HAL_ETH_Start+0x56>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fa1c 	bl	8001eac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fa36 	bl	8001ee6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fa80 	bl	8001f80 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fa4d 	bl	8001f20 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fa62 	bl	8001f50 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b0      	sub	sp, #192	; 0xc0
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	663b      	str	r3, [r7, #96]	; 0x60
 8001af4:	e001      	b.n	8001afa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b80:	4bab      	ldr	r3, [pc, #684]	; (8001e30 <ETH_MACDMAConfig+0x388>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ba2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ba8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bb0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bb4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001bb8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bbc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff f97d 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001bf4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bfa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c1a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff f958 	bl	8000edc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c34:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c3e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c48:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c58:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c84:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c98:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f919 	bl	8000edc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001cb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff f904 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cdc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cf0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d02:	2304      	movs	r3, #4
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d32:	4413      	add	r3, r2
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <ETH_MACDMAConfig+0x38c>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d46:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d48:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d4a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d4c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d4e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d50:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d52:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d54:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d56:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d58:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d5a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d5e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d62:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d66:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff f8a2 	bl	8000edc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001da0:	4413      	add	r3, r2
 8001da2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001db0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001db4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001db8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dbe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001dc2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff f87b 	bl	8000edc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10d      	bne.n	8001e18 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6811      	ldr	r1, [r2, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <ETH_MACDMAConfig+0x390>)
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e14:	440b      	add	r3, r1
 8001e16:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2100      	movs	r1, #0
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f80b 	bl	8001e3c <ETH_MACAddressConfig>
}
 8001e26:	bf00      	nop
 8001e28:	37c0      	adds	r7, #192	; 0xc0
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	ff20810f 	.word	0xff20810f
 8001e34:	f8de3f23 	.word	0xf8de3f23
 8001e38:	00010040 	.word	0x00010040

08001e3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	3204      	adds	r2, #4
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <ETH_MACAddressConfig+0x68>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3303      	adds	r3, #3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	061a      	lsls	r2, r3, #24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3302      	adds	r3, #2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	4313      	orrs	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <ETH_MACAddressConfig+0x6c>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	6013      	str	r3, [r2, #0]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40028040 	.word	0x40028040
 8001ea8:	40028044 	.word	0x40028044

08001eac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0208 	orr.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff f803 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0204 	orr.w	r2, r2, #4
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7fe ffe6 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f30:	4413      	add	r3, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6811      	ldr	r1, [r2, #0]
 8001f38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f40:	440b      	add	r3, r1
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f60:	4413      	add	r3, r2
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6811      	ldr	r1, [r2, #0]
 8001f68:	f043 0202 	orr.w	r2, r3, #2
 8001f6c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f70:	440b      	add	r3, r1
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6811      	ldr	r1, [r2, #0]
 8001f9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fa0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fa4:	440b      	add	r3, r1
 8001fa6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe ff90 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fc6:	440b      	add	r3, r1
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e175      	b.n	80022e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 8164 	bne.w	80022da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d00b      	beq.n	8002032 <HAL_GPIO_Init+0x5e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002026:	2b11      	cmp	r3, #17
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b12      	cmp	r3, #18
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x100>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b12      	cmp	r3, #18
 80020d2:	d123      	bne.n	800211c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80be 	beq.w	80022da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a64      	ldr	r2, [pc, #400]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_GPIO_Init+0x320>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002176:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_GPIO_Init+0x328>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d037      	beq.n	8002212 <HAL_GPIO_Init+0x23e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_GPIO_Init+0x32c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a55      	ldr	r2, [pc, #340]	; (8002304 <HAL_GPIO_Init+0x330>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x236>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_GPIO_Init+0x334>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x232>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a53      	ldr	r2, [pc, #332]	; (800230c <HAL_GPIO_Init+0x338>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x22e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_GPIO_Init+0x33c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x22a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_GPIO_Init+0x340>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x226>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_GPIO_Init+0x344>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x222>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	; (800231c <HAL_GPIO_Init+0x348>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x21e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_GPIO_Init+0x34c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x21a>
 80021ea:	2309      	movs	r3, #9
 80021ec:	e012      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021ee:	230a      	movs	r3, #10
 80021f0:	e010      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e00e      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f6:	2307      	movs	r3, #7
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002212:	2300      	movs	r3, #0
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002224:	4934      	ldr	r1, [pc, #208]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_GPIO_Init+0x350>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_GPIO_Init+0x350>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_GPIO_Init+0x350>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a13      	ldr	r2, [pc, #76]	; (8002324 <HAL_GPIO_Init+0x350>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f ae86 	bls.w	8001ff4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40021800 	.word	0x40021800
 8002318:	40021c00 	.word	0x40021c00
 800231c:	40022000 	.word	0x40022000
 8002320:	40022400 	.word	0x40022400
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235c:	b08f      	sub	sp, #60	; 0x3c
 800235e:	af0a      	add	r7, sp, #40	; 0x28
 8002360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e116      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe fbe6 	bl	8000b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 feec 	bl	8004188 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	687e      	ldr	r6, [r7, #4]
 80023b8:	466d      	mov	r5, sp
 80023ba:	f106 0410 	add.w	r4, r6, #16
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ce:	1d33      	adds	r3, r6, #4
 80023d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f001 fe80 	bl	80040d8 <USB_CoreInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0d7      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 feda 	bl	80041aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e04a      	b.n	8002492 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	333d      	adds	r3, #61	; 0x3d
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	333c      	adds	r3, #60	; 0x3c
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	b298      	uxth	r0, r3
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3342      	adds	r3, #66	; 0x42
 8002438:	4602      	mov	r2, r0
 800243a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	333f      	adds	r3, #63	; 0x3f
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3344      	adds	r3, #68	; 0x44
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3348      	adds	r3, #72	; 0x48
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3350      	adds	r3, #80	; 0x50
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3af      	bcc.n	80023fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e044      	b.n	800252c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3b5      	bcc.n	80024a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002550:	e885 0003 	stmia.w	r5, {r0, r1}
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f001 fe51 	bl	8004200 <USB_DevInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e014      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2b01      	cmp	r3, #1
 8002586:	d102      	bne.n	800258e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f80b 	bl	80025a4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 f803 	bl	800459e <USB_DevDisconnect>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	10000003 	.word	0x10000003

080025ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_PWREx_EnableOverDrive+0x98>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_PWREx_EnableOverDrive+0x98>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_PWREx_EnableOverDrive+0x98>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800261a:	f7fe fc53 	bl	8000ec4 <HAL_GetTick>
 800261e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002620:	e009      	b.n	8002636 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002622:	f7fe fc4f 	bl	8000ec4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002630:	d901      	bls.n	8002636 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e022      	b.n	800267c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002642:	d1ee      	bne.n	8002622 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_PWREx_EnableOverDrive+0x9c>)
 800264a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002650:	f7fe fc38 	bl	8000ec4 <HAL_GetTick>
 8002654:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002656:	e009      	b.n	800266c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002658:	f7fe fc34 	bl	8000ec4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002666:	d901      	bls.n	800266c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e007      	b.n	800267c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_PWREx_EnableOverDrive+0x9c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002678:	d1ee      	bne.n	8002658 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	40007000 	.word	0x40007000

0800268c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e29b      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8087 	beq.w	80027be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b0:	4b96      	ldr	r3, [pc, #600]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d00c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026bc:	4b93      	ldr	r3, [pc, #588]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d112      	bne.n	80026ee <HAL_RCC_OscConfig+0x62>
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d4:	d10b      	bne.n	80026ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4b8d      	ldr	r3, [pc, #564]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d06c      	beq.n	80027bc <HAL_RCC_OscConfig+0x130>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d168      	bne.n	80027bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e275      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x7a>
 80026f8:	4b84      	ldr	r3, [pc, #528]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a83      	ldr	r2, [pc, #524]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e02e      	b.n	8002764 <HAL_RCC_OscConfig+0xd8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x9c>
 800270e:	4b7f      	ldr	r3, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7e      	ldr	r2, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b7c      	ldr	r3, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7b      	ldr	r2, [pc, #492]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xd8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0xc0>
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b73      	ldr	r3, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xd8>
 800274c:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6b      	ldr	r2, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fbaa 	bl	8000ec4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fba6 	bl	8000ec4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e229      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fb96 	bl	8000ec4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fb92 	bl	8000ec4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e215      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x110>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d069      	beq.n	800289e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ca:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x190>
 80027e2:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x17a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1e9      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	493d      	ldr	r1, [pc, #244]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e040      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d023      	beq.n	800286c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fb48 	bl	8000ec4 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe fb44 	bl	8000ec4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e1c7      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4929      	ldr	r1, [pc, #164]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
 800286a:	e018      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x280>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a26      	ldr	r2, [pc, #152]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fb24 	bl	8000ec4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002880:	f7fe fb20 	bl	8000ec4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1a3      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d038      	beq.n	800291c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d019      	beq.n	80028e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	4a15      	ldr	r2, [pc, #84]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe fb01 	bl	8000ec4 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fafd 	bl	8000ec4 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e180      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x23a>
 80028e4:	e01a      	b.n	800291c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x280>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fae7 	bl	8000ec4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fae3 	bl	8000ec4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d903      	bls.n	8002910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e166      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
 800290c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b92      	ldr	r3, [pc, #584]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ee      	bne.n	80028fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a4 	beq.w	8002a72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a88      	ldr	r2, [pc, #544]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002952:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <HAL_RCC_OscConfig+0x4d4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d118      	bne.n	8002990 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800295e:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <HAL_RCC_OscConfig+0x4d4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7f      	ldr	r2, [pc, #508]	; (8002b60 <HAL_RCC_OscConfig+0x4d4>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296a:	f7fe faab 	bl	8000ec4 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002972:	f7fe faa7 	bl	8000ec4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b64      	cmp	r3, #100	; 0x64
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e12a      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002984:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x4d4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x31a>
 8002998:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a6f      	ldr	r2, [pc, #444]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	e02d      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x33c>
 80029ae:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ba:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	e01c      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d10c      	bne.n	80029ea <HAL_RCC_OscConfig+0x35e>
 80029d0:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a5e      	ldr	r2, [pc, #376]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e00b      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
 80029ea:	4b5c      	ldr	r3, [pc, #368]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a5b      	ldr	r2, [pc, #364]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d015      	beq.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fa5b 	bl	8000ec4 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fa57 	bl	8000ec4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0d8      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ee      	beq.n	8002a12 <HAL_RCC_OscConfig+0x386>
 8002a34:	e014      	b.n	8002a60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fa45 	bl	8000ec4 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fa41 	bl	8000ec4 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0c2      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ee      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d105      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a3c      	ldr	r2, [pc, #240]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80ae 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a7c:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d06d      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d14b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a31      	ldr	r2, [pc, #196]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fa12 	bl	8000ec4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fa0e 	bl	8000ec4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e091      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	071b      	lsls	r3, r3, #28
 8002aee:	491b      	ldr	r1, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe f9e0 	bl	8000ec4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe f9dc 	bl	8000ec4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e05f      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x47c>
 8002b26:	e057      	b.n	8002bd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe f9c6 	bl	8000ec4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe f9c2 	bl	8000ec4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e045      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4b0>
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x54c>
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <HAL_RCC_OscConfig+0x558>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d030      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d129      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d122      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d119      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0d0      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b67      	ldr	r3, [pc, #412]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 020f 	bic.w	r2, r3, #15
 8002c16:	4965      	ldr	r1, [pc, #404]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	494d      	ldr	r1, [pc, #308]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d040      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e073      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06b      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4936      	ldr	r1, [pc, #216]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fe f8f2 	bl	8000ec4 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7fe f8ee 	bl	8000ec4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e053      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d210      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 020f 	bic.w	r2, r3, #15
 8002d22:	4922      	ldr	r1, [pc, #136]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4916      	ldr	r1, [pc, #88]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 f821 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4601      	mov	r1, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1d0>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1d4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f84e 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023c00 	.word	0x40023c00
 8002db0:	40023800 	.word	0x40023800
 8002db4:	080163f0 	.word	0x080163f0
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d007      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x32>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d008      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x38>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 80b4 	bne.w	8002f54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dee:	60bb      	str	r3, [r7, #8]
      break;
 8002df0:	e0b3      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df2:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002df4:	60bb      	str	r3, [r7, #8]
      break;
 8002df6:	e0b0      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df8:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e00:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04a      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0e:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	f04f 0400 	mov.w	r4, #0
 8002e18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	ea03 0501 	and.w	r5, r3, r1
 8002e24:	ea04 0602 	and.w	r6, r4, r2
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4632      	mov	r2, r6
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	f04f 0400 	mov.w	r4, #0
 8002e34:	0154      	lsls	r4, r2, #5
 8002e36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e3a:	014b      	lsls	r3, r1, #5
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4622      	mov	r2, r4
 8002e40:	1b49      	subs	r1, r1, r5
 8002e42:	eb62 0206 	sbc.w	r2, r2, r6
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	f04f 0400 	mov.w	r4, #0
 8002e4e:	0194      	lsls	r4, r2, #6
 8002e50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e54:	018b      	lsls	r3, r1, #6
 8002e56:	1a5b      	subs	r3, r3, r1
 8002e58:	eb64 0402 	sbc.w	r4, r4, r2
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	00e2      	lsls	r2, r4, #3
 8002e66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e6a:	00d9      	lsls	r1, r3, #3
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4614      	mov	r4, r2
 8002e70:	195b      	adds	r3, r3, r5
 8002e72:	eb44 0406 	adc.w	r4, r4, r6
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	0262      	lsls	r2, r4, #9
 8002e80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e84:	0259      	lsls	r1, r3, #9
 8002e86:	460b      	mov	r3, r1
 8002e88:	4614      	mov	r4, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f04f 0400 	mov.w	r4, #0
 8002e94:	461a      	mov	r2, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	f7fd fa3a 	bl	8000310 <__aeabi_uldivmod>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e049      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	f04f 0400 	mov.w	r4, #0
 8002eae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	ea03 0501 	and.w	r5, r3, r1
 8002eba:	ea04 0602 	and.w	r6, r4, r2
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	0154      	lsls	r4, r2, #5
 8002ecc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ed0:	014b      	lsls	r3, r1, #5
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	1b49      	subs	r1, r1, r5
 8002ed8:	eb62 0206 	sbc.w	r2, r2, r6
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	f04f 0400 	mov.w	r4, #0
 8002ee4:	0194      	lsls	r4, r2, #6
 8002ee6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eea:	018b      	lsls	r3, r1, #6
 8002eec:	1a5b      	subs	r3, r3, r1
 8002eee:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	00e2      	lsls	r2, r4, #3
 8002efc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f00:	00d9      	lsls	r1, r3, #3
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	195b      	adds	r3, r3, r5
 8002f08:	eb44 0406 	adc.w	r4, r4, r6
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	02a2      	lsls	r2, r4, #10
 8002f16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f1a:	0299      	lsls	r1, r3, #10
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4614      	mov	r4, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	4621      	mov	r1, r4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4623      	mov	r3, r4
 8002f2e:	f7fd f9ef 	bl	8000310 <__aeabi_uldivmod>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	60bb      	str	r3, [r7, #8]
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f56:	60bb      	str	r3, [r7, #8]
      break;
 8002f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000000 	.word	0x20000000

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4601      	mov	r1, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4a03      	ldr	r2, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08016400 	.word	0x08016400

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fb4:	f7ff ffdc 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4601      	mov	r1, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0b5b      	lsrs	r3, r3, #13
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08016400 	.word	0x08016400

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003000:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a68      	ldr	r2, [pc, #416]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800300a:	6093      	str	r3, [r2, #8]
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	4964      	ldr	r1, [pc, #400]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d017      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003032:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	4959      	ldr	r1, [pc, #356]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003050:	d101      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003052:	2301      	movs	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d017      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800306e:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	494a      	ldr	r1, [pc, #296]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308c:	d101      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800308e:	2301      	movs	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800309a:	2301      	movs	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 808b 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030bc:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4a39      	ldr	r2, [pc, #228]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6413      	str	r3, [r2, #64]	; 0x40
 80030c8:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e0:	f7fd fef0 	bl	8000ec4 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd feec 	bl	8000ec4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e38d      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030fa:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003106:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d035      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	429a      	cmp	r2, r3
 8003122:	d02e      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003144:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800314c:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d114      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd feb4 	bl	8000ec4 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	e00a      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fd feb0 	bl	8000ec4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e34f      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800318e:	d111      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800319e:	400b      	ands	r3, r1
 80031a0:	4901      	ldr	r1, [pc, #4]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	0ffffcff 	.word	0x0ffffcff
 80031b4:	4bb3      	ldr	r3, [pc, #716]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4ab2      	ldr	r2, [pc, #712]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	4bb0      	ldr	r3, [pc, #704]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031cc:	49ad      	ldr	r1, [pc, #692]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031de:	4ba9      	ldr	r3, [pc, #676]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e4:	4aa7      	ldr	r2, [pc, #668]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ee:	4ba5      	ldr	r3, [pc, #660]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	49a2      	ldr	r1, [pc, #648]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800320c:	4b9d      	ldr	r3, [pc, #628]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321a:	499a      	ldr	r1, [pc, #616]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800322e:	4b95      	ldr	r3, [pc, #596]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323c:	4991      	ldr	r1, [pc, #580]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003250:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325e:	4989      	ldr	r1, [pc, #548]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003272:	4b84      	ldr	r3, [pc, #528]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4980      	ldr	r1, [pc, #512]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003294:	4b7b      	ldr	r3, [pc, #492]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f023 0203 	bic.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4978      	ldr	r1, [pc, #480]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f023 020c 	bic.w	r2, r3, #12
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	496f      	ldr	r1, [pc, #444]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	4967      	ldr	r1, [pc, #412]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032fa:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003308:	495e      	ldr	r1, [pc, #376]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800331c:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	4956      	ldr	r1, [pc, #344]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800333e:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	494d      	ldr	r1, [pc, #308]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003360:	4b48      	ldr	r3, [pc, #288]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	4945      	ldr	r1, [pc, #276]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003390:	493c      	ldr	r1, [pc, #240]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b2:	4934      	ldr	r1, [pc, #208]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d011      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033c6:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d4:	492b      	ldr	r1, [pc, #172]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	491b      	ldr	r1, [pc, #108]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003438:	4912      	ldr	r1, [pc, #72]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345c:	4909      	ldr	r1, [pc, #36]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003476:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	e002      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	4985      	ldr	r1, [pc, #532]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800349c:	4b80      	ldr	r3, [pc, #512]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ac:	497c      	ldr	r1, [pc, #496]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d005      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c2:	f040 80d6 	bne.w	8003672 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d2:	f7fd fcf7 	bl	8000ec4 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034da:	f7fd fcf3 	bl	8000ec4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e194      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034ec:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d021      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11d      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800350c:	4b64      	ldr	r3, [pc, #400]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800350e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800351a:	4b61      	ldr	r3, [pc, #388]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	0e1b      	lsrs	r3, r3, #24
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	019a      	lsls	r2, r3, #6
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	071b      	lsls	r3, r3, #28
 8003540:	4957      	ldr	r1, [pc, #348]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02e      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d129      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003574:	4b4a      	ldr	r3, [pc, #296]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003588:	0f1b      	lsrs	r3, r3, #28
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	019a      	lsls	r2, r3, #6
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	431a      	orrs	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	071b      	lsls	r3, r3, #28
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035b0:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b6:	f023 021f 	bic.w	r2, r3, #31
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	3b01      	subs	r3, #1
 80035c0:	4937      	ldr	r1, [pc, #220]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035da:	0e1b      	lsrs	r3, r3, #24
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035e2:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e8:	0f1b      	lsrs	r3, r3, #28
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	019a      	lsls	r2, r3, #6
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	071b      	lsls	r3, r3, #28
 8003608:	4925      	ldr	r1, [pc, #148]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	019a      	lsls	r2, r3, #6
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	071b      	lsls	r3, r3, #28
 8003638:	4919      	ldr	r1, [pc, #100]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800364a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364c:	f7fd fc3a 	bl	8000ec4 <HAL_GetTick>
 8003650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003654:	f7fd fc36 	bl	8000ec4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0d7      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	f040 80cd 	bne.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003686:	f7fd fc1d 	bl	8000ec4 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800368e:	f7fd fc19 	bl	8000ec4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	; 0x64
 800369a:	d903      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0ba      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80036a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036a4:	4b5e      	ldr	r3, [pc, #376]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b0:	d0ed      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02e      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d12a      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036da:	4b51      	ldr	r3, [pc, #324]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036e8:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	0f1b      	lsrs	r3, r3, #28
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	019a      	lsls	r2, r3, #6
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	071b      	lsls	r3, r3, #28
 800370e:	4944      	ldr	r1, [pc, #272]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003716:	4b42      	ldr	r3, [pc, #264]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	493d      	ldr	r1, [pc, #244]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d022      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003744:	d11d      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	0e1b      	lsrs	r3, r3, #24
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003754:	4b32      	ldr	r3, [pc, #200]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	0f1b      	lsrs	r3, r3, #28
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	019a      	lsls	r2, r3, #6
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	071b      	lsls	r3, r3, #28
 800377a:	4929      	ldr	r1, [pc, #164]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d028      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	0e1b      	lsrs	r3, r3, #24
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800379c:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	019a      	lsls	r2, r3, #6
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	431a      	orrs	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	071b      	lsls	r3, r3, #28
 80037c2:	4917      	ldr	r1, [pc, #92]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4911      	ldr	r1, [pc, #68]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd fb6a 	bl	8000ec4 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037f4:	f7fd fb66 	bl	8000ec4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e007      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003812:	d1ef      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800

08003824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e040      	b.n	80038b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd f942 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	; 0x24
 8003850:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f82c 	bl	80038c0 <UART_SetConfig>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 faca 	bl	8003e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800388e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800389e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb51 	bl	8003f58 <UART_CheckIdleState>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4bb1      	ldr	r3, [pc, #708]	; (8003bb4 <UART_SetConfig+0x2f4>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	6939      	ldr	r1, [r7, #16]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	430a      	orrs	r2, r1
 8003934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a9f      	ldr	r2, [pc, #636]	; (8003bb8 <UART_SetConfig+0x2f8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d121      	bne.n	8003984 <UART_SetConfig+0xc4>
 8003940:	4b9e      	ldr	r3, [pc, #632]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b03      	cmp	r3, #3
 800394c:	d816      	bhi.n	800397c <UART_SetConfig+0xbc>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0x94>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003965 	.word	0x08003965
 8003958:	08003971 	.word	0x08003971
 800395c:	0800396b 	.word	0x0800396b
 8003960:	08003977 	.word	0x08003977
 8003964:	2301      	movs	r3, #1
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e151      	b.n	8003c0e <UART_SetConfig+0x34e>
 800396a:	2302      	movs	r3, #2
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e14e      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003970:	2304      	movs	r3, #4
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e14b      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003976:	2308      	movs	r3, #8
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e148      	b.n	8003c0e <UART_SetConfig+0x34e>
 800397c:	2310      	movs	r3, #16
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	bf00      	nop
 8003982:	e144      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a8d      	ldr	r2, [pc, #564]	; (8003bc0 <UART_SetConfig+0x300>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d134      	bne.n	80039f8 <UART_SetConfig+0x138>
 800398e:	4b8b      	ldr	r3, [pc, #556]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b0c      	cmp	r3, #12
 800399a:	d829      	bhi.n	80039f0 <UART_SetConfig+0x130>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0xe4>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039d9 	.word	0x080039d9
 80039a8:	080039f1 	.word	0x080039f1
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039f1 	.word	0x080039f1
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039df 	.word	0x080039df
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f1 	.word	0x080039f1
 80039d4:	080039eb 	.word	0x080039eb
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e117      	b.n	8003c0e <UART_SetConfig+0x34e>
 80039de:	2302      	movs	r3, #2
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e114      	b.n	8003c0e <UART_SetConfig+0x34e>
 80039e4:	2304      	movs	r3, #4
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e111      	b.n	8003c0e <UART_SetConfig+0x34e>
 80039ea:	2308      	movs	r3, #8
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e10e      	b.n	8003c0e <UART_SetConfig+0x34e>
 80039f0:	2310      	movs	r3, #16
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	bf00      	nop
 80039f6:	e10a      	b.n	8003c0e <UART_SetConfig+0x34e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a71      	ldr	r2, [pc, #452]	; (8003bc4 <UART_SetConfig+0x304>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d120      	bne.n	8003a44 <UART_SetConfig+0x184>
 8003a02:	4b6e      	ldr	r3, [pc, #440]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d00f      	beq.n	8003a30 <UART_SetConfig+0x170>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d802      	bhi.n	8003a1a <UART_SetConfig+0x15a>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <UART_SetConfig+0x164>
 8003a18:	e010      	b.n	8003a3c <UART_SetConfig+0x17c>
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d005      	beq.n	8003a2a <UART_SetConfig+0x16a>
 8003a1e:	2b30      	cmp	r3, #48	; 0x30
 8003a20:	d009      	beq.n	8003a36 <UART_SetConfig+0x176>
 8003a22:	e00b      	b.n	8003a3c <UART_SetConfig+0x17c>
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e0f1      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e0ee      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a30:	2304      	movs	r3, #4
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e0eb      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a36:	2308      	movs	r3, #8
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e0e8      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	bf00      	nop
 8003a42:	e0e4      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5f      	ldr	r2, [pc, #380]	; (8003bc8 <UART_SetConfig+0x308>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d120      	bne.n	8003a90 <UART_SetConfig+0x1d0>
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d00f      	beq.n	8003a7c <UART_SetConfig+0x1bc>
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d802      	bhi.n	8003a66 <UART_SetConfig+0x1a6>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <UART_SetConfig+0x1b0>
 8003a64:	e010      	b.n	8003a88 <UART_SetConfig+0x1c8>
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d005      	beq.n	8003a76 <UART_SetConfig+0x1b6>
 8003a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a6c:	d009      	beq.n	8003a82 <UART_SetConfig+0x1c2>
 8003a6e:	e00b      	b.n	8003a88 <UART_SetConfig+0x1c8>
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0cb      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e0c8      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e0c5      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a82:	2308      	movs	r3, #8
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e0c2      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	bf00      	nop
 8003a8e:	e0be      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4d      	ldr	r2, [pc, #308]	; (8003bcc <UART_SetConfig+0x30c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d124      	bne.n	8003ae4 <UART_SetConfig+0x224>
 8003a9a:	4b48      	ldr	r3, [pc, #288]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa8:	d012      	beq.n	8003ad0 <UART_SetConfig+0x210>
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	d802      	bhi.n	8003ab6 <UART_SetConfig+0x1f6>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <UART_SetConfig+0x204>
 8003ab4:	e012      	b.n	8003adc <UART_SetConfig+0x21c>
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aba:	d006      	beq.n	8003aca <UART_SetConfig+0x20a>
 8003abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac0:	d009      	beq.n	8003ad6 <UART_SetConfig+0x216>
 8003ac2:	e00b      	b.n	8003adc <UART_SetConfig+0x21c>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e0a1      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e09e      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e09b      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e098      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	bf00      	nop
 8003ae2:	e094      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a39      	ldr	r2, [pc, #228]	; (8003bd0 <UART_SetConfig+0x310>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d124      	bne.n	8003b38 <UART_SetConfig+0x278>
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d012      	beq.n	8003b24 <UART_SetConfig+0x264>
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b02:	d802      	bhi.n	8003b0a <UART_SetConfig+0x24a>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <UART_SetConfig+0x258>
 8003b08:	e012      	b.n	8003b30 <UART_SetConfig+0x270>
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0e:	d006      	beq.n	8003b1e <UART_SetConfig+0x25e>
 8003b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b14:	d009      	beq.n	8003b2a <UART_SetConfig+0x26a>
 8003b16:	e00b      	b.n	8003b30 <UART_SetConfig+0x270>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e077      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e074      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b24:	2304      	movs	r3, #4
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e071      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e06e      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b30:	2310      	movs	r3, #16
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	bf00      	nop
 8003b36:	e06a      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <UART_SetConfig+0x314>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d124      	bne.n	8003b8c <UART_SetConfig+0x2cc>
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d012      	beq.n	8003b78 <UART_SetConfig+0x2b8>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d802      	bhi.n	8003b5e <UART_SetConfig+0x29e>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <UART_SetConfig+0x2ac>
 8003b5c:	e012      	b.n	8003b84 <UART_SetConfig+0x2c4>
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	d006      	beq.n	8003b72 <UART_SetConfig+0x2b2>
 8003b64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b68:	d009      	beq.n	8003b7e <UART_SetConfig+0x2be>
 8003b6a:	e00b      	b.n	8003b84 <UART_SetConfig+0x2c4>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e04d      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e04a      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e047      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e044      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b84:	2310      	movs	r3, #16
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	bf00      	nop
 8003b8a:	e040      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <UART_SetConfig+0x318>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d139      	bne.n	8003c0a <UART_SetConfig+0x34a>
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <UART_SetConfig+0x2fc>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba4:	d027      	beq.n	8003bf6 <UART_SetConfig+0x336>
 8003ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003baa:	d817      	bhi.n	8003bdc <UART_SetConfig+0x31c>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01c      	beq.n	8003bea <UART_SetConfig+0x32a>
 8003bb0:	e027      	b.n	8003c02 <UART_SetConfig+0x342>
 8003bb2:	bf00      	nop
 8003bb4:	efff69f3 	.word	0xefff69f3
 8003bb8:	40011000 	.word	0x40011000
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	40004c00 	.word	0x40004c00
 8003bcc:	40005000 	.word	0x40005000
 8003bd0:	40011400 	.word	0x40011400
 8003bd4:	40007800 	.word	0x40007800
 8003bd8:	40007c00 	.word	0x40007c00
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be0:	d006      	beq.n	8003bf0 <UART_SetConfig+0x330>
 8003be2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003be6:	d009      	beq.n	8003bfc <UART_SetConfig+0x33c>
 8003be8:	e00b      	b.n	8003c02 <UART_SetConfig+0x342>
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e00e      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e00b      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e008      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e005      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003c02:	2310      	movs	r3, #16
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	bf00      	nop
 8003c08:	e001      	b.n	8003c0e <UART_SetConfig+0x34e>
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c16:	d17f      	bne.n	8003d18 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003c18:	7ffb      	ldrb	r3, [r7, #31]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d85c      	bhi.n	8003cd8 <UART_SetConfig+0x418>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <UART_SetConfig+0x364>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c89 	.word	0x08003c89
 8003c30:	08003cd9 	.word	0x08003cd9
 8003c34:	08003ca1 	.word	0x08003ca1
 8003c38:	08003cd9 	.word	0x08003cd9
 8003c3c:	08003cd9 	.word	0x08003cd9
 8003c40:	08003cd9 	.word	0x08003cd9
 8003c44:	08003cc1 	.word	0x08003cc1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c48:	f7ff f99e 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	005a      	lsls	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	61bb      	str	r3, [r7, #24]
        break;
 8003c66:	e03a      	b.n	8003cde <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7ff f9a2 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	005a      	lsls	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	441a      	add	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	61bb      	str	r3, [r7, #24]
        break;
 8003c86:	e02a      	b.n	8003cde <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	085a      	lsrs	r2, r3, #1
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <UART_SetConfig+0x54c>)
 8003c90:	4413      	add	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6852      	ldr	r2, [r2, #4]
 8003c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	61bb      	str	r3, [r7, #24]
        break;
 8003c9e:	e01e      	b.n	8003cde <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca0:	f7ff f88e 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8003ca4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	005a      	lsls	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
        break;
 8003cbe:	e00e      	b.n	8003cde <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	61bb      	str	r3, [r7, #24]
        break;
 8003cd6:	e002      	b.n	8003cde <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
        break;
 8003cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d916      	bls.n	8003d12 <UART_SetConfig+0x452>
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cea:	d212      	bcs.n	8003d12 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f023 030f 	bic.w	r3, r3, #15
 8003cf4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	897a      	ldrh	r2, [r7, #10]
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e070      	b.n	8003df4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
 8003d16:	e06d      	b.n	8003df4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d859      	bhi.n	8003dd2 <UART_SetConfig+0x512>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0x464>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003dd3 	.word	0x08003dd3
 8003d34:	08003d9d 	.word	0x08003d9d
 8003d38:	08003dd3 	.word	0x08003dd3
 8003d3c:	08003dd3 	.word	0x08003dd3
 8003d40:	08003dd3 	.word	0x08003dd3
 8003d44:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7ff f91e 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8003d4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	085a      	lsrs	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	441a      	add	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	61bb      	str	r3, [r7, #24]
        break;
 8003d64:	e038      	b.n	8003dd8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d66:	f7ff f923 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8003d6a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	085a      	lsrs	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	441a      	add	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	61bb      	str	r3, [r7, #24]
        break;
 8003d82:	e029      	b.n	8003dd8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	085a      	lsrs	r2, r3, #1
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <UART_SetConfig+0x550>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6852      	ldr	r2, [r2, #4]
 8003d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	61bb      	str	r3, [r7, #24]
        break;
 8003d9a:	e01d      	b.n	8003dd8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9c:	f7ff f810 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8003da0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	085a      	lsrs	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	61bb      	str	r3, [r7, #24]
        break;
 8003db8:	e00e      	b.n	8003dd8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e002      	b.n	8003dd8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
        break;
 8003dd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d908      	bls.n	8003df0 <UART_SetConfig+0x530>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d204      	bcs.n	8003df0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	e001      	b.n	8003df4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	01e84800 	.word	0x01e84800
 8003e10:	00f42400 	.word	0x00f42400

08003e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d10a      	bne.n	8003f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f66:	f7fc ffad 	bl	8000ec4 <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d10e      	bne.n	8003f98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f82a 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e020      	b.n	8003fda <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d10e      	bne.n	8003fc4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f814 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e00a      	b.n	8003fda <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff2:	e05d      	b.n	80040b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d059      	beq.n	80040b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffc:	f7fc ff62 	bl	8000ec4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <UART_WaitOnFlagUntilTimeout+0x30>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11b      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004020:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e042      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02b      	beq.n	80040b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004066:	d123      	bne.n	80040b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004070:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004080:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e00f      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d092      	beq.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040d8:	b084      	sub	sp, #16
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	f107 001c 	add.w	r0, r7, #28
 80040e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d120      	bne.n	8004132 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <USB_CoreInit+0xac>)
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa52 	bl	80045d0 <USB_CoreReset>
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	e010      	b.n	8004154 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa46 	bl	80045d0 <USB_CoreReset>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b01      	cmp	r3, #1
 8004158:	d10b      	bne.n	8004172 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f043 0206 	orr.w	r2, r3, #6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800417e:	b004      	add	sp, #16
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	ffbdffbf 	.word	0xffbdffbf

08004188 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 0201 	bic.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d106      	bne.n	80041d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	e00b      	b.n	80041ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	e001      	b.n	80041ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e003      	b.n	80041f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80041ee:	2032      	movs	r0, #50	; 0x32
 80041f0:	f7fc fe74 	bl	8000edc <HAL_Delay>

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004200:	b084      	sub	sp, #16
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800420e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	e009      	b.n	8004234 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3340      	adds	r3, #64	; 0x40
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	2200      	movs	r2, #0
 800422c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3301      	adds	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0e      	cmp	r3, #14
 8004238:	d9f2      	bls.n	8004220 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11c      	bne.n	800427a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e005      	b.n	8004286 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	4619      	mov	r1, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	461a      	mov	r2, r3
 80042a2:	680b      	ldr	r3, [r1, #0]
 80042a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10c      	bne.n	80042c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042b2:	2100      	movs	r1, #0
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f959 	bl	800456c <USB_SetDevSpeed>
 80042ba:	e018      	b.n	80042ee <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042bc:	2101      	movs	r1, #1
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f954 	bl	800456c <USB_SetDevSpeed>
 80042c4:	e013      	b.n	80042ee <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d10c      	bne.n	80042e6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042d2:	2100      	movs	r1, #0
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f949 	bl	800456c <USB_SetDevSpeed>
 80042da:	e008      	b.n	80042ee <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042dc:	2101      	movs	r1, #1
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f944 	bl	800456c <USB_SetDevSpeed>
 80042e4:	e003      	b.n	80042ee <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042e6:	2103      	movs	r1, #3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f93f 	bl	800456c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ee:	2110      	movs	r1, #16
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8f3 	bl	80044dc <USB_FlushTxFifo>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f911 	bl	8004528 <USB_FlushRxFifo>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	461a      	mov	r2, r3
 8004324:	2300      	movs	r3, #0
 8004326:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e043      	b.n	80043c2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800434c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004350:	d118      	bne.n	8004384 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	461a      	mov	r2, r3
 8004366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e013      	b.n	8004396 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e008      	b.n	8004396 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	461a      	mov	r2, r3
 80043b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	3301      	adds	r3, #1
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3b7      	bcc.n	800433a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e043      	b.n	8004458 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e6:	d118      	bne.n	800441a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e013      	b.n	800442c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	461a      	mov	r2, r3
 8004412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e008      	b.n	800442c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d3b7      	bcc.n	80043d0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800446e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004472:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f043 0210 	orr.w	r2, r3, #16
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <USB_DevInit+0x2d4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f043 0208 	orr.w	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <USB_DevInit+0x2d8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044d0:	b004      	add	sp, #16
 80044d2:	4770      	bx	lr
 80044d4:	803c3800 	.word	0x803c3800
 80044d8:	40000004 	.word	0x40000004

080044dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <USB_FlushTxFifo+0x48>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b20      	cmp	r3, #32
 8004512:	d0f0      	beq.n	80044f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	00030d40 	.word	0x00030d40

08004528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2210      	movs	r2, #16
 8004538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a09      	ldr	r2, [pc, #36]	; (8004568 <USB_FlushRxFifo+0x40>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e006      	b.n	800455a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d0f0      	beq.n	800453a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	00030d40 	.word	0x00030d40

0800456c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80045be:	2003      	movs	r0, #3
 80045c0:	f7fc fc8c 	bl	8000edc <HAL_Delay>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a13      	ldr	r2, [pc, #76]	; (8004634 <USB_CoreReset+0x64>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e01b      	b.n	8004626 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	daf2      	bge.n	80045dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <USB_CoreReset+0x64>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d0f0      	beq.n	8004606 <USB_CoreReset+0x36>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	00030d40 	.word	0x00030d40

08004638 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800463e:	f001 faa1 	bl	8005b84 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <MX_LWIP_Init+0x68>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <MX_LWIP_Init+0x6c>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <MX_LWIP_Init+0x70>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <MX_LWIP_Init+0x74>)
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <MX_LWIP_Init+0x78>)
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	2300      	movs	r3, #0
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <MX_LWIP_Init+0x70>)
 8004662:	4a10      	ldr	r2, [pc, #64]	; (80046a4 <MX_LWIP_Init+0x6c>)
 8004664:	490e      	ldr	r1, [pc, #56]	; (80046a0 <MX_LWIP_Init+0x68>)
 8004666:	4813      	ldr	r0, [pc, #76]	; (80046b4 <MX_LWIP_Init+0x7c>)
 8004668:	f001 ff32 	bl	80064d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800466c:	4811      	ldr	r0, [pc, #68]	; (80046b4 <MX_LWIP_Init+0x7c>)
 800466e:	f002 f8e5 	bl	800683c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <MX_LWIP_Init+0x7c>)
 8004674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004684:	480b      	ldr	r0, [pc, #44]	; (80046b4 <MX_LWIP_Init+0x7c>)
 8004686:	f002 f8e9 	bl	800685c <netif_set_up>
 800468a:	e002      	b.n	8004692 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800468c:	4809      	ldr	r0, [pc, #36]	; (80046b4 <MX_LWIP_Init+0x7c>)
 800468e:	f002 f951 	bl	8006934 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004692:	4808      	ldr	r0, [pc, #32]	; (80046b4 <MX_LWIP_Init+0x7c>)
 8004694:	f00a f966 	bl	800e964 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000b30 	.word	0x20000b30
 80046a4:	20000b34 	.word	0x20000b34
 80046a8:	20000b38 	.word	0x20000b38
 80046ac:	08012321 	.word	0x08012321
 80046b0:	08004c71 	.word	0x08004c71
 80046b4:	20000afc 	.word	0x20000afc

080046b8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80046bc:	4803      	ldr	r0, [pc, #12]	; (80046cc <MX_LWIP_Process+0x14>)
 80046be:	f000 fab7 	bl	8004c30 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 80046c2:	f009 f8d3 	bl	800d86c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000afc 	.word	0x20000afc

080046d0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08e      	sub	sp, #56	; 0x38
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a4e      	ldr	r2, [pc, #312]	; (8004828 <HAL_ETH_MspInit+0x158>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	f040 8096 	bne.w	8004820 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046f4:	4b4d      	ldr	r3, [pc, #308]	; (800482c <HAL_ETH_MspInit+0x15c>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4a4c      	ldr	r2, [pc, #304]	; (800482c <HAL_ETH_MspInit+0x15c>)
 80046fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004700:	4b4a      	ldr	r3, [pc, #296]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	4a46      	ldr	r2, [pc, #280]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004716:	6313      	str	r3, [r2, #48]	; 0x30
 8004718:	4b44      	ldr	r3, [pc, #272]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4a40      	ldr	r2, [pc, #256]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800472a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800472e:	6313      	str	r3, [r2, #48]	; 0x30
 8004730:	4b3e      	ldr	r3, [pc, #248]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	4a3a      	ldr	r2, [pc, #232]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	6313      	str	r3, [r2, #48]	; 0x30
 8004748:	4b38      	ldr	r3, [pc, #224]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004754:	4b35      	ldr	r3, [pc, #212]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	4a34      	ldr	r2, [pc, #208]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6313      	str	r3, [r2, #48]	; 0x30
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476c:	4b2f      	ldr	r3, [pc, #188]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4a2e      	ldr	r2, [pc, #184]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	6313      	str	r3, [r2, #48]	; 0x30
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	4a28      	ldr	r2, [pc, #160]	; (800482c <HAL_ETH_MspInit+0x15c>)
 800478a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800478e:	6313      	str	r3, [r2, #48]	; 0x30
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_ETH_MspInit+0x15c>)
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800479c:	2332      	movs	r3, #50	; 0x32
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a0:	2302      	movs	r3, #2
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a8:	2303      	movs	r3, #3
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047ac:	230b      	movs	r3, #11
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b4:	4619      	mov	r1, r3
 80047b6:	481e      	ldr	r0, [pc, #120]	; (8004830 <HAL_ETH_MspInit+0x160>)
 80047b8:	f7fd fc0c 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80047bc:	2386      	movs	r3, #134	; 0x86
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	2302      	movs	r3, #2
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c8:	2303      	movs	r3, #3
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047cc:	230b      	movs	r3, #11
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d4:	4619      	mov	r1, r3
 80047d6:	4817      	ldr	r0, [pc, #92]	; (8004834 <HAL_ETH_MspInit+0x164>)
 80047d8:	f7fd fbfc 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80047dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e2:	2302      	movs	r3, #2
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ea:	2303      	movs	r3, #3
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047ee:	230b      	movs	r3, #11
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80047f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f6:	4619      	mov	r1, r3
 80047f8:	480f      	ldr	r0, [pc, #60]	; (8004838 <HAL_ETH_MspInit+0x168>)
 80047fa:	f7fd fbeb 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80047fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004804:	2302      	movs	r3, #2
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004808:	2300      	movs	r3, #0
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480c:	2303      	movs	r3, #3
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004810:	230b      	movs	r3, #11
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004818:	4619      	mov	r1, r3
 800481a:	4808      	ldr	r0, [pc, #32]	; (800483c <HAL_ETH_MspInit+0x16c>)
 800481c:	f7fd fbda 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004820:	bf00      	nop
 8004822:	3738      	adds	r7, #56	; 0x38
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40028000 	.word	0x40028000
 800482c:	40023800 	.word	0x40023800
 8004830:	40020800 	.word	0x40020800
 8004834:	40020000 	.word	0x40020000
 8004838:	40020400 	.word	0x40020400
 800483c:	40021800 	.word	0x40021800

08004840 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800484c:	4b49      	ldr	r3, [pc, #292]	; (8004974 <low_level_init+0x134>)
 800484e:	4a4a      	ldr	r2, [pc, #296]	; (8004978 <low_level_init+0x138>)
 8004850:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004852:	4b48      	ldr	r3, [pc, #288]	; (8004974 <low_level_init+0x134>)
 8004854:	2201      	movs	r2, #1
 8004856:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004858:	4b46      	ldr	r3, [pc, #280]	; (8004974 <low_level_init+0x134>)
 800485a:	2200      	movs	r2, #0
 800485c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800485e:	2300      	movs	r3, #0
 8004860:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004866:	23e1      	movs	r3, #225	; 0xe1
 8004868:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800486a:	2300      	movs	r3, #0
 800486c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800486e:	2300      	movs	r3, #0
 8004870:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004872:	2300      	movs	r3, #0
 8004874:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004876:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <low_level_init+0x134>)
 8004878:	f107 0308 	add.w	r3, r7, #8
 800487c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800487e:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <low_level_init+0x134>)
 8004880:	2200      	movs	r2, #0
 8004882:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <low_level_init+0x134>)
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800488a:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <low_level_init+0x134>)
 800488c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004890:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004892:	4838      	ldr	r0, [pc, #224]	; (8004974 <low_level_init+0x134>)
 8004894:	f7fc fc2a 	bl	80010ec <HAL_ETH_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d108      	bne.n	80048b4 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80048b4:	2304      	movs	r3, #4
 80048b6:	4a31      	ldr	r2, [pc, #196]	; (800497c <low_level_init+0x13c>)
 80048b8:	4931      	ldr	r1, [pc, #196]	; (8004980 <low_level_init+0x140>)
 80048ba:	482e      	ldr	r0, [pc, #184]	; (8004974 <low_level_init+0x134>)
 80048bc:	f7fc fdb2 	bl	8001424 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80048c0:	2304      	movs	r3, #4
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <low_level_init+0x144>)
 80048c4:	4930      	ldr	r1, [pc, #192]	; (8004988 <low_level_init+0x148>)
 80048c6:	482b      	ldr	r0, [pc, #172]	; (8004974 <low_level_init+0x134>)
 80048c8:	f7fc fe15 	bl	80014f6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2206      	movs	r2, #6
 80048d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <low_level_init+0x134>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <low_level_init+0x134>)
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	785a      	ldrb	r2, [r3, #1]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <low_level_init+0x134>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	789a      	ldrb	r2, [r3, #2]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <low_level_init+0x134>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	78da      	ldrb	r2, [r3, #3]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <low_level_init+0x134>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	791a      	ldrb	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <low_level_init+0x134>)
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	795a      	ldrb	r2, [r3, #5]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004922:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800492a:	f043 030a 	orr.w	r3, r3, #10
 800492e:	b2da      	uxtb	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004936:	480f      	ldr	r0, [pc, #60]	; (8004974 <low_level_init+0x134>)
 8004938:	f7fd f886 	bl	8001a48 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800493c:	f107 0310 	add.w	r3, r7, #16
 8004940:	461a      	mov	r2, r3
 8004942:	211d      	movs	r1, #29
 8004944:	480b      	ldr	r0, [pc, #44]	; (8004974 <low_level_init+0x134>)
 8004946:	f7fc ffb1 	bl	80018ac <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f043 030b 	orr.w	r3, r3, #11
 8004950:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	461a      	mov	r2, r3
 8004956:	211d      	movs	r1, #29
 8004958:	4806      	ldr	r0, [pc, #24]	; (8004974 <low_level_init+0x134>)
 800495a:	f7fd f80f 	bl	800197c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800495e:	f107 0310 	add.w	r3, r7, #16
 8004962:	461a      	mov	r2, r3
 8004964:	211d      	movs	r1, #29
 8004966:	4803      	ldr	r0, [pc, #12]	; (8004974 <low_level_init+0x134>)
 8004968:	f7fc ffa0 	bl	80018ac <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	2000240c 	.word	0x2000240c
 8004978:	40028000 	.word	0x40028000
 800497c:	20002454 	.word	0x20002454
 8004980:	20000b3c 	.word	0x20000b3c
 8004984:	20000bbc 	.word	0x20000bbc
 8004988:	2000238c 	.word	0x2000238c

0800498c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <low_level_output+0x138>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80049ae:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <low_level_output+0x138>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	e05a      	b.n	8004a74 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da03      	bge.n	80049ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80049c6:	23f8      	movs	r3, #248	; 0xf8
 80049c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80049cc:	e05c      	b.n	8004a88 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	895b      	ldrh	r3, [r3, #10]
 80049d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80049d8:	e02f      	b.n	8004a3a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	18d0      	adds	r0, r2, r3
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	18d1      	adds	r1, r2, r3
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	f00d fd9e 	bl	8012532 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da03      	bge.n	8004a0c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a04:	23f8      	movs	r3, #248	; 0xf8
 8004a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004a0a:	e03d      	b.n	8004a88 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a1c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a28:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a34:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d8c8      	bhi.n	80049da <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	18d0      	adds	r0, r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f00d fd6a 	bl	8012532 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1a1      	bne.n	80049be <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004a7a:	6979      	ldr	r1, [r7, #20]
 8004a7c:	4811      	ldr	r0, [pc, #68]	; (8004ac4 <low_level_output+0x138>)
 8004a7e:	f7fc fda7 	bl	80015d0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004a88:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <low_level_output+0x138>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a90:	4413      	add	r3, r2
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <low_level_output+0x138>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f241 0314 	movw	r3, #4116	; 0x1014
 8004aa4:	4413      	add	r3, r2
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <low_level_output+0x138>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f241 0304 	movw	r3, #4100	; 0x1004
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000240c 	.word	0x2000240c

08004ac8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004aec:	484f      	ldr	r0, [pc, #316]	; (8004c2c <low_level_input+0x164>)
 8004aee:	f7fc fe59 	bl	80017a4 <HAL_ETH_GetReceivedFrame>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <low_level_input+0x34>
  
    return NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e092      	b.n	8004c22 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004afc:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <low_level_input+0x164>)
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <low_level_input+0x164>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004b08:	89fb      	ldrh	r3, [r7, #14]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004b14:	4619      	mov	r1, r3
 8004b16:	2000      	movs	r0, #0
 8004b18:	f001 ffc8 	bl	8006aac <pbuf_alloc>
 8004b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d04b      	beq.n	8004bbc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b24:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <low_level_input+0x164>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b32:	e040      	b.n	8004bb6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	895b      	ldrh	r3, [r3, #10]
 8004b38:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b3e:	e021      	b.n	8004b84 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	18d0      	adds	r0, r2, r3
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	18d1      	adds	r1, r2, r3
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	461a      	mov	r2, r3
 8004b58:	f00d fceb 	bl	8012532 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004b72:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004b7e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d8d6      	bhi.n	8004b40 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	18d0      	adds	r0, r2, r3
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f00d fcc5 	bl	8012532 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1bb      	bne.n	8004b34 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <low_level_input+0x164>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e00b      	b.n	8004be0 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <low_level_input+0x164>)
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d3ee      	bcc.n	8004bc8 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <low_level_input+0x164>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <low_level_input+0x164>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	f241 0314 	movw	r3, #4116	; 0x1014
 8004bf8:	4413      	add	r3, r2
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <low_level_input+0x164>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c0c:	4413      	add	r3, r2
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <low_level_input+0x164>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	f241 0308 	movw	r3, #4104	; 0x1008
 8004c1a:	4413      	add	r3, r2
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	2000240c 	.word	0x2000240c

08004c30 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff45 	bl	8004ac8 <low_level_input>
 8004c3e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	4798      	blx	r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8004c54:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f002 fa05 	bl	800706c <pbuf_free>
    p = NULL;    
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e000      	b.n	8004c6a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004c68:	bf00      	nop
  }
}
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <ethernetif_init+0x1c>
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <ethernetif_init+0x48>)
 8004c80:	f240 2211 	movw	r2, #529	; 0x211
 8004c84:	490d      	ldr	r1, [pc, #52]	; (8004cbc <ethernetif_init+0x4c>)
 8004c86:	480e      	ldr	r0, [pc, #56]	; (8004cc0 <ethernetif_init+0x50>)
 8004c88:	f00d fc66 	bl	8012558 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2273      	movs	r2, #115	; 0x73
 8004c90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2274      	movs	r2, #116	; 0x74
 8004c98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <ethernetif_init+0x54>)
 8004ca0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <ethernetif_init+0x58>)
 8004ca6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fdc9 	bl	8004840 <low_level_init>

  return ERR_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	0801341c 	.word	0x0801341c
 8004cbc:	08013438 	.word	0x08013438
 8004cc0:	08013448 	.word	0x08013448
 8004cc4:	080107b5 	.word	0x080107b5
 8004cc8:	0800498d 	.word	0x0800498d

08004ccc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cd0:	f7fc f8f8 	bl	8000ec4 <HAL_GetTick>
 8004cd4:	4603      	mov	r3, r0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <fs_open+0x16>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <fs_open+0x1c>
    return ERR_ARG;
 8004cf2:	f06f 030f 	mvn.w	r3, #15
 8004cf6:	e028      	b.n	8004d4a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004cf8:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <fs_open+0x78>)
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e020      	b.n	8004d40 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f7fb fa9b 	bl	8000240 <strcmp>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d114      	bne.n	8004d3a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	7c1a      	ldrb	r2, [r3, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e007      	b.n	8004d4a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1db      	bne.n	8004cfe <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004d46:	f06f 0305 	mvn.w	r3, #5
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	080167f0 	.word	0x080167f0

08004d58 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	1ad3      	subs	r3, r2, r3
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004d92:	22ac      	movs	r2, #172	; 0xac
 8004d94:	2100      	movs	r1, #0
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f00d fbd6 	bl	8012548 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004daa:	20ac      	movs	r0, #172	; 0xac
 8004dac:	f001 f9a4 	bl	80060f8 <mem_malloc>
 8004db0:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <http_state_alloc+0x1a>
    http_state_init(ret);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ffe6 	bl	8004d8a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004dbe:	687b      	ldr	r3, [r7, #4]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff ffbb 	bl	8004d58 <fs_close>
    hs->handle = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f002 f939 	bl	800706c <pbuf_free>
    hs->req = NULL;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <http_state_free+0x1a>
    http_state_eof(hs);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffd6 	bl	8004dc8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 f805 	bl	8005e2c <mem_free>
  }
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <http_write+0x22>
 8004e40:	4b2c      	ldr	r3, [pc, #176]	; (8004ef4 <http_write+0xc8>)
 8004e42:	f240 2219 	movw	r2, #537	; 0x219
 8004e46:	492c      	ldr	r1, [pc, #176]	; (8004ef8 <http_write+0xcc>)
 8004e48:	482c      	ldr	r0, [pc, #176]	; (8004efc <http_write+0xd0>)
 8004e4a:	f00d fb85 	bl	8012558 <iprintf>
  len = *length;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004e54:	8afb      	ldrh	r3, [r7, #22]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <http_write+0x32>
    return ERR_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e045      	b.n	8004eea <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004e64:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004e66:	8aba      	ldrh	r2, [r7, #20]
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d201      	bcs.n	8004e72 <http_write+0x46>
    len = max_len;
 8004e6e:	8abb      	ldrh	r3, [r7, #20]
 8004e70:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004e7a:	8afa      	ldrh	r2, [r7, #22]
 8004e7c:	8abb      	ldrh	r3, [r7, #20]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d901      	bls.n	8004e86 <http_write+0x5a>
    len = max_len;
 8004e82:	8abb      	ldrh	r3, [r7, #20]
 8004e84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	8afa      	ldrh	r2, [r7, #22]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f006 fe73 	bl	800bb78 <tcp_write>
 8004e92:	4603      	mov	r3, r0
 8004e94:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004e96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d10f      	bne.n	8004ec0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d902      	bls.n	8004eba <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	82fb      	strh	r3, [r7, #22]
 8004eb8:	e002      	b.n	8004ec0 <http_write+0x94>
      } else {
        len /= 2;
 8004eba:	8afb      	ldrh	r3, [r7, #22]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004ec0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d102      	bne.n	8004ed0 <http_write+0xa4>
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d8da      	bhi.n	8004e86 <http_write+0x5a>

  if (err == ERR_OK) {
 8004ed0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8afa      	ldrh	r2, [r7, #22]
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004ee6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	080134b0 	.word	0x080134b0
 8004ef8:	080134e8 	.word	0x080134e8
 8004efc:	080134f8 	.word	0x080134f8

08004f00 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f003 fef5 	bl	8008d00 <tcp_arg>
  altcp_recv(pcb, NULL);
 8004f16:	2100      	movs	r1, #0
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f003 ff03 	bl	8008d24 <tcp_recv>
  altcp_err(pcb, NULL);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f003 ff43 	bl	8008dac <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004f26:	2200      	movs	r2, #0
 8004f28:	2100      	movs	r1, #0
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f003 ff78 	bl	8008e20 <tcp_poll>
  altcp_sent(pcb, NULL);
 8004f30:	2100      	movs	r1, #0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f003 ff18 	bl	8008d68 <tcp_sent>
  if (hs != NULL) {
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8004f3e:	68b8      	ldr	r0, [r7, #8]
 8004f40:	f7ff ff62 	bl	8004e08 <http_state_free>
  }

  if (abort_conn) {
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f002 fe1e 	bl	8007b8c <tcp_abort>
    return ERR_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e00f      	b.n	8004f74 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f002 fd2f 	bl	80079b8 <tcp_close>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004f66:	2204      	movs	r2, #4
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <http_close_or_abort_conn+0x7c>)
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f003 ff58 	bl	8008e20 <tcp_poll>
  }
  return err;
 8004f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	0800578f 	.word	0x0800578f

08004f80 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ffb6 	bl	8004f00 <http_close_or_abort_conn>
 8004f94:	4603      	mov	r3, r0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ffe8 	bl	8004f80 <http_close_conn>
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <extract_uri_parameters+0x18>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <extract_uri_parameters+0x1c>
    return (0);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e04e      	b.n	8005072 <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e042      	b.n	8005064 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	330a      	adds	r3, #10
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8004ff0:	2126      	movs	r1, #38	; 0x26
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f00d fafc 	bl	80125f0 <strchr>
 8004ff8:	6178      	str	r0, [r7, #20]
    if (pair) {
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <extract_uri_parameters+0x56>
      *pair = '\0';
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
      pair++;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	3301      	adds	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e00c      	b.n	8005028 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800500e:	2120      	movs	r1, #32
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f00d faed 	bl	80125f0 <strchr>
 8005016:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <extract_uri_parameters+0x6c>
        *pair = '\0';
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005028:	213d      	movs	r1, #61	; 0x3d
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f00d fae0 	bl	80125f0 <strchr>
 8005030:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <extract_uri_parameters+0x98>
      *equals = '\0';
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	331a      	adds	r3, #26
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	e006      	b.n	800505e <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	331a      	adds	r3, #26
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	2200      	movs	r2, #0
 800505c:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	dc02      	bgt.n	8005070 <extract_uri_parameters+0xb8>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1b6      	bne.n	8004fde <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005070:	693b      	ldr	r3, [r7, #16]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff84 	bl	8004f9e <http_eof>
    return 0;
 8005096:	2300      	movs	r3, #0
 8005098:	e016      	b.n	80050c8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fe64 	bl	8004d6c <fs_bytes_left>
 80050a4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dc05      	bgt.n	80050b8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ff75 	bl	8004f9e <http_eof>
    return 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e007      	b.n	80050c8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <http_check_eof+0x54>)
 80050ba:	f240 429d 	movw	r2, #1181	; 0x49d
 80050be:	4905      	ldr	r1, [pc, #20]	; (80050d4 <http_check_eof+0x58>)
 80050c0:	4805      	ldr	r0, [pc, #20]	; (80050d8 <http_check_eof+0x5c>)
 80050c2:	f00d fa49 	bl	8012558 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80050c6:	2301      	movs	r3, #1
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	080134b0 	.word	0x080134b0
 80050d4:	08013520 	.word	0x08013520
 80050d8:	080134f8 	.word	0x080134f8

080050dc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d803      	bhi.n	80050fe <http_send_data_nonssi+0x22>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	e001      	b.n	8005102 <http_send_data_nonssi+0x26>
 80050fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005102:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6999      	ldr	r1, [r3, #24]
 8005108:	f107 020c 	add.w	r2, r7, #12
 800510c:	2300      	movs	r3, #0
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fe8c 	bl	8004e2c <http_write>
 8005114:	4603      	mov	r3, r0
 8005116:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10d      	bne.n	800513c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	89ba      	ldrh	r2, [r7, #12]
 800512a:	441a      	add	r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	89ba      	ldrh	r2, [r7, #12]
 8005136:	1a9a      	subs	r2, r3, r2
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <http_send+0x18>
    return 0;
 800515a:	2300      	movs	r3, #0
 800515c:	e025      	b.n	80051aa <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d108      	bne.n	8005178 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ff87 	bl	800507c <http_check_eof>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <http_send+0x32>
      return 0;
 8005174:	2300      	movs	r3, #0
 8005176:	e018      	b.n	80051aa <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ffae 	bl	80050dc <http_send_data_nonssi>
 8005180:	4603      	mov	r3, r0
 8005182:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <http_send+0x62>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fdeb 	bl	8004d6c <fs_bytes_left>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc05      	bgt.n	80051a8 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fefd 	bl	8004f9e <http_eof>
    return 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <http_get_404_file+0x80>)
 80051c2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7ff fd85 	bl	8004cdc <fs_open>
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80051d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d024      	beq.n	8005228 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <http_get_404_file+0x84>)
 80051e2:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7ff fd75 	bl	8004cdc <fs_open>
 80051f2:	4603      	mov	r3, r0
 80051f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80051f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	4a0e      	ldr	r2, [pc, #56]	; (800523c <http_get_404_file+0x88>)
 8005202:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7ff fd65 	bl	8004cdc <fs_open>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
        return NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	08013558 	.word	0x08013558
 8005238:	08013564 	.word	0x08013564
 800523c:	08013570 	.word	0x08013570

08005240 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08e      	sub	sp, #56	; 0x38
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <http_parse_request+0x24>
 8005256:	4b65      	ldr	r3, [pc, #404]	; (80053ec <http_parse_request+0x1ac>)
 8005258:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800525c:	4964      	ldr	r1, [pc, #400]	; (80053f0 <http_parse_request+0x1b0>)
 800525e:	4865      	ldr	r0, [pc, #404]	; (80053f4 <http_parse_request+0x1b4>)
 8005260:	f00d f97a 	bl	8012558 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <http_parse_request+0x38>
 800526a:	4b60      	ldr	r3, [pc, #384]	; (80053ec <http_parse_request+0x1ac>)
 800526c:	f240 72af 	movw	r2, #1967	; 0x7af
 8005270:	4961      	ldr	r1, [pc, #388]	; (80053f8 <http_parse_request+0x1b8>)
 8005272:	4860      	ldr	r0, [pc, #384]	; (80053f4 <http_parse_request+0x1b4>)
 8005274:	f00d f970 	bl	8012558 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <http_parse_request+0x48>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005288:	f06f 0307 	mvn.w	r3, #7
 800528c:	e0aa      	b.n	80053e4 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	621a      	str	r2, [r3, #32]
 800529c:	e005      	b.n	80052aa <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 ffa3 	bl	80071f0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80052aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ac:	f001 ff7e 	bl	80071ac <pbuf_ref>

  if (hs->req->next != NULL) {
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	891b      	ldrh	r3, [r3, #8]
 80052c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bf28      	it	cs
 80052c8:	4613      	movcs	r3, r2
 80052ca:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6a18      	ldr	r0, [r3, #32]
 80052d0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80052d2:	2300      	movs	r3, #0
 80052d4:	4949      	ldr	r1, [pc, #292]	; (80053fc <http_parse_request+0x1bc>)
 80052d6:	f002 f8c3 	bl	8007460 <pbuf_copy_partial>
    data = httpd_req_buf;
 80052da:	4b48      	ldr	r3, [pc, #288]	; (80053fc <http_parse_request+0x1bc>)
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	e005      	b.n	80052ec <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	895b      	ldrh	r3, [r3, #10]
 80052ea:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80052ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d963      	bls.n	80053ba <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80052f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052f4:	461a      	mov	r2, r3
 80052f6:	4942      	ldr	r1, [pc, #264]	; (8005400 <http_parse_request+0x1c0>)
 80052f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052fa:	f000 fc0d 	bl	8005b18 <lwip_strnstr>
 80052fe:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d059      	beq.n	80053ba <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800530a:	2204      	movs	r2, #4
 800530c:	493d      	ldr	r1, [pc, #244]	; (8005404 <http_parse_request+0x1c4>)
 800530e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005310:	f00d f97b 	bl	801260a <strncmp>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d117      	bne.n	800534a <http_parse_request+0x10a>
        sp1 = data + 3;
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	3303      	adds	r3, #3
 800531e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	461a      	mov	r2, r3
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	8b7a      	ldrh	r2, [r7, #26]
 8005338:	4933      	ldr	r1, [pc, #204]	; (8005408 <http_parse_request+0x1c8>)
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fbec 	bl	8005b18 <lwip_strnstr>
 8005340:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d111      	bne.n	800536c <http_parse_request+0x12c>
 8005348:	e006      	b.n	8005358 <http_parse_request+0x118>
        data[4] = 0;
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	3304      	adds	r3, #4
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005352:	f06f 030f 	mvn.w	r3, #15
 8005356:	e045      	b.n	80053e4 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	8b7a      	ldrh	r2, [r7, #26]
 800535e:	4928      	ldr	r1, [pc, #160]	; (8005400 <http_parse_request+0x1c0>)
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fbd9 	bl	8005b18 <lwip_strnstr>
 8005366:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005368:	2301      	movs	r3, #1
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	3201      	adds	r2, #1
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01e      	beq.n	80053ba <http_parse_request+0x17a>
 800537c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	429a      	cmp	r2, r3
 8005382:	d91a      	bls.n	80053ba <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005384:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005386:	461a      	mov	r2, r3
 8005388:	4920      	ldr	r1, [pc, #128]	; (800540c <http_parse_request+0x1cc>)
 800538a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800538c:	f000 fbc4 	bl	8005b18 <lwip_strnstr>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d011      	beq.n	80053ba <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80053a2:	8b3b      	ldrh	r3, [r7, #24]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80053ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ae:	6979      	ldr	r1, [r7, #20]
 80053b0:	68b8      	ldr	r0, [r7, #8]
 80053b2:	f000 f82d 	bl	8005410 <http_find_file>
 80053b6:	4603      	mov	r3, r0
 80053b8:	e014      	b.n	80053e4 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 fedc 	bl	800717c <pbuf_clen>
 80053c4:	4603      	mov	r3, r0
 80053c6:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	891b      	ldrh	r3, [r3, #8]
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d2:	d205      	bcs.n	80053e0 <http_parse_request+0x1a0>
 80053d4:	8a7b      	ldrh	r3, [r7, #18]
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d802      	bhi.n	80053e0 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80053da:	f06f 0304 	mvn.w	r3, #4
 80053de:	e001      	b.n	80053e4 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80053e0:	f06f 030f 	mvn.w	r3, #15
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3738      	adds	r7, #56	; 0x38
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	080134b0 	.word	0x080134b0
 80053f0:	0801357c 	.word	0x0801357c
 80053f4:	080134f8 	.word	0x080134f8
 80053f8:	08013588 	.word	0x08013588
 80053fc:	2000009c 	.word	0x2000009c
 8005400:	08013594 	.word	0x08013594
 8005404:	08013598 	.word	0x08013598
 8005408:	080135a0 	.word	0x080135a0
 800540c:	080135a4 	.word	0x080135a4

08005410 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b093      	sub	sp, #76	; 0x4c
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005420:	2300      	movs	r3, #0
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fa ff11 	bl	8000254 <strlen>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d06b      	beq.n	8005512 <http_find_file+0x102>
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	3b01      	subs	r3, #1
 8005440:	4413      	add	r3, r2
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b2f      	cmp	r3, #47	; 0x2f
 8005446:	d164      	bne.n	8005512 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005448:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800544a:	4a72      	ldr	r2, [pc, #456]	; (8005614 <http_find_file+0x204>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d102      	bne.n	8005456 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	2b01      	cmp	r3, #1
 8005454:	d15d      	bne.n	8005512 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	3b01      	subs	r3, #1
 800545a:	2b3f      	cmp	r3, #63	; 0x3f
 800545c:	bf28      	it	cs
 800545e:	233f      	movcs	r3, #63	; 0x3f
 8005460:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6a3a      	ldr	r2, [r7, #32]
 800546c:	4619      	mov	r1, r3
 800546e:	4869      	ldr	r0, [pc, #420]	; (8005614 <http_find_file+0x204>)
 8005470:	f00d f85f 	bl	8012532 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005474:	4a67      	ldr	r2, [pc, #412]	; (8005614 <http_find_file+0x204>)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	4413      	add	r3, r2
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005482:	e043      	b.n	800550c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d028      	beq.n	80054dc <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005490:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01e      	beq.n	80054d6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8005498:	4a5f      	ldr	r2, [pc, #380]	; (8005618 <http_find_file+0x208>)
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fa fed7 	bl	8000254 <strlen>
 80054a6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bf28      	it	cs
 80054b0:	4613      	movcs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	4a57      	ldr	r2, [pc, #348]	; (8005614 <http_find_file+0x204>)
 80054b8:	1898      	adds	r0, r3, r2
 80054ba:	4a57      	ldr	r2, [pc, #348]	; (8005618 <http_find_file+0x208>)
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4619      	mov	r1, r3
 80054c6:	f00d f834 	bl	8012532 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80054ca:	6a3a      	ldr	r2, [r7, #32]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	4a50      	ldr	r2, [pc, #320]	; (8005614 <http_find_file+0x204>)
 80054d2:	2100      	movs	r1, #0
 80054d4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80054d6:	4b4f      	ldr	r3, [pc, #316]	; (8005614 <http_find_file+0x204>)
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054da:	e004      	b.n	80054e6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80054dc:	4a4e      	ldr	r2, [pc, #312]	; (8005618 <http_find_file+0x208>)
 80054de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fbf6 	bl	8004cdc <fs_open>
 80054f0:	4603      	mov	r3, r0
 80054f2:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80054f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <http_find_file+0xf6>
        uri = file_name;
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8005504:	e005      	b.n	8005512 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	3301      	adds	r3, #1
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	2b04      	cmp	r3, #4
 8005510:	d9b8      	bls.n	8005484 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d161      	bne.n	80055dc <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	213f      	movs	r1, #63	; 0x3f
 800551c:	4618      	mov	r0, r3
 800551e:	f00d f867 	bl	80125f0 <strchr>
 8005522:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
      params++;
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	3301      	adds	r3, #1
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <http_find_file+0x20c>)
 8005538:	f04f 32ff 	mov.w	r2, #4294967295
 800553c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800553e:	4b38      	ldr	r3, [pc, #224]	; (8005620 <http_find_file+0x210>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d034      	beq.n	80055b0 <http_find_file+0x1a0>
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <http_find_file+0x214>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d030      	beq.n	80055b0 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800554e:	2300      	movs	r3, #0
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
 8005552:	e028      	b.n	80055a6 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8005554:	68b8      	ldr	r0, [r7, #8]
 8005556:	4b33      	ldr	r3, [pc, #204]	; (8005624 <http_find_file+0x214>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	f7fa fe6c 	bl	8000240 <strcmp>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800556e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fd21 	bl	8004fb8 <extract_uri_parameters>
 8005576:	4602      	mov	r2, r0
 8005578:	4b28      	ldr	r3, [pc, #160]	; (800561c <http_find_file+0x20c>)
 800557a:	601a      	str	r2, [r3, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800557c:	4b29      	ldr	r3, [pc, #164]	; (8005624 <http_find_file+0x214>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	685c      	ldr	r4, [r3, #4]
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <http_find_file+0x20c>)
 800558a:	6819      	ldr	r1, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8005596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005598:	47a0      	blx	r4
 800559a:	4603      	mov	r3, r0
 800559c:	60bb      	str	r3, [r7, #8]
          break;
 800559e:	e007      	b.n	80055b0 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	3301      	adds	r3, #1
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
 80055a6:	4b1e      	ldr	r3, [pc, #120]	; (8005620 <http_find_file+0x210>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	429a      	cmp	r2, r3
 80055ae:	dbd1      	blt.n	8005554 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fb90 	bl	8004cdc <fs_open>
 80055bc:	4603      	mov	r3, r0
 80055be:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 80055c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <http_find_file+0x1be>
      file = &hs->file_handle;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80055cc:	e006      	b.n	80055dc <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fded 	bl	80051b4 <http_get_404_file>
 80055da:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff fde3 	bl	80051b4 <http_get_404_file>
 80055ee:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f810 	bl	8005628 <http_init_file>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3744      	adds	r7, #68	; 0x44
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}
 8005612:	bf00      	nop
 8005614:	2000049c 	.word	0x2000049c
 8005618:	08016804 	.word	0x08016804
 800561c:	200004e4 	.word	0x200004e4
 8005620:	200004e0 	.word	0x200004e0
 8005624:	200004dc 	.word	0x200004dc

08005628 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05d      	beq.n	80056f8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <http_init_file+0x2a>
 8005644:	4b35      	ldr	r3, [pc, #212]	; (800571c <http_init_file+0xf4>)
 8005646:	f640 120b 	movw	r2, #2315	; 0x90b
 800564a:	4935      	ldr	r1, [pc, #212]	; (8005720 <http_init_file+0xf8>)
 800564c:	4835      	ldr	r0, [pc, #212]	; (8005724 <http_init_file+0xfc>)
 800564e:	f00c ff83 	bl	8012558 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da06      	bge.n	8005676 <http_init_file+0x4e>
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <http_init_file+0xf4>)
 800566a:	f640 1234 	movw	r2, #2356	; 0x934
 800566e:	492e      	ldr	r1, [pc, #184]	; (8005728 <http_init_file+0x100>)
 8005670:	482c      	ldr	r0, [pc, #176]	; (8005724 <http_init_file+0xfc>)
 8005672:	f00c ff71 	bl	8012558 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	7c1b      	ldrb	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <http_init_file+0x7c>
 8005696:	4b21      	ldr	r3, [pc, #132]	; (800571c <http_init_file+0xf4>)
 8005698:	f640 1244 	movw	r2, #2372	; 0x944
 800569c:	4923      	ldr	r1, [pc, #140]	; (800572c <http_init_file+0x104>)
 800569e:	4821      	ldr	r0, [pc, #132]	; (8005724 <http_init_file+0xfc>)
 80056a0:	f00c ff5a 	bl	8012558 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d033      	beq.n	8005712 <http_init_file+0xea>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	7c1b      	ldrb	r3, [r3, #16]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d02c      	beq.n	8005712 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6998      	ldr	r0, [r3, #24]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	461a      	mov	r2, r3
 80056c2:	491b      	ldr	r1, [pc, #108]	; (8005730 <http_init_file+0x108>)
 80056c4:	f000 fa28 	bl	8005b18 <lwip_strnstr>
 80056c8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	3304      	adds	r3, #4
 80056d4:	461a      	mov	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24
 80056f6:	e00c      	b.n	8005712 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	080134b0 	.word	0x080134b0
 8005720:	080135ac 	.word	0x080135ac
 8005724:	080134f8 	.word	0x080134f8
 8005728:	080135c0 	.word	0x080135c0
 800572c:	080135e0 	.word	0x080135e0
 8005730:	080135a4 	.word	0x080135a4

08005734 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <http_err+0x1c>
    http_state_free(hs);
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f7ff fb5c 	bl	8004e08 <http_state_free>
  }
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <http_sent+0x1c>
    return ERR_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e008      	b.n	8005786 <http_sent+0x2e>
  }

  hs->retries = 0;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800577c:	6979      	ldr	r1, [r7, #20]
 800577e:	68b8      	ldr	r0, [r7, #8]
 8005780:	f7ff fce1 	bl	8005146 <http_send>

  return ERR_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80057a2:	2100      	movs	r1, #0
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f7ff fbeb 	bl	8004f80 <http_close_conn>
 80057aa:	4603      	mov	r3, r0
 80057ac:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e021      	b.n	80057f6 <http_poll+0x68>
  } else {
    hs->retries++;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b8:	3301      	adds	r3, #1
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d105      	bne.n	80057d8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f7ff fbd6 	bl	8004f80 <http_close_conn>
      return ERR_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e00e      	b.n	80057f6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80057e0:	68f9      	ldr	r1, [r7, #12]
 80057e2:	6838      	ldr	r0, [r7, #0]
 80057e4:	f7ff fcaf 	bl	8005146 <http_send>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80057ee:	6838      	ldr	r0, [r7, #0]
 80057f0:	f006 ffae 	bl	800c750 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <http_recv+0x26>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <http_recv+0x26>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d111      	bne.n	800584a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	891b      	ldrh	r3, [r3, #8]
 8005830:	4619      	mov	r1, r3
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f002 fb84 	bl	8007f40 <tcp_recved>
      pbuf_free(p);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 fc17 	bl	800706c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800583e:	6979      	ldr	r1, [r7, #20]
 8005840:	68b8      	ldr	r0, [r7, #8]
 8005842:	f7ff fb9d 	bl	8004f80 <http_close_conn>
    return ERR_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e055      	b.n	80058f6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	891b      	ldrh	r3, [r3, #8]
 800584e:	4619      	mov	r1, r3
 8005850:	68b8      	ldr	r0, [r7, #8]
 8005852:	f002 fb75 	bl	8007f40 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d147      	bne.n	80058ee <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	6979      	ldr	r1, [r7, #20]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fcec 	bl	8005240 <http_parse_request>
 8005868:	4603      	mov	r3, r0
 800586a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800586c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d015      	beq.n	80058a0 <http_recv+0xa0>
 8005874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005878:	f113 0f05 	cmn.w	r3, #5
 800587c:	d010      	beq.n	80058a0 <http_recv+0xa0>
 800587e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005882:	f113 0f10 	cmn.w	r3, #16
 8005886:	d00b      	beq.n	80058a0 <http_recv+0xa0>
 8005888:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800588c:	f113 0f08 	cmn.w	r3, #8
 8005890:	d006      	beq.n	80058a0 <http_recv+0xa0>
 8005892:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <http_recv+0x100>)
 8005894:	f640 2205 	movw	r2, #2565	; 0xa05
 8005898:	491a      	ldr	r1, [pc, #104]	; (8005904 <http_recv+0x104>)
 800589a:	481b      	ldr	r0, [pc, #108]	; (8005908 <http_recv+0x108>)
 800589c:	f00c fe5c 	bl	8012558 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80058a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058a4:	f113 0f05 	cmn.w	r3, #5
 80058a8:	d00b      	beq.n	80058c2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <http_recv+0xc2>
          pbuf_free(hs->req);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fbd8 	bl	800706c <pbuf_free>
          hs->req = NULL;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fbd2 	bl	800706c <pbuf_free>
      if (parsed == ERR_OK) {
 80058c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80058d0:	6979      	ldr	r1, [r7, #20]
 80058d2:	68b8      	ldr	r0, [r7, #8]
 80058d4:	f7ff fc37 	bl	8005146 <http_send>
 80058d8:	e00c      	b.n	80058f4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80058da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058de:	f113 0f10 	cmn.w	r3, #16
 80058e2:	d107      	bne.n	80058f4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80058e4:	6979      	ldr	r1, [r7, #20]
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f7ff fb4a 	bl	8004f80 <http_close_conn>
 80058ec:	e002      	b.n	80058f4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fbbc 	bl	800706c <pbuf_free>
    }
  }
  return ERR_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	080134b0 	.word	0x080134b0
 8005904:	0801360c 	.word	0x0801360c
 8005908:	080134f8 	.word	0x080134f8

0800590c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800591a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <http_accept+0x1c>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <http_accept+0x22>
    return ERR_VAL;
 8005928:	f06f 0305 	mvn.w	r3, #5
 800592c:	e025      	b.n	800597a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800592e:	2101      	movs	r1, #1
 8005930:	68b8      	ldr	r0, [r7, #8]
 8005932:	f002 ffe5 	bl	8008900 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005936:	f7ff fa35 	bl	8004da4 <http_state_alloc>
 800593a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	e018      	b.n	800597a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800594e:	6979      	ldr	r1, [r7, #20]
 8005950:	68b8      	ldr	r0, [r7, #8]
 8005952:	f003 f9d5 	bl	8008d00 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005956:	490b      	ldr	r1, [pc, #44]	; (8005984 <http_accept+0x78>)
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f003 f9e3 	bl	8008d24 <tcp_recv>
  altcp_err(pcb, http_err);
 800595e:	490a      	ldr	r1, [pc, #40]	; (8005988 <http_accept+0x7c>)
 8005960:	68b8      	ldr	r0, [r7, #8]
 8005962:	f003 fa23 	bl	8008dac <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005966:	2204      	movs	r2, #4
 8005968:	4908      	ldr	r1, [pc, #32]	; (800598c <http_accept+0x80>)
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f003 fa58 	bl	8008e20 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005970:	4907      	ldr	r1, [pc, #28]	; (8005990 <http_accept+0x84>)
 8005972:	68b8      	ldr	r0, [r7, #8]
 8005974:	f003 f9f8 	bl	8008d68 <tcp_sent>

  return ERR_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08005801 	.word	0x08005801
 8005988:	08005735 	.word	0x08005735
 800598c:	0800578f 	.word	0x0800578f
 8005990:	08005759 	.word	0x08005759

08005994 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d029      	beq.n	80059fa <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80059a6:	2101      	movs	r1, #1
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 ffa9 	bl	8008900 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	461a      	mov	r2, r3
 80059b2:	4914      	ldr	r1, [pc, #80]	; (8005a04 <httpd_init_pcb+0x70>)
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f002 f8f5 	bl	8007ba4 <tcp_bind>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <httpd_init_pcb+0x40>
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <httpd_init_pcb+0x74>)
 80059c8:	f640 2257 	movw	r2, #2647	; 0xa57
 80059cc:	490f      	ldr	r1, [pc, #60]	; (8005a0c <httpd_init_pcb+0x78>)
 80059ce:	4810      	ldr	r0, [pc, #64]	; (8005a10 <httpd_init_pcb+0x7c>)
 80059d0:	f00c fdc2 	bl	8012558 <iprintf>
    pcb = altcp_listen(pcb);
 80059d4:	21ff      	movs	r1, #255	; 0xff
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f002 f99c 	bl	8007d14 <tcp_listen_with_backlog>
 80059dc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <httpd_init_pcb+0x5e>
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <httpd_init_pcb+0x74>)
 80059e6:	f640 2259 	movw	r2, #2649	; 0xa59
 80059ea:	490a      	ldr	r1, [pc, #40]	; (8005a14 <httpd_init_pcb+0x80>)
 80059ec:	4808      	ldr	r0, [pc, #32]	; (8005a10 <httpd_init_pcb+0x7c>)
 80059ee:	f00c fdb3 	bl	8012558 <iprintf>
    altcp_accept(pcb, http_accept);
 80059f2:	4909      	ldr	r1, [pc, #36]	; (8005a18 <httpd_init_pcb+0x84>)
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f003 f9fb 	bl	8008df0 <tcp_accept>
  }
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	0801690c 	.word	0x0801690c
 8005a08:	080134b0 	.word	0x080134b0
 8005a0c:	08013638 	.word	0x08013638
 8005a10:	080134f8 	.word	0x080134f8
 8005a14:	08013654 	.word	0x08013654
 8005a18:	0800590d 	.word	0x0800590d

08005a1c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005a22:	202e      	movs	r0, #46	; 0x2e
 8005a24:	f003 f95e 	bl	8008ce4 <tcp_new_ip_type>
 8005a28:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <httpd_init+0x22>
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <httpd_init+0x34>)
 8005a32:	f640 2272 	movw	r2, #2674	; 0xa72
 8005a36:	4907      	ldr	r1, [pc, #28]	; (8005a54 <httpd_init+0x38>)
 8005a38:	4807      	ldr	r0, [pc, #28]	; (8005a58 <httpd_init+0x3c>)
 8005a3a:	f00c fd8d 	bl	8012558 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8005a3e:	2150      	movs	r1, #80	; 0x50
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff ffa7 	bl	8005994 <httpd_init_pcb>
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	080134b0 	.word	0x080134b0
 8005a54:	08013674 	.word	0x08013674
 8005a58:	080134f8 	.word	0x080134f8

08005a5c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <http_set_cgi_handlers+0x1e>
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <http_set_cgi_handlers+0x48>)
 8005a6e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8005a72:	490d      	ldr	r1, [pc, #52]	; (8005aa8 <http_set_cgi_handlers+0x4c>)
 8005a74:	480d      	ldr	r0, [pc, #52]	; (8005aac <http_set_cgi_handlers+0x50>)
 8005a76:	f00c fd6f 	bl	8012558 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dc06      	bgt.n	8005a8e <http_set_cgi_handlers+0x32>
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <http_set_cgi_handlers+0x48>)
 8005a82:	f640 22b3 	movw	r2, #2739	; 0xab3
 8005a86:	490a      	ldr	r1, [pc, #40]	; (8005ab0 <http_set_cgi_handlers+0x54>)
 8005a88:	4808      	ldr	r0, [pc, #32]	; (8005aac <http_set_cgi_handlers+0x50>)
 8005a8a:	f00c fd65 	bl	8012558 <iprintf>

  httpd_cgis = cgis;
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <http_set_cgi_handlers+0x58>)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <http_set_cgi_handlers+0x5c>)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6013      	str	r3, [r2, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	080134b0 	.word	0x080134b0
 8005aa8:	08013690 	.word	0x08013690
 8005aac:	080134f8 	.word	0x080134f8
 8005ab0:	080136a0 	.word	0x080136a0
 8005ab4:	200004dc 	.word	0x200004dc
 8005ab8:	200004e0 	.word	0x200004e0

08005abc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	b21a      	sxth	r2, r3
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	b21b      	sxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b21b      	sxth	r3, r3
 8005ad8:	b29b      	uxth	r3, r3
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	061a      	lsls	r2, r3, #24
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0e1b      	lsrs	r3, r3, #24
 8005b0a:	4313      	orrs	r3, r2
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005b24:	68b8      	ldr	r0, [r7, #8]
 8005b26:	f7fa fb95 	bl	8000254 <strlen>
 8005b2a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	e022      	b.n	8005b7c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e012      	b.n	8005b62 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d109      	bne.n	8005b5c <lwip_strnstr+0x44>
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	6978      	ldr	r0, [r7, #20]
 8005b4e:	f00c fd5c 	bl	801260a <strncmp>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	e00f      	b.n	8005b7c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <lwip_strnstr+0x62>
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	441a      	add	r2, r3
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	440b      	add	r3, r1
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d9e0      	bls.n	8005b3c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b8e:	f000 f8d5 	bl	8005d3c <mem_init>
  memp_init();
 8005b92:	f000 fbdb 	bl	800634c <memp_init>
  pbuf_init();
  netif_init();
 8005b96:	f000 fc93 	bl	80064c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005b9a:	f007 fea9 	bl	800d8f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005b9e:	f001 fd03 	bl	80075a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005ba2:	f007 fe1d 	bl	800d7e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <ptr_to_mem+0x20>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	4413      	add	r3, r2
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	200004e8 	.word	0x200004e8

08005bd4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a05      	ldr	r2, [pc, #20]	; (8005bf4 <mem_to_ptr+0x20>)
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	b29b      	uxth	r3, r3
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	200004e8 	.word	0x200004e8

08005bf8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005c00:	4b45      	ldr	r3, [pc, #276]	; (8005d18 <plug_holes+0x120>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d206      	bcs.n	8005c18 <plug_holes+0x20>
 8005c0a:	4b44      	ldr	r3, [pc, #272]	; (8005d1c <plug_holes+0x124>)
 8005c0c:	f240 12df 	movw	r2, #479	; 0x1df
 8005c10:	4943      	ldr	r1, [pc, #268]	; (8005d20 <plug_holes+0x128>)
 8005c12:	4844      	ldr	r0, [pc, #272]	; (8005d24 <plug_holes+0x12c>)
 8005c14:	f00c fca0 	bl	8012558 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005c18:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <plug_holes+0x130>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d306      	bcc.n	8005c30 <plug_holes+0x38>
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <plug_holes+0x124>)
 8005c24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005c28:	4940      	ldr	r1, [pc, #256]	; (8005d2c <plug_holes+0x134>)
 8005c2a:	483e      	ldr	r0, [pc, #248]	; (8005d24 <plug_holes+0x12c>)
 8005c2c:	f00c fc94 	bl	8012558 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	791b      	ldrb	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <plug_holes+0x4e>
 8005c38:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <plug_holes+0x124>)
 8005c3a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005c3e:	493c      	ldr	r1, [pc, #240]	; (8005d30 <plug_holes+0x138>)
 8005c40:	4838      	ldr	r0, [pc, #224]	; (8005d24 <plug_holes+0x12c>)
 8005c42:	f00c fc89 	bl	8012558 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c4e:	d906      	bls.n	8005c5e <plug_holes+0x66>
 8005c50:	4b32      	ldr	r3, [pc, #200]	; (8005d1c <plug_holes+0x124>)
 8005c52:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005c56:	4937      	ldr	r1, [pc, #220]	; (8005d34 <plug_holes+0x13c>)
 8005c58:	4832      	ldr	r0, [pc, #200]	; (8005d24 <plug_holes+0x12c>)
 8005c5a:	f00c fc7d 	bl	8012558 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff ffa4 	bl	8005bb0 <ptr_to_mem>
 8005c68:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d024      	beq.n	8005cbc <plug_holes+0xc4>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	791b      	ldrb	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d120      	bne.n	8005cbc <plug_holes+0xc4>
 8005c7a:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <plug_holes+0x130>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d01b      	beq.n	8005cbc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005c84:	4b2c      	ldr	r3, [pc, #176]	; (8005d38 <plug_holes+0x140>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d102      	bne.n	8005c94 <plug_holes+0x9c>
      lfree = mem;
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	; (8005d38 <plug_holes+0x140>)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ca4:	d00a      	beq.n	8005cbc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff ff80 	bl	8005bb0 <ptr_to_mem>
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ff8e 	bl	8005bd4 <mem_to_ptr>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff ff75 	bl	8005bb0 <ptr_to_mem>
 8005cc6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d01f      	beq.n	8005d10 <plug_holes+0x118>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	791b      	ldrb	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11b      	bne.n	8005d10 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005cd8:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <plug_holes+0x140>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d102      	bne.n	8005ce8 <plug_holes+0xf0>
      lfree = pmem;
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <plug_holes+0x140>)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	881a      	ldrh	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cf8:	d00a      	beq.n	8005d10 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff ff56 	bl	8005bb0 <ptr_to_mem>
 8005d04:	4604      	mov	r4, r0
 8005d06:	68b8      	ldr	r0, [r7, #8]
 8005d08:	f7ff ff64 	bl	8005bd4 <mem_to_ptr>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}
 8005d18:	200004e8 	.word	0x200004e8
 8005d1c:	080136bc 	.word	0x080136bc
 8005d20:	080136ec 	.word	0x080136ec
 8005d24:	08013704 	.word	0x08013704
 8005d28:	200004ec 	.word	0x200004ec
 8005d2c:	0801372c 	.word	0x0801372c
 8005d30:	08013748 	.word	0x08013748
 8005d34:	08013764 	.word	0x08013764
 8005d38:	200004f0 	.word	0x200004f0

08005d3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005d42:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <mem_init+0x68>)
 8005d44:	3303      	adds	r3, #3
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <mem_init+0x6c>)
 8005d4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005d50:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <mem_init+0x6c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005d6a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005d6e:	f7ff ff1f 	bl	8005bb0 <ptr_to_mem>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <mem_init+0x70>)
 8005d76:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <mem_init+0x70>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <mem_init+0x70>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d88:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <mem_init+0x70>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d92:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <mem_init+0x6c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <mem_init+0x74>)
 8005d9a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20003c3c 	.word	0x20003c3c
 8005da8:	200004e8 	.word	0x200004e8
 8005dac:	200004ec 	.word	0x200004ec
 8005db0:	200004f0 	.word	0x200004f0

08005db4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff09 	bl	8005bd4 <mem_to_ptr>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fef0 	bl	8005bb0 <ptr_to_mem>
 8005dd0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	885b      	ldrh	r3, [r3, #2]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff feea 	bl	8005bb0 <ptr_to_mem>
 8005ddc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005de6:	d818      	bhi.n	8005e1a <mem_link_valid+0x66>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	885b      	ldrh	r3, [r3, #2]
 8005dec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005df0:	d813      	bhi.n	8005e1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005df6:	8afa      	ldrh	r2, [r7, #22]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d004      	beq.n	8005e06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	8afa      	ldrh	r2, [r7, #22]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d109      	bne.n	8005e1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <mem_link_valid+0x74>)
 8005e08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d006      	beq.n	8005e1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	885b      	ldrh	r3, [r3, #2]
 8005e14:	8afa      	ldrh	r2, [r7, #22]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d001      	beq.n	8005e1e <mem_link_valid+0x6a>
    return 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <mem_link_valid+0x6c>
  }
  return 1;
 8005e1e:	2301      	movs	r3, #1
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	200004ec 	.word	0x200004ec

08005e2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04c      	beq.n	8005ed4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <mem_free+0xb0>)
 8005e46:	f240 2273 	movw	r2, #627	; 0x273
 8005e4a:	4925      	ldr	r1, [pc, #148]	; (8005ee0 <mem_free+0xb4>)
 8005e4c:	4825      	ldr	r0, [pc, #148]	; (8005ee4 <mem_free+0xb8>)
 8005e4e:	f00c fb83 	bl	8012558 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e52:	e040      	b.n	8005ed6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3b08      	subs	r3, #8
 8005e58:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <mem_free+0xbc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d306      	bcc.n	8005e72 <mem_free+0x46>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f103 020c 	add.w	r2, r3, #12
 8005e6a:	4b20      	ldr	r3, [pc, #128]	; (8005eec <mem_free+0xc0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d907      	bls.n	8005e82 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <mem_free+0xb0>)
 8005e74:	f240 227f 	movw	r2, #639	; 0x27f
 8005e78:	491d      	ldr	r1, [pc, #116]	; (8005ef0 <mem_free+0xc4>)
 8005e7a:	481a      	ldr	r0, [pc, #104]	; (8005ee4 <mem_free+0xb8>)
 8005e7c:	f00c fb6c 	bl	8012558 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e80:	e029      	b.n	8005ed6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	791b      	ldrb	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d107      	bne.n	8005e9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <mem_free+0xb0>)
 8005e8c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005e90:	4918      	ldr	r1, [pc, #96]	; (8005ef4 <mem_free+0xc8>)
 8005e92:	4814      	ldr	r0, [pc, #80]	; (8005ee4 <mem_free+0xb8>)
 8005e94:	f00c fb60 	bl	8012558 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e98:	e01d      	b.n	8005ed6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff8a 	bl	8005db4 <mem_link_valid>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <mem_free+0xb0>)
 8005ea8:	f240 2295 	movw	r2, #661	; 0x295
 8005eac:	4912      	ldr	r1, [pc, #72]	; (8005ef8 <mem_free+0xcc>)
 8005eae:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <mem_free+0xb8>)
 8005eb0:	f00c fb52 	bl	8012558 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005eb4:	e00f      	b.n	8005ed6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <mem_free+0xd0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d202      	bcs.n	8005ecc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005ec6:	4a0d      	ldr	r2, [pc, #52]	; (8005efc <mem_free+0xd0>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fe93 	bl	8005bf8 <plug_holes>
 8005ed2:	e000      	b.n	8005ed6 <mem_free+0xaa>
    return;
 8005ed4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	080136bc 	.word	0x080136bc
 8005ee0:	08013790 	.word	0x08013790
 8005ee4:	08013704 	.word	0x08013704
 8005ee8:	200004e8 	.word	0x200004e8
 8005eec:	200004ec 	.word	0x200004ec
 8005ef0:	080137b4 	.word	0x080137b4
 8005ef4:	080137d0 	.word	0x080137d0
 8005ef8:	080137f8 	.word	0x080137f8
 8005efc:	200004f0 	.word	0x200004f0

08005f00 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005f0c:	887b      	ldrh	r3, [r7, #2]
 8005f0e:	3303      	adds	r3, #3
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f023 0303 	bic.w	r3, r3, #3
 8005f16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005f18:	8bfb      	ldrh	r3, [r7, #30]
 8005f1a:	2b0b      	cmp	r3, #11
 8005f1c:	d801      	bhi.n	8005f22 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005f1e:	230c      	movs	r3, #12
 8005f20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005f22:	8bfb      	ldrh	r3, [r7, #30]
 8005f24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f28:	d803      	bhi.n	8005f32 <mem_trim+0x32>
 8005f2a:	8bfa      	ldrh	r2, [r7, #30]
 8005f2c:	887b      	ldrh	r3, [r7, #2]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d201      	bcs.n	8005f36 <mem_trim+0x36>
    return NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e0cc      	b.n	80060d0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005f36:	4b68      	ldr	r3, [pc, #416]	; (80060d8 <mem_trim+0x1d8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d304      	bcc.n	8005f4a <mem_trim+0x4a>
 8005f40:	4b66      	ldr	r3, [pc, #408]	; (80060dc <mem_trim+0x1dc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d306      	bcc.n	8005f58 <mem_trim+0x58>
 8005f4a:	4b65      	ldr	r3, [pc, #404]	; (80060e0 <mem_trim+0x1e0>)
 8005f4c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005f50:	4964      	ldr	r1, [pc, #400]	; (80060e4 <mem_trim+0x1e4>)
 8005f52:	4865      	ldr	r0, [pc, #404]	; (80060e8 <mem_trim+0x1e8>)
 8005f54:	f00c fb00 	bl	8012558 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005f58:	4b5f      	ldr	r3, [pc, #380]	; (80060d8 <mem_trim+0x1d8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d304      	bcc.n	8005f6c <mem_trim+0x6c>
 8005f62:	4b5e      	ldr	r3, [pc, #376]	; (80060dc <mem_trim+0x1dc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d301      	bcc.n	8005f70 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	e0af      	b.n	80060d0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3b08      	subs	r3, #8
 8005f74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005f76:	69b8      	ldr	r0, [r7, #24]
 8005f78:	f7ff fe2c 	bl	8005bd4 <mem_to_ptr>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	881a      	ldrh	r2, [r3, #0]
 8005f84:	8afb      	ldrh	r3, [r7, #22]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b08      	subs	r3, #8
 8005f8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f8e:	8bfa      	ldrh	r2, [r7, #30]
 8005f90:	8abb      	ldrh	r3, [r7, #20]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d906      	bls.n	8005fa4 <mem_trim+0xa4>
 8005f96:	4b52      	ldr	r3, [pc, #328]	; (80060e0 <mem_trim+0x1e0>)
 8005f98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005f9c:	4953      	ldr	r1, [pc, #332]	; (80060ec <mem_trim+0x1ec>)
 8005f9e:	4852      	ldr	r0, [pc, #328]	; (80060e8 <mem_trim+0x1e8>)
 8005fa0:	f00c fada 	bl	8012558 <iprintf>
  if (newsize > size) {
 8005fa4:	8bfa      	ldrh	r2, [r7, #30]
 8005fa6:	8abb      	ldrh	r3, [r7, #20]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d901      	bls.n	8005fb0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e08f      	b.n	80060d0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005fb0:	8bfa      	ldrh	r2, [r7, #30]
 8005fb2:	8abb      	ldrh	r3, [r7, #20]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d101      	bne.n	8005fbc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	e089      	b.n	80060d0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fdf5 	bl	8005bb0 <ptr_to_mem>
 8005fc6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d13f      	bne.n	8006050 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fd8:	d106      	bne.n	8005fe8 <mem_trim+0xe8>
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <mem_trim+0x1e0>)
 8005fdc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005fe0:	4943      	ldr	r1, [pc, #268]	; (80060f0 <mem_trim+0x1f0>)
 8005fe2:	4841      	ldr	r0, [pc, #260]	; (80060e8 <mem_trim+0x1e8>)
 8005fe4:	f00c fab8 	bl	8012558 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005fee:	8afa      	ldrh	r2, [r7, #22]
 8005ff0:	8bfb      	ldrh	r3, [r7, #30]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005ffa:	4b3e      	ldr	r3, [pc, #248]	; (80060f4 <mem_trim+0x1f4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d106      	bne.n	8006012 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006004:	89fb      	ldrh	r3, [r7, #14]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fdd2 	bl	8005bb0 <ptr_to_mem>
 800600c:	4602      	mov	r2, r0
 800600e:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <mem_trim+0x1f4>)
 8006010:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fdcb 	bl	8005bb0 <ptr_to_mem>
 800601a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2200      	movs	r2, #0
 8006020:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	89ba      	ldrh	r2, [r7, #12]
 8006026:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	8afa      	ldrh	r2, [r7, #22]
 800602c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	89fa      	ldrh	r2, [r7, #14]
 8006032:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800603c:	d047      	beq.n	80060ce <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fdb4 	bl	8005bb0 <ptr_to_mem>
 8006048:	4602      	mov	r2, r0
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	8053      	strh	r3, [r2, #2]
 800604e:	e03e      	b.n	80060ce <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006050:	8bfb      	ldrh	r3, [r7, #30]
 8006052:	f103 0214 	add.w	r2, r3, #20
 8006056:	8abb      	ldrh	r3, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	d838      	bhi.n	80060ce <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800605c:	8afa      	ldrh	r2, [r7, #22]
 800605e:	8bfb      	ldrh	r3, [r7, #30]
 8006060:	4413      	add	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	3308      	adds	r3, #8
 8006066:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006070:	d106      	bne.n	8006080 <mem_trim+0x180>
 8006072:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <mem_trim+0x1e0>)
 8006074:	f240 3216 	movw	r2, #790	; 0x316
 8006078:	491d      	ldr	r1, [pc, #116]	; (80060f0 <mem_trim+0x1f0>)
 800607a:	481b      	ldr	r0, [pc, #108]	; (80060e8 <mem_trim+0x1e8>)
 800607c:	f00c fa6c 	bl	8012558 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fd94 	bl	8005bb0 <ptr_to_mem>
 8006088:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <mem_trim+0x1f4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	429a      	cmp	r2, r3
 8006092:	d202      	bcs.n	800609a <mem_trim+0x19a>
      lfree = mem2;
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <mem_trim+0x1f4>)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2200      	movs	r2, #0
 800609e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	881a      	ldrh	r2, [r3, #0]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	8afa      	ldrh	r2, [r7, #22]
 80060ac:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	89fa      	ldrh	r2, [r7, #14]
 80060b2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80060bc:	d007      	beq.n	80060ce <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fd74 	bl	8005bb0 <ptr_to_mem>
 80060c8:	4602      	mov	r2, r0
 80060ca:	89fb      	ldrh	r3, [r7, #14]
 80060cc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80060ce:	687b      	ldr	r3, [r7, #4]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	200004e8 	.word	0x200004e8
 80060dc:	200004ec 	.word	0x200004ec
 80060e0:	080136bc 	.word	0x080136bc
 80060e4:	0801382c 	.word	0x0801382c
 80060e8:	08013704 	.word	0x08013704
 80060ec:	08013844 	.word	0x08013844
 80060f0:	08013864 	.word	0x08013864
 80060f4:	200004f0 	.word	0x200004f0

080060f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <mem_malloc+0x14>
    return NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	e0d9      	b.n	80062c0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	3303      	adds	r3, #3
 8006110:	b29b      	uxth	r3, r3
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006118:	8bbb      	ldrh	r3, [r7, #28]
 800611a:	2b0b      	cmp	r3, #11
 800611c:	d801      	bhi.n	8006122 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800611e:	230c      	movs	r3, #12
 8006120:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006122:	8bbb      	ldrh	r3, [r7, #28]
 8006124:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006128:	d803      	bhi.n	8006132 <mem_malloc+0x3a>
 800612a:	8bba      	ldrh	r2, [r7, #28]
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	429a      	cmp	r2, r3
 8006130:	d201      	bcs.n	8006136 <mem_malloc+0x3e>
    return NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	e0c4      	b.n	80062c0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006136:	4b64      	ldr	r3, [pc, #400]	; (80062c8 <mem_malloc+0x1d0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fd4a 	bl	8005bd4 <mem_to_ptr>
 8006140:	4603      	mov	r3, r0
 8006142:	83fb      	strh	r3, [r7, #30]
 8006144:	e0b4      	b.n	80062b0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006146:	8bfb      	ldrh	r3, [r7, #30]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fd31 	bl	8005bb0 <ptr_to_mem>
 800614e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 80a4 	bne.w	80062a2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	8bfb      	ldrh	r3, [r7, #30]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f1a3 0208 	sub.w	r2, r3, #8
 8006168:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800616a:	429a      	cmp	r2, r3
 800616c:	f0c0 8099 	bcc.w	80062a2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	8bfb      	ldrh	r3, [r7, #30]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f1a3 0208 	sub.w	r2, r3, #8
 800617e:	8bbb      	ldrh	r3, [r7, #28]
 8006180:	3314      	adds	r3, #20
 8006182:	429a      	cmp	r2, r3
 8006184:	d333      	bcc.n	80061ee <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006186:	8bfa      	ldrh	r2, [r7, #30]
 8006188:	8bbb      	ldrh	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	b29b      	uxth	r3, r3
 800618e:	3308      	adds	r3, #8
 8006190:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006192:	8a7b      	ldrh	r3, [r7, #18]
 8006194:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006198:	d106      	bne.n	80061a8 <mem_malloc+0xb0>
 800619a:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <mem_malloc+0x1d4>)
 800619c:	f240 3287 	movw	r2, #903	; 0x387
 80061a0:	494b      	ldr	r1, [pc, #300]	; (80062d0 <mem_malloc+0x1d8>)
 80061a2:	484c      	ldr	r0, [pc, #304]	; (80062d4 <mem_malloc+0x1dc>)
 80061a4:	f00c f9d8 	bl	8012558 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80061a8:	8a7b      	ldrh	r3, [r7, #18]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fd00 	bl	8005bb0 <ptr_to_mem>
 80061b0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8bfa      	ldrh	r2, [r7, #30]
 80061c4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	8a7a      	ldrh	r2, [r7, #18]
 80061ca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2201      	movs	r2, #1
 80061d0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80061da:	d00b      	beq.n	80061f4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fce5 	bl	8005bb0 <ptr_to_mem>
 80061e6:	4602      	mov	r2, r0
 80061e8:	8a7b      	ldrh	r3, [r7, #18]
 80061ea:	8053      	strh	r3, [r2, #2]
 80061ec:	e002      	b.n	80061f4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2201      	movs	r2, #1
 80061f2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80061f4:	4b34      	ldr	r3, [pc, #208]	; (80062c8 <mem_malloc+0x1d0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d127      	bne.n	800624e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80061fe:	4b32      	ldr	r3, [pc, #200]	; (80062c8 <mem_malloc+0x1d0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006204:	e005      	b.n	8006212 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fcd0 	bl	8005bb0 <ptr_to_mem>
 8006210:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <mem_malloc+0x12c>
 800621a:	4b2f      	ldr	r3, [pc, #188]	; (80062d8 <mem_malloc+0x1e0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	429a      	cmp	r2, r3
 8006222:	d1f0      	bne.n	8006206 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <mem_malloc+0x1d0>)
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800622a:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <mem_malloc+0x1d0>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <mem_malloc+0x1e0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d00b      	beq.n	800624e <mem_malloc+0x156>
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <mem_malloc+0x1d0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <mem_malloc+0x156>
 8006240:	4b22      	ldr	r3, [pc, #136]	; (80062cc <mem_malloc+0x1d4>)
 8006242:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006246:	4925      	ldr	r1, [pc, #148]	; (80062dc <mem_malloc+0x1e4>)
 8006248:	4822      	ldr	r0, [pc, #136]	; (80062d4 <mem_malloc+0x1dc>)
 800624a:	f00c f985 	bl	8012558 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800624e:	8bba      	ldrh	r2, [r7, #28]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	3308      	adds	r3, #8
 8006256:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <mem_malloc+0x1e0>)
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	4293      	cmp	r3, r2
 800625c:	d906      	bls.n	800626c <mem_malloc+0x174>
 800625e:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <mem_malloc+0x1d4>)
 8006260:	f240 32ba 	movw	r2, #954	; 0x3ba
 8006264:	491e      	ldr	r1, [pc, #120]	; (80062e0 <mem_malloc+0x1e8>)
 8006266:	481b      	ldr	r0, [pc, #108]	; (80062d4 <mem_malloc+0x1dc>)
 8006268:	f00c f976 	bl	8012558 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <mem_malloc+0x18c>
 8006276:	4b15      	ldr	r3, [pc, #84]	; (80062cc <mem_malloc+0x1d4>)
 8006278:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800627c:	4919      	ldr	r1, [pc, #100]	; (80062e4 <mem_malloc+0x1ec>)
 800627e:	4815      	ldr	r0, [pc, #84]	; (80062d4 <mem_malloc+0x1dc>)
 8006280:	f00c f96a 	bl	8012558 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d006      	beq.n	800629c <mem_malloc+0x1a4>
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <mem_malloc+0x1d4>)
 8006290:	f240 32be 	movw	r2, #958	; 0x3be
 8006294:	4914      	ldr	r1, [pc, #80]	; (80062e8 <mem_malloc+0x1f0>)
 8006296:	480f      	ldr	r0, [pc, #60]	; (80062d4 <mem_malloc+0x1dc>)
 8006298:	f00c f95e 	bl	8012558 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	3308      	adds	r3, #8
 80062a0:	e00e      	b.n	80062c0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80062a2:	8bfb      	ldrh	r3, [r7, #30]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fc83 	bl	8005bb0 <ptr_to_mem>
 80062aa:	4603      	mov	r3, r0
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80062b0:	8bfa      	ldrh	r2, [r7, #30]
 80062b2:	8bbb      	ldrh	r3, [r7, #28]
 80062b4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80062b8:	429a      	cmp	r2, r3
 80062ba:	f4ff af44 	bcc.w	8006146 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200004f0 	.word	0x200004f0
 80062cc:	080136bc 	.word	0x080136bc
 80062d0:	08013864 	.word	0x08013864
 80062d4:	08013704 	.word	0x08013704
 80062d8:	200004ec 	.word	0x200004ec
 80062dc:	08013878 	.word	0x08013878
 80062e0:	08013894 	.word	0x08013894
 80062e4:	080138c4 	.word	0x080138c4
 80062e8:	080138f4 	.word	0x080138f4

080062ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	3303      	adds	r3, #3
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e011      	b.n	8006332 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	885b      	ldrh	r3, [r3, #2]
 8006336:	461a      	mov	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4293      	cmp	r3, r2
 800633c:	dbe7      	blt.n	800630e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006352:	2300      	movs	r3, #0
 8006354:	80fb      	strh	r3, [r7, #6]
 8006356:	e009      	b.n	800636c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	4a08      	ldr	r2, [pc, #32]	; (800637c <memp_init+0x30>)
 800635c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff ffc3 	bl	80062ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	3301      	adds	r3, #1
 800636a:	80fb      	strh	r3, [r7, #6]
 800636c:	88fb      	ldrh	r3, [r7, #6]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d9f2      	bls.n	8006358 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	08016898 	.word	0x08016898

08006380 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d012      	beq.n	80063bc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d006      	beq.n	80063b8 <do_memp_malloc_pool+0x38>
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <do_memp_malloc_pool+0x48>)
 80063ac:	f240 1219 	movw	r2, #281	; 0x119
 80063b0:	4906      	ldr	r1, [pc, #24]	; (80063cc <do_memp_malloc_pool+0x4c>)
 80063b2:	4807      	ldr	r0, [pc, #28]	; (80063d0 <do_memp_malloc_pool+0x50>)
 80063b4:	f00c f8d0 	bl	8012558 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	e000      	b.n	80063be <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08013918 	.word	0x08013918
 80063cc:	08013948 	.word	0x08013948
 80063d0:	0801396c 	.word	0x0801396c

080063d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d908      	bls.n	80063f6 <memp_malloc+0x22>
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <memp_malloc+0x3c>)
 80063e6:	f240 1257 	movw	r2, #343	; 0x157
 80063ea:	490a      	ldr	r1, [pc, #40]	; (8006414 <memp_malloc+0x40>)
 80063ec:	480a      	ldr	r0, [pc, #40]	; (8006418 <memp_malloc+0x44>)
 80063ee:	f00c f8b3 	bl	8012558 <iprintf>
 80063f2:	2300      	movs	r3, #0
 80063f4:	e008      	b.n	8006408 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	4a08      	ldr	r2, [pc, #32]	; (800641c <memp_malloc+0x48>)
 80063fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ffbe 	bl	8006380 <do_memp_malloc_pool>
 8006404:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006406:	68fb      	ldr	r3, [r7, #12]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08013918 	.word	0x08013918
 8006414:	080139a8 	.word	0x080139a8
 8006418:	0801396c 	.word	0x0801396c
 800641c:	08016898 	.word	0x08016898

08006420 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <do_memp_free_pool+0x22>
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <do_memp_free_pool+0x40>)
 8006436:	f240 126d 	movw	r2, #365	; 0x16d
 800643a:	490a      	ldr	r1, [pc, #40]	; (8006464 <do_memp_free_pool+0x44>)
 800643c:	480a      	ldr	r0, [pc, #40]	; (8006468 <do_memp_free_pool+0x48>)
 800643e:	f00c f88b 	bl	8012558 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	08013918 	.word	0x08013918
 8006464:	080139c8 	.word	0x080139c8
 8006468:	0801396c 	.word	0x0801396c

0800646c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	2b08      	cmp	r3, #8
 800647c:	d907      	bls.n	800648e <memp_free+0x22>
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <memp_free+0x44>)
 8006480:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006484:	490b      	ldr	r1, [pc, #44]	; (80064b4 <memp_free+0x48>)
 8006486:	480c      	ldr	r0, [pc, #48]	; (80064b8 <memp_free+0x4c>)
 8006488:	f00c f866 	bl	8012558 <iprintf>
 800648c:	e00c      	b.n	80064a8 <memp_free+0x3c>

  if (mem == NULL) {
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <memp_free+0x50>)
 8006498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff ffbe 	bl	8006420 <do_memp_free_pool>
 80064a4:	e000      	b.n	80064a8 <memp_free+0x3c>
    return;
 80064a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	08013918 	.word	0x08013918
 80064b4:	080139e8 	.word	0x080139e8
 80064b8:	0801396c 	.word	0x0801396c
 80064bc:	08016898 	.word	0x08016898

080064c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <netif_add+0x26>
 80064e4:	4b59      	ldr	r3, [pc, #356]	; (800664c <netif_add+0x17c>)
 80064e6:	f240 1227 	movw	r2, #295	; 0x127
 80064ea:	4959      	ldr	r1, [pc, #356]	; (8006650 <netif_add+0x180>)
 80064ec:	4859      	ldr	r0, [pc, #356]	; (8006654 <netif_add+0x184>)
 80064ee:	f00c f833 	bl	8012558 <iprintf>
 80064f2:	2300      	movs	r3, #0
 80064f4:	e0a6      	b.n	8006644 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d108      	bne.n	800650e <netif_add+0x3e>
 80064fc:	4b53      	ldr	r3, [pc, #332]	; (800664c <netif_add+0x17c>)
 80064fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006502:	4955      	ldr	r1, [pc, #340]	; (8006658 <netif_add+0x188>)
 8006504:	4853      	ldr	r0, [pc, #332]	; (8006654 <netif_add+0x184>)
 8006506:	f00c f827 	bl	8012558 <iprintf>
 800650a:	2300      	movs	r3, #0
 800650c:	e09a      	b.n	8006644 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006514:	4b51      	ldr	r3, [pc, #324]	; (800665c <netif_add+0x18c>)
 8006516:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800651e:	4b4f      	ldr	r3, [pc, #316]	; (800665c <netif_add+0x18c>)
 8006520:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006528:	4b4c      	ldr	r3, [pc, #304]	; (800665c <netif_add+0x18c>)
 800652a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a47      	ldr	r2, [pc, #284]	; (8006660 <netif_add+0x190>)
 8006542:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3320      	adds	r3, #32
 8006556:	2204      	movs	r2, #4
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f00b fff4 	bl	8012548 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8006566:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <netif_add+0x194>)
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006574:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f913 	bl	80067a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	4798      	blx	r3
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <netif_add+0xc2>
    return NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	e058      	b.n	8006644 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006598:	2bff      	cmp	r3, #255	; 0xff
 800659a:	d103      	bne.n	80065a4 <netif_add+0xd4>
        netif->num = 0;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80065a8:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <netif_add+0x198>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e02b      	b.n	8006608 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d106      	bne.n	80065c6 <netif_add+0xf6>
 80065b8:	4b24      	ldr	r3, [pc, #144]	; (800664c <netif_add+0x17c>)
 80065ba:	f240 128b 	movw	r2, #395	; 0x18b
 80065be:	492b      	ldr	r1, [pc, #172]	; (800666c <netif_add+0x19c>)
 80065c0:	4824      	ldr	r0, [pc, #144]	; (8006654 <netif_add+0x184>)
 80065c2:	f00b ffc9 	bl	8012558 <iprintf>
        num_netifs++;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	dd06      	ble.n	80065e0 <netif_add+0x110>
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <netif_add+0x17c>)
 80065d4:	f240 128d 	movw	r2, #397	; 0x18d
 80065d8:	4925      	ldr	r1, [pc, #148]	; (8006670 <netif_add+0x1a0>)
 80065da:	481e      	ldr	r0, [pc, #120]	; (8006654 <netif_add+0x184>)
 80065dc:	f00b ffbc 	bl	8012558 <iprintf>
        if (netif2->num == netif->num) {
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d108      	bne.n	8006602 <netif_add+0x132>
          netif->num++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065f6:	3301      	adds	r3, #1
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006600:	e005      	b.n	800660e <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1d0      	bne.n	80065b0 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1be      	bne.n	8006592 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800661a:	2bfe      	cmp	r3, #254	; 0xfe
 800661c:	d103      	bne.n	8006626 <netif_add+0x156>
    netif_num = 0;
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <netif_add+0x194>)
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e006      	b.n	8006634 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800662c:	3301      	adds	r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <netif_add+0x194>)
 8006632:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <netif_add+0x198>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800663c:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <netif_add+0x198>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	08013a04 	.word	0x08013a04
 8006650:	08013a98 	.word	0x08013a98
 8006654:	08013a54 	.word	0x08013a54
 8006658:	08013ab4 	.word	0x08013ab4
 800665c:	0801690c 	.word	0x0801690c
 8006660:	08006999 	.word	0x08006999
 8006664:	20000518 	.word	0x20000518
 8006668:	20007178 	.word	0x20007178
 800666c:	08013ad8 	.word	0x08013ad8
 8006670:	08013aec 	.word	0x08013aec

08006674 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f002 fd73 	bl	800916c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f007 fdbd 	bl	800e208 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <netif_do_set_ipaddr+0x20>
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <netif_do_set_ipaddr+0x88>)
 80066ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 80066b0:	491c      	ldr	r1, [pc, #112]	; (8006724 <netif_do_set_ipaddr+0x8c>)
 80066b2:	481d      	ldr	r0, [pc, #116]	; (8006728 <netif_do_set_ipaddr+0x90>)
 80066b4:	f00b ff50 	bl	8012558 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <netif_do_set_ipaddr+0x34>
 80066be:	4b18      	ldr	r3, [pc, #96]	; (8006720 <netif_do_set_ipaddr+0x88>)
 80066c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80066c4:	4917      	ldr	r1, [pc, #92]	; (8006724 <netif_do_set_ipaddr+0x8c>)
 80066c6:	4818      	ldr	r0, [pc, #96]	; (8006728 <netif_do_set_ipaddr+0x90>)
 80066c8:	f00b ff46 	bl	8012558 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3304      	adds	r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d01c      	beq.n	8006714 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3304      	adds	r3, #4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ffbf 	bl	8006674 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <netif_do_set_ipaddr+0x6a>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	e000      	b.n	8006704 <netif_do_set_ipaddr+0x6c>
 8006702:	2300      	movs	r3, #0
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006708:	2101      	movs	r1, #1
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f8d2 	bl	80068b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	08013a04 	.word	0x08013a04
 8006724:	08013b1c 	.word	0x08013b1c
 8006728:	08013a54 	.word	0x08013a54

0800672c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3308      	adds	r3, #8
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d00a      	beq.n	800675c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <netif_do_set_netmask+0x26>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	e000      	b.n	8006754 <netif_do_set_netmask+0x28>
 8006752:	2300      	movs	r3, #0
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	330c      	adds	r3, #12
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d00a      	beq.n	800679a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <netif_do_set_gw+0x26>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	e000      	b.n	8006792 <netif_do_set_gw+0x28>
 8006790:	2300      	movs	r3, #0
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80067c4:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <netif_set_addr+0x90>)
 80067c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80067ce:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <netif_set_addr+0x90>)
 80067d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80067d8:	4b17      	ldr	r3, [pc, #92]	; (8006838 <netif_set_addr+0x90>)
 80067da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <netif_set_addr+0x42>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <netif_set_addr+0x46>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <netif_set_addr+0x48>
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	461a      	mov	r2, r3
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff ff49 	bl	8006698 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff ff8e 	bl	800672c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff ffa8 	bl	800676a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006820:	f107 0310 	add.w	r3, r7, #16
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff ff35 	bl	8006698 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800682e:	bf00      	nop
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	0801690c 	.word	0x0801690c

0800683c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006844:	4a04      	ldr	r2, [pc, #16]	; (8006858 <netif_set_default+0x1c>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	2000717c 	.word	0x2000717c

0800685c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <netif_set_up+0x1e>
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <netif_set_up+0x4c>)
 800686c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <netif_set_up+0x50>)
 8006872:	480f      	ldr	r0, [pc, #60]	; (80068b0 <netif_set_up+0x54>)
 8006874:	f00b fe70 	bl	8012558 <iprintf>
 8006878:	e013      	b.n	80068a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10c      	bne.n	80068a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	b2da      	uxtb	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800689a:	2103      	movs	r1, #3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f809 	bl	80068b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	08013a04 	.word	0x08013a04
 80068ac:	08013b8c 	.word	0x08013b8c
 80068b0:	08013a54 	.word	0x08013a54

080068b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <netif_issue_reports+0x20>
 80068c6:	4b18      	ldr	r3, [pc, #96]	; (8006928 <netif_issue_reports+0x74>)
 80068c8:	f240 326d 	movw	r2, #877	; 0x36d
 80068cc:	4917      	ldr	r1, [pc, #92]	; (800692c <netif_issue_reports+0x78>)
 80068ce:	4818      	ldr	r0, [pc, #96]	; (8006930 <netif_issue_reports+0x7c>)
 80068d0:	f00b fe42 	bl	8012558 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01e      	beq.n	8006920 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d013      	beq.n	8006922 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f00a fa39 	bl	8010d90 <etharp_request>
 800691e:	e000      	b.n	8006922 <netif_issue_reports+0x6e>
    return;
 8006920:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	08013a04 	.word	0x08013a04
 800692c:	08013ba8 	.word	0x08013ba8
 8006930:	08013a54 	.word	0x08013a54

08006934 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <netif_set_down+0x1e>
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <netif_set_down+0x58>)
 8006944:	f240 329b 	movw	r2, #923	; 0x39b
 8006948:	4911      	ldr	r1, [pc, #68]	; (8006990 <netif_set_down+0x5c>)
 800694a:	4812      	ldr	r0, [pc, #72]	; (8006994 <netif_set_down+0x60>)
 800694c:	f00b fe04 	bl	8012558 <iprintf>
 8006950:	e019      	b.n	8006986 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d012      	beq.n	8006986 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f009 fdbf 	bl	8010504 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	08013a04 	.word	0x08013a04
 8006990:	08013bcc 	.word	0x08013bcc
 8006994:	08013a54 	.word	0x08013a54

08006998 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80069a4:	f06f 030b 	mvn.w	r3, #11
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80069c4:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <netif_get_by_index+0x48>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e00c      	b.n	80069e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069d2:	3301      	adds	r3, #1
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	79fa      	ldrb	r2, [r7, #7]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d101      	bne.n	80069e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	e006      	b.n	80069ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1ef      	bne.n	80069cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20007178 	.word	0x20007178

08006a00 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <pbuf_free_ooseq+0x38>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <pbuf_free_ooseq+0x3c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e00a      	b.n	8006a2a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f002 fbe3 	bl	80091e8 <tcp_free_ooseq>
      return;
 8006a22:	e005      	b.n	8006a30 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f1      	bne.n	8006a14 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20007180 	.word	0x20007180
 8006a3c:	20007188 	.word	0x20007188

08006a40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006a44:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <pbuf_pool_is_empty+0x14>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006a4a:	bf00      	nop
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	20007180 	.word	0x20007180

08006a58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4611      	mov	r1, r2
 8006a64:	461a      	mov	r2, r3
 8006a66:	460b      	mov	r3, r1
 8006a68:	80fb      	strh	r3, [r7, #6]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88ba      	ldrh	r2, [r7, #4]
 8006a84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006a86:	8b3b      	ldrh	r3, [r7, #24]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	7f3a      	ldrb	r2, [r7, #28]
 8006a92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	73da      	strb	r2, [r3, #15]
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	71fb      	strb	r3, [r7, #7]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	80bb      	strh	r3, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006ac2:	887b      	ldrh	r3, [r7, #2]
 8006ac4:	2b41      	cmp	r3, #65	; 0x41
 8006ac6:	d00b      	beq.n	8006ae0 <pbuf_alloc+0x34>
 8006ac8:	2b41      	cmp	r3, #65	; 0x41
 8006aca:	dc02      	bgt.n	8006ad2 <pbuf_alloc+0x26>
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d007      	beq.n	8006ae0 <pbuf_alloc+0x34>
 8006ad0:	e0c2      	b.n	8006c58 <pbuf_alloc+0x1ac>
 8006ad2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006ad6:	d00b      	beq.n	8006af0 <pbuf_alloc+0x44>
 8006ad8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006adc:	d070      	beq.n	8006bc0 <pbuf_alloc+0x114>
 8006ade:	e0bb      	b.n	8006c58 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006ae0:	887a      	ldrh	r2, [r7, #2]
 8006ae2:	88bb      	ldrh	r3, [r7, #4]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f000 f8d2 	bl	8006c90 <pbuf_alloc_reference>
 8006aec:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006aee:	e0bd      	b.n	8006c6c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006af8:	88bb      	ldrh	r3, [r7, #4]
 8006afa:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006afc:	2008      	movs	r0, #8
 8006afe:	f7ff fc69 	bl	80063d4 <memp_malloc>
 8006b02:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8006b0a:	f7ff ff99 	bl	8006a40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b16:	f000 faa9 	bl	800706c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e0a7      	b.n	8006c6e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b20:	3303      	adds	r3, #3
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f023 0303 	bic.w	r3, r3, #3
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8b7a      	ldrh	r2, [r7, #26]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	bf28      	it	cs
 8006b36:	4613      	movcs	r3, r2
 8006b38:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4413      	add	r3, r2
 8006b42:	3303      	adds	r3, #3
 8006b44:	f023 0303 	bic.w	r3, r3, #3
 8006b48:	4618      	mov	r0, r3
 8006b4a:	89f9      	ldrh	r1, [r7, #14]
 8006b4c:	8b7a      	ldrh	r2, [r7, #26]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	887b      	ldrh	r3, [r7, #2]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	460b      	mov	r3, r1
 8006b58:	4601      	mov	r1, r0
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f7ff ff7c 	bl	8006a58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <pbuf_alloc+0xce>
 8006b6c:	4b42      	ldr	r3, [pc, #264]	; (8006c78 <pbuf_alloc+0x1cc>)
 8006b6e:	f240 1201 	movw	r2, #257	; 0x101
 8006b72:	4942      	ldr	r1, [pc, #264]	; (8006c7c <pbuf_alloc+0x1d0>)
 8006b74:	4842      	ldr	r0, [pc, #264]	; (8006c80 <pbuf_alloc+0x1d4>)
 8006b76:	f00b fcef 	bl	8012558 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006b7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b7c:	3303      	adds	r3, #3
 8006b7e:	f023 0303 	bic.w	r3, r3, #3
 8006b82:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006b86:	d106      	bne.n	8006b96 <pbuf_alloc+0xea>
 8006b88:	4b3b      	ldr	r3, [pc, #236]	; (8006c78 <pbuf_alloc+0x1cc>)
 8006b8a:	f240 1203 	movw	r2, #259	; 0x103
 8006b8e:	493d      	ldr	r1, [pc, #244]	; (8006c84 <pbuf_alloc+0x1d8>)
 8006b90:	483b      	ldr	r0, [pc, #236]	; (8006c80 <pbuf_alloc+0x1d4>)
 8006b92:	f00b fce1 	bl	8012558 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba0:	e002      	b.n	8006ba8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006bac:	8b7a      	ldrh	r2, [r7, #26]
 8006bae:	89fb      	ldrh	r3, [r7, #14]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006bb8:	8b7b      	ldrh	r3, [r7, #26]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d19e      	bne.n	8006afc <pbuf_alloc+0x50>
      break;
 8006bbe:	e055      	b.n	8006c6c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006bc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bc2:	3303      	adds	r3, #3
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	88bb      	ldrh	r3, [r7, #4]
 8006bce:	3303      	adds	r3, #3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4413      	add	r3, r2
 8006bda:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006bdc:	8b3b      	ldrh	r3, [r7, #24]
 8006bde:	3310      	adds	r3, #16
 8006be0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006be2:	8b3a      	ldrh	r2, [r7, #24]
 8006be4:	88bb      	ldrh	r3, [r7, #4]
 8006be6:	3303      	adds	r3, #3
 8006be8:	f023 0303 	bic.w	r3, r3, #3
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d306      	bcc.n	8006bfe <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006bf0:	8afa      	ldrh	r2, [r7, #22]
 8006bf2:	88bb      	ldrh	r3, [r7, #4]
 8006bf4:	3303      	adds	r3, #3
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d201      	bcs.n	8006c02 <pbuf_alloc+0x156>
        return NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e035      	b.n	8006c6e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006c02:	8afb      	ldrh	r3, [r7, #22]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fa77 	bl	80060f8 <mem_malloc>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <pbuf_alloc+0x16a>
        return NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	e02b      	b.n	8006c6e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c18:	3310      	adds	r3, #16
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3303      	adds	r3, #3
 8006c20:	f023 0303 	bic.w	r3, r3, #3
 8006c24:	4618      	mov	r0, r3
 8006c26:	88b9      	ldrh	r1, [r7, #4]
 8006c28:	88ba      	ldrh	r2, [r7, #4]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	887b      	ldrh	r3, [r7, #2]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	460b      	mov	r3, r1
 8006c34:	4601      	mov	r1, r0
 8006c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c38:	f7ff ff0e 	bl	8006a58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d010      	beq.n	8006c6a <pbuf_alloc+0x1be>
 8006c48:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <pbuf_alloc+0x1cc>)
 8006c4a:	f240 1223 	movw	r2, #291	; 0x123
 8006c4e:	490e      	ldr	r1, [pc, #56]	; (8006c88 <pbuf_alloc+0x1dc>)
 8006c50:	480b      	ldr	r0, [pc, #44]	; (8006c80 <pbuf_alloc+0x1d4>)
 8006c52:	f00b fc81 	bl	8012558 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006c56:	e008      	b.n	8006c6a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <pbuf_alloc+0x1cc>)
 8006c5a:	f240 1227 	movw	r2, #295	; 0x127
 8006c5e:	490b      	ldr	r1, [pc, #44]	; (8006c8c <pbuf_alloc+0x1e0>)
 8006c60:	4807      	ldr	r0, [pc, #28]	; (8006c80 <pbuf_alloc+0x1d4>)
 8006c62:	f00b fc79 	bl	8012558 <iprintf>
      return NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e001      	b.n	8006c6e <pbuf_alloc+0x1c2>
      break;
 8006c6a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	08013c34 	.word	0x08013c34
 8006c7c:	08013c64 	.word	0x08013c64
 8006c80:	08013c94 	.word	0x08013c94
 8006c84:	08013cbc 	.word	0x08013cbc
 8006c88:	08013cf0 	.word	0x08013cf0
 8006c8c:	08013d1c 	.word	0x08013d1c

08006c90 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	807b      	strh	r3, [r7, #2]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006ca0:	883b      	ldrh	r3, [r7, #0]
 8006ca2:	2b41      	cmp	r3, #65	; 0x41
 8006ca4:	d009      	beq.n	8006cba <pbuf_alloc_reference+0x2a>
 8006ca6:	883b      	ldrh	r3, [r7, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d006      	beq.n	8006cba <pbuf_alloc_reference+0x2a>
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <pbuf_alloc_reference+0x5c>)
 8006cae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006cb2:	490f      	ldr	r1, [pc, #60]	; (8006cf0 <pbuf_alloc_reference+0x60>)
 8006cb4:	480f      	ldr	r0, [pc, #60]	; (8006cf4 <pbuf_alloc_reference+0x64>)
 8006cb6:	f00b fc4f 	bl	8012558 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006cba:	2007      	movs	r0, #7
 8006cbc:	f7ff fb8a 	bl	80063d4 <memp_malloc>
 8006cc0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e00b      	b.n	8006ce4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006ccc:	8879      	ldrh	r1, [r7, #2]
 8006cce:	887a      	ldrh	r2, [r7, #2]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	883b      	ldrh	r3, [r7, #0]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff febb 	bl	8006a58 <pbuf_init_alloced_pbuf>
  return p;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	08013c34 	.word	0x08013c34
 8006cf0:	08013d38 	.word	0x08013d38
 8006cf4:	08013c94 	.word	0x08013c94

08006cf8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	607b      	str	r3, [r7, #4]
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	460b      	mov	r3, r1
 8006d06:	81bb      	strh	r3, [r7, #12]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d10:	8a7b      	ldrh	r3, [r7, #18]
 8006d12:	3303      	adds	r3, #3
 8006d14:	f023 0203 	bic.w	r2, r3, #3
 8006d18:	89bb      	ldrh	r3, [r7, #12]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d901      	bls.n	8006d26 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e018      	b.n	8006d58 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d2c:	8a7b      	ldrh	r3, [r7, #18]
 8006d2e:	3303      	adds	r3, #3
 8006d30:	f023 0303 	bic.w	r3, r3, #3
 8006d34:	6a3a      	ldr	r2, [r7, #32]
 8006d36:	4413      	add	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e001      	b.n	8006d40 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	89b9      	ldrh	r1, [r7, #12]
 8006d44:	89ba      	ldrh	r2, [r7, #12]
 8006d46:	2302      	movs	r3, #2
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	897b      	ldrh	r3, [r7, #10]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	6979      	ldr	r1, [r7, #20]
 8006d52:	f7ff fe81 	bl	8006a58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006d56:	687b      	ldr	r3, [r7, #4]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <pbuf_realloc+0x20>
 8006d72:	4b3a      	ldr	r3, [pc, #232]	; (8006e5c <pbuf_realloc+0xfc>)
 8006d74:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006d78:	4939      	ldr	r1, [pc, #228]	; (8006e60 <pbuf_realloc+0x100>)
 8006d7a:	483a      	ldr	r0, [pc, #232]	; (8006e64 <pbuf_realloc+0x104>)
 8006d7c:	f00b fbec 	bl	8012558 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	891b      	ldrh	r3, [r3, #8]
 8006d84:	887a      	ldrh	r2, [r7, #2]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d264      	bcs.n	8006e54 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	891a      	ldrh	r2, [r3, #8]
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006d94:	887b      	ldrh	r3, [r7, #2]
 8006d96:	817b      	strh	r3, [r7, #10]
  q = p;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006d9c:	e018      	b.n	8006dd0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	895b      	ldrh	r3, [r3, #10]
 8006da2:	897a      	ldrh	r2, [r7, #10]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	891a      	ldrh	r2, [r3, #8]
 8006dac:	893b      	ldrh	r3, [r7, #8]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <pbuf_realloc+0x70>
 8006dc2:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <pbuf_realloc+0xfc>)
 8006dc4:	f240 12af 	movw	r2, #431	; 0x1af
 8006dc8:	4927      	ldr	r1, [pc, #156]	; (8006e68 <pbuf_realloc+0x108>)
 8006dca:	4826      	ldr	r0, [pc, #152]	; (8006e64 <pbuf_realloc+0x104>)
 8006dcc:	f00b fbc4 	bl	8012558 <iprintf>
  while (rem_len > q->len) {
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	895b      	ldrh	r3, [r3, #10]
 8006dd4:	897a      	ldrh	r2, [r7, #10]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d8e1      	bhi.n	8006d9e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	7b1b      	ldrb	r3, [r3, #12]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d122      	bne.n	8006e2c <pbuf_realloc+0xcc>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	895b      	ldrh	r3, [r3, #10]
 8006dea:	897a      	ldrh	r2, [r7, #10]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d01d      	beq.n	8006e2c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	7b5b      	ldrb	r3, [r3, #13]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d117      	bne.n	8006e2c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	461a      	mov	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	897b      	ldrh	r3, [r7, #10]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff f875 	bl	8005f00 <mem_trim>
 8006e16:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <pbuf_realloc+0xcc>
 8006e1e:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <pbuf_realloc+0xfc>)
 8006e20:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006e24:	4911      	ldr	r1, [pc, #68]	; (8006e6c <pbuf_realloc+0x10c>)
 8006e26:	480f      	ldr	r0, [pc, #60]	; (8006e64 <pbuf_realloc+0x104>)
 8006e28:	f00b fb96 	bl	8012558 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	897a      	ldrh	r2, [r7, #10]
 8006e30:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	895a      	ldrh	r2, [r3, #10]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f910 	bl	800706c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e000      	b.n	8006e56 <pbuf_realloc+0xf6>
    return;
 8006e54:	bf00      	nop

}
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	08013c34 	.word	0x08013c34
 8006e60:	08013d4c 	.word	0x08013d4c
 8006e64:	08013c94 	.word	0x08013c94
 8006e68:	08013d64 	.word	0x08013d64
 8006e6c:	08013d7c 	.word	0x08013d7c

08006e70 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d106      	bne.n	8006e92 <pbuf_add_header_impl+0x22>
 8006e84:	4b2b      	ldr	r3, [pc, #172]	; (8006f34 <pbuf_add_header_impl+0xc4>)
 8006e86:	f240 12df 	movw	r2, #479	; 0x1df
 8006e8a:	492b      	ldr	r1, [pc, #172]	; (8006f38 <pbuf_add_header_impl+0xc8>)
 8006e8c:	482b      	ldr	r0, [pc, #172]	; (8006f3c <pbuf_add_header_impl+0xcc>)
 8006e8e:	f00b fb63 	bl	8012558 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <pbuf_add_header_impl+0x30>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9e:	d301      	bcc.n	8006ea4 <pbuf_add_header_impl+0x34>
    return 1;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e043      	b.n	8006f2c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <pbuf_add_header_impl+0x3e>
    return 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e03e      	b.n	8006f2c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	891a      	ldrh	r2, [r3, #8]
 8006eb6:	8a7b      	ldrh	r3, [r7, #18]
 8006eb8:	4413      	add	r3, r2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	8a7a      	ldrh	r2, [r7, #18]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d901      	bls.n	8006ec6 <pbuf_add_header_impl+0x56>
    return 1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e032      	b.n	8006f2c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	7b1b      	ldrb	r3, [r3, #12]
 8006eca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006ecc:	8a3b      	ldrh	r3, [r7, #16]
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	425b      	negs	r3, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3310      	adds	r3, #16
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d20d      	bcs.n	8006f08 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e01d      	b.n	8006f2c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	425b      	negs	r3, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e001      	b.n	8006f08 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e011      	b.n	8006f2c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	895a      	ldrh	r2, [r3, #10]
 8006f12:	8a7b      	ldrh	r3, [r7, #18]
 8006f14:	4413      	add	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	891a      	ldrh	r2, [r3, #8]
 8006f20:	8a7b      	ldrh	r3, [r7, #18]
 8006f22:	4413      	add	r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	811a      	strh	r2, [r3, #8]


  return 0;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	08013c34 	.word	0x08013c34
 8006f38:	08013d98 	.word	0x08013d98
 8006f3c:	08013c94 	.word	0x08013c94

08006f40 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff ff8e 	bl	8006e70 <pbuf_add_header_impl>
 8006f54:	4603      	mov	r3, r0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <pbuf_remove_header+0x1e>
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <pbuf_remove_header+0x94>)
 8006f72:	f240 224b 	movw	r2, #587	; 0x24b
 8006f76:	4920      	ldr	r1, [pc, #128]	; (8006ff8 <pbuf_remove_header+0x98>)
 8006f78:	4820      	ldr	r0, [pc, #128]	; (8006ffc <pbuf_remove_header+0x9c>)
 8006f7a:	f00b faed 	bl	8012558 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <pbuf_remove_header+0x2c>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8a:	d301      	bcc.n	8006f90 <pbuf_remove_header+0x30>
    return 1;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e02c      	b.n	8006fea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <pbuf_remove_header+0x3a>
    return 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e027      	b.n	8006fea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	895b      	ldrh	r3, [r3, #10]
 8006fa2:	89fa      	ldrh	r2, [r7, #14]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d908      	bls.n	8006fba <pbuf_remove_header+0x5a>
 8006fa8:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <pbuf_remove_header+0x94>)
 8006faa:	f240 2255 	movw	r2, #597	; 0x255
 8006fae:	4914      	ldr	r1, [pc, #80]	; (8007000 <pbuf_remove_header+0xa0>)
 8006fb0:	4812      	ldr	r0, [pc, #72]	; (8006ffc <pbuf_remove_header+0x9c>)
 8006fb2:	f00b fad1 	bl	8012558 <iprintf>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e017      	b.n	8006fea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	441a      	add	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	895a      	ldrh	r2, [r3, #10]
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	891a      	ldrh	r2, [r3, #8]
 8006fde:	89fb      	ldrh	r3, [r7, #14]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08013c34 	.word	0x08013c34
 8006ff8:	08013d98 	.word	0x08013d98
 8006ffc:	08013c94 	.word	0x08013c94
 8007000:	08013da4 	.word	0x08013da4

08007004 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	807b      	strh	r3, [r7, #2]
 8007010:	4613      	mov	r3, r2
 8007012:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	da08      	bge.n	800702e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800701c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007020:	425b      	negs	r3, r3
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ff9b 	bl	8006f60 <pbuf_remove_header>
 800702a:	4603      	mov	r3, r0
 800702c:	e007      	b.n	800703e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800702e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007032:	787a      	ldrb	r2, [r7, #1]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff ff1a 	bl	8006e70 <pbuf_add_header_impl>
 800703c:	4603      	mov	r3, r0
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007056:	2201      	movs	r2, #1
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff ffd2 	bl	8007004 <pbuf_header_impl>
 8007060:	4603      	mov	r3, r0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <pbuf_free+0x22>
 8007080:	4b38      	ldr	r3, [pc, #224]	; (8007164 <pbuf_free+0xf8>)
 8007082:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007086:	4938      	ldr	r1, [pc, #224]	; (8007168 <pbuf_free+0xfc>)
 8007088:	4838      	ldr	r0, [pc, #224]	; (800716c <pbuf_free+0x100>)
 800708a:	f00b fa65 	bl	8012558 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800708e:	2300      	movs	r3, #0
 8007090:	e063      	b.n	800715a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007096:	e05c      	b.n	8007152 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7b9b      	ldrb	r3, [r3, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <pbuf_free+0x42>
 80070a0:	4b30      	ldr	r3, [pc, #192]	; (8007164 <pbuf_free+0xf8>)
 80070a2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80070a6:	4932      	ldr	r1, [pc, #200]	; (8007170 <pbuf_free+0x104>)
 80070a8:	4830      	ldr	r0, [pc, #192]	; (800716c <pbuf_free+0x100>)
 80070aa:	f00b fa55 	bl	8012558 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7b9b      	ldrb	r3, [r3, #14]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	739a      	strb	r2, [r3, #14]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7b9b      	ldrb	r3, [r3, #14]
 80070be:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80070c0:	7dbb      	ldrb	r3, [r7, #22]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d143      	bne.n	800714e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7b1b      	ldrb	r3, [r3, #12]
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7b5b      	ldrb	r3, [r3, #13]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <pbuf_free+0x90>
 80070ee:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <pbuf_free+0xf8>)
 80070f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80070f4:	491f      	ldr	r1, [pc, #124]	; (8007174 <pbuf_free+0x108>)
 80070f6:	481d      	ldr	r0, [pc, #116]	; (800716c <pbuf_free+0x100>)
 80070f8:	f00b fa2e 	bl	8012558 <iprintf>
        pc->custom_free_function(p);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
 8007104:	e01d      	b.n	8007142 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d104      	bne.n	8007116 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	2008      	movs	r0, #8
 8007110:	f7ff f9ac 	bl	800646c <memp_free>
 8007114:	e015      	b.n	8007142 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d104      	bne.n	8007126 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	2007      	movs	r0, #7
 8007120:	f7ff f9a4 	bl	800646c <memp_free>
 8007124:	e00d      	b.n	8007142 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <pbuf_free+0xc8>
          mem_free(p);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7fe fe7d 	bl	8005e2c <mem_free>
 8007132:	e006      	b.n	8007142 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <pbuf_free+0xf8>)
 8007136:	f240 320f 	movw	r2, #783	; 0x30f
 800713a:	490f      	ldr	r1, [pc, #60]	; (8007178 <pbuf_free+0x10c>)
 800713c:	480b      	ldr	r0, [pc, #44]	; (800716c <pbuf_free+0x100>)
 800713e:	f00b fa0b 	bl	8012558 <iprintf>
        }
      }
      count++;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	3301      	adds	r3, #1
 8007146:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	e001      	b.n	8007152 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d19f      	bne.n	8007098 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	08013c34 	.word	0x08013c34
 8007168:	08013d98 	.word	0x08013d98
 800716c:	08013c94 	.word	0x08013c94
 8007170:	08013dc4 	.word	0x08013dc4
 8007174:	08013ddc 	.word	0x08013ddc
 8007178:	08013e00 	.word	0x08013e00

0800717c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007188:	e005      	b.n	8007196 <pbuf_clen+0x1a>
    ++len;
 800718a:	89fb      	ldrh	r3, [r7, #14]
 800718c:	3301      	adds	r3, #1
 800718e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f6      	bne.n	800718a <pbuf_clen+0xe>
  }
  return len;
 800719c:	89fb      	ldrh	r3, [r7, #14]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7b9b      	ldrb	r3, [r3, #14]
 80071be:	3301      	adds	r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	7b9b      	ldrb	r3, [r3, #14]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <pbuf_ref+0x30>
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <pbuf_ref+0x38>)
 80071d0:	f240 3242 	movw	r2, #834	; 0x342
 80071d4:	4904      	ldr	r1, [pc, #16]	; (80071e8 <pbuf_ref+0x3c>)
 80071d6:	4805      	ldr	r0, [pc, #20]	; (80071ec <pbuf_ref+0x40>)
 80071d8:	f00b f9be 	bl	8012558 <iprintf>
  }
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	08013c34 	.word	0x08013c34
 80071e8:	08013e14 	.word	0x08013e14
 80071ec:	08013c94 	.word	0x08013c94

080071f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <pbuf_cat+0x16>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <pbuf_cat+0x26>
 8007206:	4b20      	ldr	r3, [pc, #128]	; (8007288 <pbuf_cat+0x98>)
 8007208:	f240 325a 	movw	r2, #858	; 0x35a
 800720c:	491f      	ldr	r1, [pc, #124]	; (800728c <pbuf_cat+0x9c>)
 800720e:	4820      	ldr	r0, [pc, #128]	; (8007290 <pbuf_cat+0xa0>)
 8007210:	f00b f9a2 	bl	8012558 <iprintf>
 8007214:	e034      	b.n	8007280 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e00a      	b.n	8007232 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	891a      	ldrh	r2, [r3, #8]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	891b      	ldrh	r3, [r3, #8]
 8007224:	4413      	add	r3, r2
 8007226:	b29a      	uxth	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	891a      	ldrh	r2, [r3, #8]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	895b      	ldrh	r3, [r3, #10]
 8007242:	429a      	cmp	r2, r3
 8007244:	d006      	beq.n	8007254 <pbuf_cat+0x64>
 8007246:	4b10      	ldr	r3, [pc, #64]	; (8007288 <pbuf_cat+0x98>)
 8007248:	f240 3262 	movw	r2, #866	; 0x362
 800724c:	4911      	ldr	r1, [pc, #68]	; (8007294 <pbuf_cat+0xa4>)
 800724e:	4810      	ldr	r0, [pc, #64]	; (8007290 <pbuf_cat+0xa0>)
 8007250:	f00b f982 	bl	8012558 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <pbuf_cat+0x7a>
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <pbuf_cat+0x98>)
 800725e:	f240 3263 	movw	r2, #867	; 0x363
 8007262:	490d      	ldr	r1, [pc, #52]	; (8007298 <pbuf_cat+0xa8>)
 8007264:	480a      	ldr	r0, [pc, #40]	; (8007290 <pbuf_cat+0xa0>)
 8007266:	f00b f977 	bl	8012558 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	891a      	ldrh	r2, [r3, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	891b      	ldrh	r3, [r3, #8]
 8007272:	4413      	add	r3, r2
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	08013c34 	.word	0x08013c34
 800728c:	08013e28 	.word	0x08013e28
 8007290:	08013c94 	.word	0x08013c94
 8007294:	08013e60 	.word	0x08013e60
 8007298:	08013e90 	.word	0x08013e90

0800729c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ffa1 	bl	80071f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80072ae:	6838      	ldr	r0, [r7, #0]
 80072b0:	f7ff ff7c 	bl	80071ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <pbuf_copy+0x2a>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <pbuf_copy+0x2a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	891a      	ldrh	r2, [r3, #8]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	891b      	ldrh	r3, [r3, #8]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d209      	bcs.n	80072fa <pbuf_copy+0x3e>
 80072e6:	4b57      	ldr	r3, [pc, #348]	; (8007444 <pbuf_copy+0x188>)
 80072e8:	f240 32ca 	movw	r2, #970	; 0x3ca
 80072ec:	4956      	ldr	r1, [pc, #344]	; (8007448 <pbuf_copy+0x18c>)
 80072ee:	4857      	ldr	r0, [pc, #348]	; (800744c <pbuf_copy+0x190>)
 80072f0:	f00b f932 	bl	8012558 <iprintf>
 80072f4:	f06f 030f 	mvn.w	r3, #15
 80072f8:	e09f      	b.n	800743a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	895b      	ldrh	r3, [r3, #10]
 80072fe:	461a      	mov	r2, r3
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	895b      	ldrh	r3, [r3, #10]
 8007308:	4619      	mov	r1, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1acb      	subs	r3, r1, r3
 800730e:	429a      	cmp	r2, r3
 8007310:	d306      	bcc.n	8007320 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	895b      	ldrh	r3, [r3, #10]
 8007316:	461a      	mov	r2, r3
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e005      	b.n	800732c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	895b      	ldrh	r3, [r3, #10]
 8007324:	461a      	mov	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	18d0      	adds	r0, r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	4413      	add	r3, r2
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4619      	mov	r1, r3
 8007340:	f00b f8f7 	bl	8012532 <memcpy>
    offset_to += len;
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	895b      	ldrh	r3, [r3, #10]
 8007358:	461a      	mov	r2, r3
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	4293      	cmp	r3, r2
 800735e:	d906      	bls.n	800736e <pbuf_copy+0xb2>
 8007360:	4b38      	ldr	r3, [pc, #224]	; (8007444 <pbuf_copy+0x188>)
 8007362:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007366:	493a      	ldr	r1, [pc, #232]	; (8007450 <pbuf_copy+0x194>)
 8007368:	4838      	ldr	r0, [pc, #224]	; (800744c <pbuf_copy+0x190>)
 800736a:	f00b f8f5 	bl	8012558 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	895b      	ldrh	r3, [r3, #10]
 8007372:	461a      	mov	r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4293      	cmp	r3, r2
 8007378:	d906      	bls.n	8007388 <pbuf_copy+0xcc>
 800737a:	4b32      	ldr	r3, [pc, #200]	; (8007444 <pbuf_copy+0x188>)
 800737c:	f240 32da 	movw	r2, #986	; 0x3da
 8007380:	4934      	ldr	r1, [pc, #208]	; (8007454 <pbuf_copy+0x198>)
 8007382:	4832      	ldr	r0, [pc, #200]	; (800744c <pbuf_copy+0x190>)
 8007384:	f00b f8e8 	bl	8012558 <iprintf>
    if (offset_from >= p_from->len) {
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	895b      	ldrh	r3, [r3, #10]
 800738c:	461a      	mov	r2, r3
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	4293      	cmp	r3, r2
 8007392:	d304      	bcc.n	800739e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	895b      	ldrh	r3, [r3, #10]
 80073a2:	461a      	mov	r2, r3
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d114      	bne.n	80073d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10c      	bne.n	80073d4 <pbuf_copy+0x118>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <pbuf_copy+0x118>
 80073c0:	4b20      	ldr	r3, [pc, #128]	; (8007444 <pbuf_copy+0x188>)
 80073c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80073c6:	4924      	ldr	r1, [pc, #144]	; (8007458 <pbuf_copy+0x19c>)
 80073c8:	4820      	ldr	r0, [pc, #128]	; (800744c <pbuf_copy+0x190>)
 80073ca:	f00b f8c5 	bl	8012558 <iprintf>
 80073ce:	f06f 030f 	mvn.w	r3, #15
 80073d2:	e032      	b.n	800743a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d013      	beq.n	8007402 <pbuf_copy+0x146>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	895a      	ldrh	r2, [r3, #10]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	891b      	ldrh	r3, [r3, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d10d      	bne.n	8007402 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d009      	beq.n	8007402 <pbuf_copy+0x146>
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <pbuf_copy+0x188>)
 80073f0:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80073f4:	4919      	ldr	r1, [pc, #100]	; (800745c <pbuf_copy+0x1a0>)
 80073f6:	4815      	ldr	r0, [pc, #84]	; (800744c <pbuf_copy+0x190>)
 80073f8:	f00b f8ae 	bl	8012558 <iprintf>
 80073fc:	f06f 0305 	mvn.w	r3, #5
 8007400:	e01b      	b.n	800743a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d013      	beq.n	8007430 <pbuf_copy+0x174>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	895a      	ldrh	r2, [r3, #10]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	891b      	ldrh	r3, [r3, #8]
 8007410:	429a      	cmp	r2, r3
 8007412:	d10d      	bne.n	8007430 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <pbuf_copy+0x174>
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <pbuf_copy+0x188>)
 800741e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007422:	490e      	ldr	r1, [pc, #56]	; (800745c <pbuf_copy+0x1a0>)
 8007424:	4809      	ldr	r0, [pc, #36]	; (800744c <pbuf_copy+0x190>)
 8007426:	f00b f897 	bl	8012558 <iprintf>
 800742a:	f06f 0305 	mvn.w	r3, #5
 800742e:	e004      	b.n	800743a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f47f af61 	bne.w	80072fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	08013c34 	.word	0x08013c34
 8007448:	08013edc 	.word	0x08013edc
 800744c:	08013c94 	.word	0x08013c94
 8007450:	08013f0c 	.word	0x08013f0c
 8007454:	08013f24 	.word	0x08013f24
 8007458:	08013f40 	.word	0x08013f40
 800745c:	08013f50 	.word	0x08013f50

08007460 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4611      	mov	r1, r2
 800746c:	461a      	mov	r2, r3
 800746e:	460b      	mov	r3, r1
 8007470:	80fb      	strh	r3, [r7, #6]
 8007472:	4613      	mov	r3, r2
 8007474:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <pbuf_copy_partial+0x36>
 8007484:	4b2b      	ldr	r3, [pc, #172]	; (8007534 <pbuf_copy_partial+0xd4>)
 8007486:	f240 420a 	movw	r2, #1034	; 0x40a
 800748a:	492b      	ldr	r1, [pc, #172]	; (8007538 <pbuf_copy_partial+0xd8>)
 800748c:	482b      	ldr	r0, [pc, #172]	; (800753c <pbuf_copy_partial+0xdc>)
 800748e:	f00b f863 	bl	8012558 <iprintf>
 8007492:	2300      	movs	r3, #0
 8007494:	e04a      	b.n	800752c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d108      	bne.n	80074ae <pbuf_copy_partial+0x4e>
 800749c:	4b25      	ldr	r3, [pc, #148]	; (8007534 <pbuf_copy_partial+0xd4>)
 800749e:	f240 420b 	movw	r2, #1035	; 0x40b
 80074a2:	4927      	ldr	r1, [pc, #156]	; (8007540 <pbuf_copy_partial+0xe0>)
 80074a4:	4825      	ldr	r0, [pc, #148]	; (800753c <pbuf_copy_partial+0xdc>)
 80074a6:	f00b f857 	bl	8012558 <iprintf>
 80074aa:	2300      	movs	r3, #0
 80074ac:	e03e      	b.n	800752c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e034      	b.n	800751e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80074b4:	88bb      	ldrh	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <pbuf_copy_partial+0x70>
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	895b      	ldrh	r3, [r3, #10]
 80074be:	88ba      	ldrh	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d305      	bcc.n	80074d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	895b      	ldrh	r3, [r3, #10]
 80074c8:	88ba      	ldrh	r2, [r7, #4]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	80bb      	strh	r3, [r7, #4]
 80074ce:	e023      	b.n	8007518 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	895a      	ldrh	r2, [r3, #10]
 80074d4:	88bb      	ldrh	r3, [r7, #4]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80074da:	8b3a      	ldrh	r2, [r7, #24]
 80074dc:	88fb      	ldrh	r3, [r7, #6]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d901      	bls.n	80074e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80074e6:	8b7b      	ldrh	r3, [r7, #26]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	18d0      	adds	r0, r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	88bb      	ldrh	r3, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	8b3a      	ldrh	r2, [r7, #24]
 80074f6:	4619      	mov	r1, r3
 80074f8:	f00b f81b 	bl	8012532 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80074fc:	8afa      	ldrh	r2, [r7, #22]
 80074fe:	8b3b      	ldrh	r3, [r7, #24]
 8007500:	4413      	add	r3, r2
 8007502:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007504:	8b7a      	ldrh	r2, [r7, #26]
 8007506:	8b3b      	ldrh	r3, [r7, #24]
 8007508:	4413      	add	r3, r2
 800750a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800750c:	88fa      	ldrh	r2, [r7, #6]
 800750e:	8b3b      	ldrh	r3, [r7, #24]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <pbuf_copy_partial+0xca>
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1c4      	bne.n	80074b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800752a:	8afb      	ldrh	r3, [r7, #22]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	08013c34 	.word	0x08013c34
 8007538:	08013f7c 	.word	0x08013f7c
 800753c:	08013c94 	.word	0x08013c94
 8007540:	08013f9c 	.word	0x08013f9c

08007544 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	603a      	str	r2, [r7, #0]
 800754e:	71fb      	strb	r3, [r7, #7]
 8007550:	460b      	mov	r3, r1
 8007552:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	8919      	ldrh	r1, [r3, #8]
 8007558:	88ba      	ldrh	r2, [r7, #4]
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff faa5 	bl	8006aac <pbuf_alloc>
 8007562:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <pbuf_clone+0x2a>
    return NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	e011      	b.n	8007592 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fea3 	bl	80072bc <pbuf_copy>
 8007576:	4603      	mov	r3, r0
 8007578:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800757a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <pbuf_clone+0x4c>
 8007582:	4b06      	ldr	r3, [pc, #24]	; (800759c <pbuf_clone+0x58>)
 8007584:	f240 5224 	movw	r2, #1316	; 0x524
 8007588:	4905      	ldr	r1, [pc, #20]	; (80075a0 <pbuf_clone+0x5c>)
 800758a:	4806      	ldr	r0, [pc, #24]	; (80075a4 <pbuf_clone+0x60>)
 800758c:	f00a ffe4 	bl	8012558 <iprintf>
  return q;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	08013c34 	.word	0x08013c34
 80075a0:	080140a8 	.word	0x080140a8
 80075a4:	08013c94 	.word	0x08013c94

080075a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80075ac:	f00a ffec 	bl	8012588 <rand>
 80075b0:	4603      	mov	r3, r0
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80075be:	b29a      	uxth	r2, r3
 80075c0:	4b01      	ldr	r3, [pc, #4]	; (80075c8 <tcp_init+0x20>)
 80075c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80075c4:	bf00      	nop
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	2000000a 	.word	0x2000000a

080075cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7d1b      	ldrb	r3, [r3, #20]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d105      	bne.n	80075e8 <tcp_free+0x1c>
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <tcp_free+0x2c>)
 80075de:	22d4      	movs	r2, #212	; 0xd4
 80075e0:	4906      	ldr	r1, [pc, #24]	; (80075fc <tcp_free+0x30>)
 80075e2:	4807      	ldr	r0, [pc, #28]	; (8007600 <tcp_free+0x34>)
 80075e4:	f00a ffb8 	bl	8012558 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	2001      	movs	r0, #1
 80075ec:	f7fe ff3e 	bl	800646c <memp_free>
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08014134 	.word	0x08014134
 80075fc:	08014164 	.word	0x08014164
 8007600:	08014178 	.word	0x08014178

08007604 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7d1b      	ldrb	r3, [r3, #20]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d105      	bne.n	8007620 <tcp_free_listen+0x1c>
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <tcp_free_listen+0x2c>)
 8007616:	22df      	movs	r2, #223	; 0xdf
 8007618:	4906      	ldr	r1, [pc, #24]	; (8007634 <tcp_free_listen+0x30>)
 800761a:	4807      	ldr	r0, [pc, #28]	; (8007638 <tcp_free_listen+0x34>)
 800761c:	f00a ff9c 	bl	8012558 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	2002      	movs	r0, #2
 8007624:	f7fe ff22 	bl	800646c <memp_free>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	08014134 	.word	0x08014134
 8007634:	080141a0 	.word	0x080141a0
 8007638:	08014178 	.word	0x08014178

0800763c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007640:	f001 f852 	bl	80086e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007644:	4b07      	ldr	r3, [pc, #28]	; (8007664 <tcp_tmr+0x28>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <tcp_tmr+0x28>)
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <tcp_tmr+0x28>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800765c:	f000 fd06 	bl	800806c <tcp_slowtmr>
  }
}
 8007660:	bf00      	nop
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000519 	.word	0x20000519

08007668 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <tcp_remove_listener+0x1c>
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <tcp_remove_listener+0x48>)
 800767a:	22ff      	movs	r2, #255	; 0xff
 800767c:	490d      	ldr	r1, [pc, #52]	; (80076b4 <tcp_remove_listener+0x4c>)
 800767e:	480e      	ldr	r0, [pc, #56]	; (80076b8 <tcp_remove_listener+0x50>)
 8007680:	f00a ff6a 	bl	8012558 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e00a      	b.n	80076a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d102      	bne.n	800769a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f1      	bne.n	800768a <tcp_remove_listener+0x22>
    }
  }
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	08014134 	.word	0x08014134
 80076b4:	080141bc 	.word	0x080141bc
 80076b8:	08014178 	.word	0x08014178

080076bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <tcp_listen_closed+0x1c>
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <tcp_listen_closed+0x60>)
 80076cc:	f240 1211 	movw	r2, #273	; 0x111
 80076d0:	4913      	ldr	r1, [pc, #76]	; (8007720 <tcp_listen_closed+0x64>)
 80076d2:	4814      	ldr	r0, [pc, #80]	; (8007724 <tcp_listen_closed+0x68>)
 80076d4:	f00a ff40 	bl	8012558 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d006      	beq.n	80076ee <tcp_listen_closed+0x32>
 80076e0:	4b0e      	ldr	r3, [pc, #56]	; (800771c <tcp_listen_closed+0x60>)
 80076e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80076e6:	4910      	ldr	r1, [pc, #64]	; (8007728 <tcp_listen_closed+0x6c>)
 80076e8:	480e      	ldr	r0, [pc, #56]	; (8007724 <tcp_listen_closed+0x68>)
 80076ea:	f00a ff35 	bl	8012558 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80076ee:	2301      	movs	r3, #1
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e00b      	b.n	800770c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80076f4:	4a0d      	ldr	r2, [pc, #52]	; (800772c <tcp_listen_closed+0x70>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff ffb1 	bl	8007668 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d9f0      	bls.n	80076f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007712:	bf00      	nop
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	08014134 	.word	0x08014134
 8007720:	080141e4 	.word	0x080141e4
 8007724:	08014178 	.word	0x08014178
 8007728:	080141f0 	.word	0x080141f0
 800772c:	080168d4 	.word	0x080168d4

08007730 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007730:	b5b0      	push	{r4, r5, r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af04      	add	r7, sp, #16
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <tcp_close_shutdown+0x20>
 8007742:	4b61      	ldr	r3, [pc, #388]	; (80078c8 <tcp_close_shutdown+0x198>)
 8007744:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007748:	4960      	ldr	r1, [pc, #384]	; (80078cc <tcp_close_shutdown+0x19c>)
 800774a:	4861      	ldr	r0, [pc, #388]	; (80078d0 <tcp_close_shutdown+0x1a0>)
 800774c:	f00a ff04 	bl	8012558 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d066      	beq.n	8007824 <tcp_close_shutdown+0xf4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7d1b      	ldrb	r3, [r3, #20]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d003      	beq.n	8007766 <tcp_close_shutdown+0x36>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7d1b      	ldrb	r3, [r3, #20]
 8007762:	2b07      	cmp	r3, #7
 8007764:	d15e      	bne.n	8007824 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <tcp_close_shutdown+0x48>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007776:	d055      	beq.n	8007824 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8b5b      	ldrh	r3, [r3, #26]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <tcp_close_shutdown+0x62>
 8007784:	4b50      	ldr	r3, [pc, #320]	; (80078c8 <tcp_close_shutdown+0x198>)
 8007786:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800778a:	4952      	ldr	r1, [pc, #328]	; (80078d4 <tcp_close_shutdown+0x1a4>)
 800778c:	4850      	ldr	r0, [pc, #320]	; (80078d0 <tcp_close_shutdown+0x1a0>)
 800778e:	f00a fee3 	bl	8012558 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800779a:	687d      	ldr	r5, [r7, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3304      	adds	r3, #4
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	8ad2      	ldrh	r2, [r2, #22]
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	8b09      	ldrh	r1, [r1, #24]
 80077a8:	9102      	str	r1, [sp, #8]
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	462b      	mov	r3, r5
 80077b0:	4622      	mov	r2, r4
 80077b2:	4601      	mov	r1, r0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f005 fd91 	bl	800d2dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fb60 	bl	8008e80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80077c0:	4b45      	ldr	r3, [pc, #276]	; (80078d8 <tcp_close_shutdown+0x1a8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d105      	bne.n	80077d6 <tcp_close_shutdown+0xa6>
 80077ca:	4b43      	ldr	r3, [pc, #268]	; (80078d8 <tcp_close_shutdown+0x1a8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	4a41      	ldr	r2, [pc, #260]	; (80078d8 <tcp_close_shutdown+0x1a8>)
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	e013      	b.n	80077fe <tcp_close_shutdown+0xce>
 80077d6:	4b40      	ldr	r3, [pc, #256]	; (80078d8 <tcp_close_shutdown+0x1a8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e00c      	b.n	80077f8 <tcp_close_shutdown+0xc8>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d104      	bne.n	80077f2 <tcp_close_shutdown+0xc2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	60da      	str	r2, [r3, #12]
 80077f0:	e005      	b.n	80077fe <tcp_close_shutdown+0xce>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1ef      	bne.n	80077de <tcp_close_shutdown+0xae>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	60da      	str	r2, [r3, #12]
 8007804:	4b35      	ldr	r3, [pc, #212]	; (80078dc <tcp_close_shutdown+0x1ac>)
 8007806:	2201      	movs	r2, #1
 8007808:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800780a:	4b35      	ldr	r3, [pc, #212]	; (80078e0 <tcp_close_shutdown+0x1b0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d102      	bne.n	800781a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007814:	f003 fff2 	bl	800b7fc <tcp_trigger_input_pcb_close>
 8007818:	e002      	b.n	8007820 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fed6 	bl	80075cc <tcp_free>
      }
      return ERR_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e04d      	b.n	80078c0 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	7d1b      	ldrb	r3, [r3, #20]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d02d      	beq.n	8007888 <tcp_close_shutdown+0x158>
 800782c:	2b02      	cmp	r3, #2
 800782e:	d036      	beq.n	800789e <tcp_close_shutdown+0x16e>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d13f      	bne.n	80078b4 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8adb      	ldrh	r3, [r3, #22]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d021      	beq.n	8007880 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <tcp_close_shutdown+0x1b4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d105      	bne.n	8007852 <tcp_close_shutdown+0x122>
 8007846:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <tcp_close_shutdown+0x1b4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	4a25      	ldr	r2, [pc, #148]	; (80078e4 <tcp_close_shutdown+0x1b4>)
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e013      	b.n	800787a <tcp_close_shutdown+0x14a>
 8007852:	4b24      	ldr	r3, [pc, #144]	; (80078e4 <tcp_close_shutdown+0x1b4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60bb      	str	r3, [r7, #8]
 8007858:	e00c      	b.n	8007874 <tcp_close_shutdown+0x144>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d104      	bne.n	800786e <tcp_close_shutdown+0x13e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	60da      	str	r2, [r3, #12]
 800786c:	e005      	b.n	800787a <tcp_close_shutdown+0x14a>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1ef      	bne.n	800785a <tcp_close_shutdown+0x12a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fea3 	bl	80075cc <tcp_free>
      break;
 8007886:	e01a      	b.n	80078be <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ff17 	bl	80076bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4815      	ldr	r0, [pc, #84]	; (80078e8 <tcp_close_shutdown+0x1b8>)
 8007892:	f001 fb45 	bl	8008f20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff feb4 	bl	8007604 <tcp_free_listen>
      break;
 800789c:	e00f      	b.n	80078be <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	480d      	ldr	r0, [pc, #52]	; (80078d8 <tcp_close_shutdown+0x1a8>)
 80078a2:	f001 fb3d 	bl	8008f20 <tcp_pcb_remove>
 80078a6:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <tcp_close_shutdown+0x1ac>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff fe8d 	bl	80075cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80078b2:	e004      	b.n	80078be <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f819 	bl	80078ec <tcp_close_shutdown_fin>
 80078ba:	4603      	mov	r3, r0
 80078bc:	e000      	b.n	80078c0 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bdb0      	pop	{r4, r5, r7, pc}
 80078c8:	08014134 	.word	0x08014134
 80078cc:	08014208 	.word	0x08014208
 80078d0:	08014178 	.word	0x08014178
 80078d4:	08014228 	.word	0x08014228
 80078d8:	20007188 	.word	0x20007188
 80078dc:	20007184 	.word	0x20007184
 80078e0:	2000719c 	.word	0x2000719c
 80078e4:	20007194 	.word	0x20007194
 80078e8:	20007190 	.word	0x20007190

080078ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <tcp_close_shutdown_fin+0x1c>
 80078fa:	4b2c      	ldr	r3, [pc, #176]	; (80079ac <tcp_close_shutdown_fin+0xc0>)
 80078fc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007900:	492b      	ldr	r1, [pc, #172]	; (80079b0 <tcp_close_shutdown_fin+0xc4>)
 8007902:	482c      	ldr	r0, [pc, #176]	; (80079b4 <tcp_close_shutdown_fin+0xc8>)
 8007904:	f00a fe28 	bl	8012558 <iprintf>

  switch (pcb->state) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7d1b      	ldrb	r3, [r3, #20]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d010      	beq.n	8007932 <tcp_close_shutdown_fin+0x46>
 8007910:	2b07      	cmp	r3, #7
 8007912:	d01b      	beq.n	800794c <tcp_close_shutdown_fin+0x60>
 8007914:	2b03      	cmp	r3, #3
 8007916:	d126      	bne.n	8007966 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f004 fddb 	bl	800c4d4 <tcp_send_fin>
 800791e:	4603      	mov	r3, r0
 8007920:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11f      	bne.n	800796a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2205      	movs	r2, #5
 800792e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007930:	e01b      	b.n	800796a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f004 fdce 	bl	800c4d4 <tcp_send_fin>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800793c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d114      	bne.n	800796e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2205      	movs	r2, #5
 8007948:	751a      	strb	r2, [r3, #20]
      }
      break;
 800794a:	e010      	b.n	800796e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f004 fdc1 	bl	800c4d4 <tcp_send_fin>
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2209      	movs	r2, #9
 8007962:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007964:	e005      	b.n	8007972 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	e01c      	b.n	80079a4 <tcp_close_shutdown_fin+0xb8>
      break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <tcp_close_shutdown_fin+0x88>
      break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <tcp_close_shutdown_fin+0x88>
      break;
 8007972:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f004 fee7 	bl	800c750 <tcp_output>
 8007982:	e00d      	b.n	80079a0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d108      	bne.n	80079a0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8b5b      	ldrh	r3, [r3, #26]
 8007992:	f043 0308 	orr.w	r3, r3, #8
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e001      	b.n	80079a4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80079a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08014134 	.word	0x08014134
 80079b0:	080141e4 	.word	0x080141e4
 80079b4:	08014178 	.word	0x08014178

080079b8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d109      	bne.n	80079da <tcp_close+0x22>
 80079c6:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <tcp_close+0x4c>)
 80079c8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80079cc:	490e      	ldr	r1, [pc, #56]	; (8007a08 <tcp_close+0x50>)
 80079ce:	480f      	ldr	r0, [pc, #60]	; (8007a0c <tcp_close+0x54>)
 80079d0:	f00a fdc2 	bl	8012558 <iprintf>
 80079d4:	f06f 030f 	mvn.w	r3, #15
 80079d8:	e00f      	b.n	80079fa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7d1b      	ldrb	r3, [r3, #20]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d006      	beq.n	80079f0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8b5b      	ldrh	r3, [r3, #26]
 80079e6:	f043 0310 	orr.w	r3, r3, #16
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80079f0:	2101      	movs	r1, #1
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fe9c 	bl	8007730 <tcp_close_shutdown>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	08014134 	.word	0x08014134
 8007a08:	08014244 	.word	0x08014244
 8007a0c:	08014178 	.word	0x08014178

08007a10 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08e      	sub	sp, #56	; 0x38
 8007a14:	af04      	add	r7, sp, #16
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d107      	bne.n	8007a30 <tcp_abandon+0x20>
 8007a20:	4b52      	ldr	r3, [pc, #328]	; (8007b6c <tcp_abandon+0x15c>)
 8007a22:	f240 223d 	movw	r2, #573	; 0x23d
 8007a26:	4952      	ldr	r1, [pc, #328]	; (8007b70 <tcp_abandon+0x160>)
 8007a28:	4852      	ldr	r0, [pc, #328]	; (8007b74 <tcp_abandon+0x164>)
 8007a2a:	f00a fd95 	bl	8012558 <iprintf>
 8007a2e:	e099      	b.n	8007b64 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7d1b      	ldrb	r3, [r3, #20]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <tcp_abandon+0x36>
 8007a38:	4b4c      	ldr	r3, [pc, #304]	; (8007b6c <tcp_abandon+0x15c>)
 8007a3a:	f240 2241 	movw	r2, #577	; 0x241
 8007a3e:	494e      	ldr	r1, [pc, #312]	; (8007b78 <tcp_abandon+0x168>)
 8007a40:	484c      	ldr	r0, [pc, #304]	; (8007b74 <tcp_abandon+0x164>)
 8007a42:	f00a fd89 	bl	8012558 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	7d1b      	ldrb	r3, [r3, #20]
 8007a4a:	2b0a      	cmp	r3, #10
 8007a4c:	d107      	bne.n	8007a5e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	484a      	ldr	r0, [pc, #296]	; (8007b7c <tcp_abandon+0x16c>)
 8007a52:	f001 fa65 	bl	8008f20 <tcp_pcb_remove>
    tcp_free(pcb);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fdb8 	bl	80075cc <tcp_free>
 8007a5c:	e082      	b.n	8007b64 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a78:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	7d1b      	ldrb	r3, [r3, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d126      	bne.n	8007ad6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8adb      	ldrh	r3, [r3, #22]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d02e      	beq.n	8007aee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a90:	4b3b      	ldr	r3, [pc, #236]	; (8007b80 <tcp_abandon+0x170>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d105      	bne.n	8007aa6 <tcp_abandon+0x96>
 8007a9a:	4b39      	ldr	r3, [pc, #228]	; (8007b80 <tcp_abandon+0x170>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	4a37      	ldr	r2, [pc, #220]	; (8007b80 <tcp_abandon+0x170>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	e013      	b.n	8007ace <tcp_abandon+0xbe>
 8007aa6:	4b36      	ldr	r3, [pc, #216]	; (8007b80 <tcp_abandon+0x170>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	61fb      	str	r3, [r7, #28]
 8007aac:	e00c      	b.n	8007ac8 <tcp_abandon+0xb8>
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d104      	bne.n	8007ac2 <tcp_abandon+0xb2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	60da      	str	r2, [r3, #12]
 8007ac0:	e005      	b.n	8007ace <tcp_abandon+0xbe>
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1ef      	bne.n	8007aae <tcp_abandon+0x9e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	e00b      	b.n	8007aee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8adb      	ldrh	r3, [r3, #22]
 8007ade:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4828      	ldr	r0, [pc, #160]	; (8007b84 <tcp_abandon+0x174>)
 8007ae4:	f001 fa1c 	bl	8008f20 <tcp_pcb_remove>
 8007ae8:	4b27      	ldr	r3, [pc, #156]	; (8007b88 <tcp_abandon+0x178>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fed4 	bl	80088a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fecb 	bl	80088a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fec2 	bl	80088a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	8b12      	ldrh	r2, [r2, #24]
 8007b34:	9202      	str	r2, [sp, #8]
 8007b36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f005 fbca 	bl	800d2dc <tcp_rst>
    }
    last_state = pcb->state;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7d1b      	ldrb	r3, [r3, #20]
 8007b4c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fd3c 	bl	80075cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <tcp_abandon+0x154>
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f06f 010c 	mvn.w	r1, #12
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	4798      	blx	r3
  }
}
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	08014134 	.word	0x08014134
 8007b70:	08014278 	.word	0x08014278
 8007b74:	08014178 	.word	0x08014178
 8007b78:	08014294 	.word	0x08014294
 8007b7c:	20007198 	.word	0x20007198
 8007b80:	20007194 	.word	0x20007194
 8007b84:	20007188 	.word	0x20007188
 8007b88:	20007184 	.word	0x20007184

08007b8c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007b94:	2101      	movs	r1, #1
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff ff3a 	bl	8007a10 <tcp_abandon>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007bb2:	2304      	movs	r3, #4
 8007bb4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007bbc:	4b3e      	ldr	r3, [pc, #248]	; (8007cb8 <tcp_bind+0x114>)
 8007bbe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <tcp_bind+0x36>
 8007bc6:	4b3d      	ldr	r3, [pc, #244]	; (8007cbc <tcp_bind+0x118>)
 8007bc8:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007bcc:	493c      	ldr	r1, [pc, #240]	; (8007cc0 <tcp_bind+0x11c>)
 8007bce:	483d      	ldr	r0, [pc, #244]	; (8007cc4 <tcp_bind+0x120>)
 8007bd0:	f00a fcc2 	bl	8012558 <iprintf>
 8007bd4:	f06f 030f 	mvn.w	r3, #15
 8007bd8:	e06a      	b.n	8007cb0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	7d1b      	ldrb	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <tcp_bind+0x52>
 8007be2:	4b36      	ldr	r3, [pc, #216]	; (8007cbc <tcp_bind+0x118>)
 8007be4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007be8:	4937      	ldr	r1, [pc, #220]	; (8007cc8 <tcp_bind+0x124>)
 8007bea:	4836      	ldr	r0, [pc, #216]	; (8007cc4 <tcp_bind+0x120>)
 8007bec:	f00a fcb4 	bl	8012558 <iprintf>
 8007bf0:	f06f 0305 	mvn.w	r3, #5
 8007bf4:	e05c      	b.n	8007cb0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007bfc:	f000 f9f0 	bl	8007fe0 <tcp_new_port>
 8007c00:	4603      	mov	r3, r0
 8007c02:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d135      	bne.n	8007c76 <tcp_bind+0xd2>
      return ERR_BUF;
 8007c0a:	f06f 0301 	mvn.w	r3, #1
 8007c0e:	e04f      	b.n	8007cb0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	e02b      	b.n	8007c6e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c16:	4a2d      	ldr	r2, [pc, #180]	; (8007ccc <tcp_bind+0x128>)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e01e      	b.n	8007c62 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	8adb      	ldrh	r3, [r3, #22]
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d116      	bne.n	8007c5c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007c2e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d010      	beq.n	8007c56 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00c      	beq.n	8007c56 <tcp_bind+0xb2>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d102      	bne.n	8007c5c <tcp_bind+0xb8>
              return ERR_USE;
 8007c56:	f06f 0307 	mvn.w	r3, #7
 8007c5a:	e029      	b.n	8007cb0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1dd      	bne.n	8007c24 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	dbcf      	blt.n	8007c16 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00c      	beq.n	8007c96 <tcp_bind+0xf2>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <tcp_bind+0xec>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	e000      	b.n	8007c92 <tcp_bind+0xee>
 8007c90:	2300      	movs	r3, #0
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	88fa      	ldrh	r2, [r7, #6]
 8007c9a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <tcp_bind+0x12c>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	60da      	str	r2, [r3, #12]
 8007ca4:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <tcp_bind+0x12c>)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	f005 fcd9 	bl	800d660 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3720      	adds	r7, #32
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	0801690c 	.word	0x0801690c
 8007cbc:	08014134 	.word	0x08014134
 8007cc0:	080142c8 	.word	0x080142c8
 8007cc4:	08014178 	.word	0x08014178
 8007cc8:	080142e0 	.word	0x080142e0
 8007ccc:	080168d4 	.word	0x080168d4
 8007cd0:	20007194 	.word	0x20007194

08007cd4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <tcp_accept_null+0x22>
 8007ce8:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <tcp_accept_null+0x34>)
 8007cea:	f240 320f 	movw	r2, #783	; 0x30f
 8007cee:	4907      	ldr	r1, [pc, #28]	; (8007d0c <tcp_accept_null+0x38>)
 8007cf0:	4807      	ldr	r0, [pc, #28]	; (8007d10 <tcp_accept_null+0x3c>)
 8007cf2:	f00a fc31 	bl	8012558 <iprintf>

  tcp_abort(pcb);
 8007cf6:	68b8      	ldr	r0, [r7, #8]
 8007cf8:	f7ff ff48 	bl	8007b8c <tcp_abort>

  return ERR_ABRT;
 8007cfc:	f06f 030c 	mvn.w	r3, #12
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08014134 	.word	0x08014134
 8007d0c:	08014308 	.word	0x08014308
 8007d10:	08014178 	.word	0x08014178

08007d14 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	2200      	movs	r2, #0
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f806 	bl	8007d38 <tcp_listen_with_backlog_and_err>
 8007d2c:	4603      	mov	r3, r0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	460b      	mov	r3, r1
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <tcp_listen_with_backlog_and_err+0x2c>
 8007d50:	4b47      	ldr	r3, [pc, #284]	; (8007e70 <tcp_listen_with_backlog_and_err+0x138>)
 8007d52:	f240 3259 	movw	r2, #857	; 0x359
 8007d56:	4947      	ldr	r1, [pc, #284]	; (8007e74 <tcp_listen_with_backlog_and_err+0x13c>)
 8007d58:	4847      	ldr	r0, [pc, #284]	; (8007e78 <tcp_listen_with_backlog_and_err+0x140>)
 8007d5a:	f00a fbfd 	bl	8012558 <iprintf>
 8007d5e:	23f0      	movs	r3, #240	; 0xf0
 8007d60:	76fb      	strb	r3, [r7, #27]
 8007d62:	e079      	b.n	8007e58 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7d1b      	ldrb	r3, [r3, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d009      	beq.n	8007d80 <tcp_listen_with_backlog_and_err+0x48>
 8007d6c:	4b40      	ldr	r3, [pc, #256]	; (8007e70 <tcp_listen_with_backlog_and_err+0x138>)
 8007d6e:	f240 325a 	movw	r2, #858	; 0x35a
 8007d72:	4942      	ldr	r1, [pc, #264]	; (8007e7c <tcp_listen_with_backlog_and_err+0x144>)
 8007d74:	4840      	ldr	r0, [pc, #256]	; (8007e78 <tcp_listen_with_backlog_and_err+0x140>)
 8007d76:	f00a fbef 	bl	8012558 <iprintf>
 8007d7a:	23f1      	movs	r3, #241	; 0xf1
 8007d7c:	76fb      	strb	r3, [r7, #27]
 8007d7e:	e06b      	b.n	8007e58 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	7d1b      	ldrb	r3, [r3, #20]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d104      	bne.n	8007d92 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007d8c:	23f7      	movs	r3, #247	; 0xf7
 8007d8e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007d90:	e062      	b.n	8007e58 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007d92:	2002      	movs	r0, #2
 8007d94:	f7fe fb1e 	bl	80063d4 <memp_malloc>
 8007d98:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007da0:	23ff      	movs	r3, #255	; 0xff
 8007da2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007da4:	e058      	b.n	8007e58 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8ada      	ldrh	r2, [r3, #22]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	2201      	movs	r2, #1
 8007dba:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	7d5a      	ldrb	r2, [r3, #21]
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	7a5a      	ldrb	r2, [r3, #9]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	7ada      	ldrb	r2, [r3, #11]
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	7a9a      	ldrb	r2, [r3, #10]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8adb      	ldrh	r3, [r3, #22]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d021      	beq.n	8007e36 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007df2:	4b23      	ldr	r3, [pc, #140]	; (8007e80 <tcp_listen_with_backlog_and_err+0x148>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d105      	bne.n	8007e08 <tcp_listen_with_backlog_and_err+0xd0>
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <tcp_listen_with_backlog_and_err+0x148>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <tcp_listen_with_backlog_and_err+0x148>)
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	e013      	b.n	8007e30 <tcp_listen_with_backlog_and_err+0xf8>
 8007e08:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <tcp_listen_with_backlog_and_err+0x148>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	e00c      	b.n	8007e2a <tcp_listen_with_backlog_and_err+0xf2>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d104      	bne.n	8007e24 <tcp_listen_with_backlog_and_err+0xec>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	60da      	str	r2, [r3, #12]
 8007e22:	e005      	b.n	8007e30 <tcp_listen_with_backlog_and_err+0xf8>
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1ef      	bne.n	8007e10 <tcp_listen_with_backlog_and_err+0xd8>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fbc8 	bl	80075cc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	4a11      	ldr	r2, [pc, #68]	; (8007e84 <tcp_listen_with_backlog_and_err+0x14c>)
 8007e40:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007e42:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <tcp_listen_with_backlog_and_err+0x150>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	4a0f      	ldr	r2, [pc, #60]	; (8007e88 <tcp_listen_with_backlog_and_err+0x150>)
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	f005 fc06 	bl	800d660 <tcp_timer_needed>
  res = ERR_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7efa      	ldrb	r2, [r7, #27]
 8007e62:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007e64:	69fb      	ldr	r3, [r7, #28]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	08014134 	.word	0x08014134
 8007e74:	08014328 	.word	0x08014328
 8007e78:	08014178 	.word	0x08014178
 8007e7c:	08014358 	.word	0x08014358
 8007e80:	20007194 	.word	0x20007194
 8007e84:	08007cd5 	.word	0x08007cd5
 8007e88:	20007190 	.word	0x20007190

08007e8c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <tcp_update_rcv_ann_wnd+0x1c>
 8007e9a:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <tcp_update_rcv_ann_wnd+0xa4>)
 8007e9c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007ea0:	4924      	ldr	r1, [pc, #144]	; (8007f34 <tcp_update_rcv_ann_wnd+0xa8>)
 8007ea2:	4825      	ldr	r0, [pc, #148]	; (8007f38 <tcp_update_rcv_ann_wnd+0xac>)
 8007ea4:	f00a fb58 	bl	8012558 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007eb0:	4413      	add	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007ebc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007ec0:	bf28      	it	cs
 8007ec2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007ec6:	b292      	uxth	r2, r2
 8007ec8:	4413      	add	r3, r2
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	db08      	blt.n	8007ee4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	e020      	b.n	8007f26 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd03      	ble.n	8007efa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ef8:	e014      	b.n	8007f24 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0c:	d306      	bcc.n	8007f1c <tcp_update_rcv_ann_wnd+0x90>
 8007f0e:	4b08      	ldr	r3, [pc, #32]	; (8007f30 <tcp_update_rcv_ann_wnd+0xa4>)
 8007f10:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007f14:	4909      	ldr	r1, [pc, #36]	; (8007f3c <tcp_update_rcv_ann_wnd+0xb0>)
 8007f16:	4808      	ldr	r0, [pc, #32]	; (8007f38 <tcp_update_rcv_ann_wnd+0xac>)
 8007f18:	f00a fb1e 	bl	8012558 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007f24:	2300      	movs	r3, #0
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	08014134 	.word	0x08014134
 8007f34:	08014390 	.word	0x08014390
 8007f38:	08014178 	.word	0x08014178
 8007f3c:	080143b4 	.word	0x080143b4

08007f40 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d107      	bne.n	8007f62 <tcp_recved+0x22>
 8007f52:	4b1f      	ldr	r3, [pc, #124]	; (8007fd0 <tcp_recved+0x90>)
 8007f54:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007f58:	491e      	ldr	r1, [pc, #120]	; (8007fd4 <tcp_recved+0x94>)
 8007f5a:	481f      	ldr	r0, [pc, #124]	; (8007fd8 <tcp_recved+0x98>)
 8007f5c:	f00a fafc 	bl	8012558 <iprintf>
 8007f60:	e032      	b.n	8007fc8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	7d1b      	ldrb	r3, [r3, #20]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d106      	bne.n	8007f78 <tcp_recved+0x38>
 8007f6a:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <tcp_recved+0x90>)
 8007f6c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007f70:	491a      	ldr	r1, [pc, #104]	; (8007fdc <tcp_recved+0x9c>)
 8007f72:	4819      	ldr	r0, [pc, #100]	; (8007fd8 <tcp_recved+0x98>)
 8007f74:	f00a faf0 	bl	8012558 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f7c:	887b      	ldrh	r3, [r7, #2]
 8007f7e:	4413      	add	r3, r2
 8007f80:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007f82:	89fb      	ldrh	r3, [r7, #14]
 8007f84:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f88:	d804      	bhi.n	8007f94 <tcp_recved+0x54>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8e:	89fa      	ldrh	r2, [r7, #14]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d204      	bcs.n	8007f9e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007f9c:	e002      	b.n	8007fa4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	89fa      	ldrh	r2, [r7, #14]
 8007fa2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff ff71 	bl	8007e8c <tcp_update_rcv_ann_wnd>
 8007faa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007fb2:	d309      	bcc.n	8007fc8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8b5b      	ldrh	r3, [r3, #26]
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f004 fbc4 	bl	800c750 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	08014134 	.word	0x08014134
 8007fd4:	080143d0 	.word	0x080143d0
 8007fd8:	08014178 	.word	0x08014178
 8007fdc:	080143e8 	.word	0x080143e8

08007fe0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007fea:	4b1e      	ldr	r3, [pc, #120]	; (8008064 <tcp_new_port+0x84>)
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <tcp_new_port+0x84>)
 8007ff4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007ff6:	4b1b      	ldr	r3, [pc, #108]	; (8008064 <tcp_new_port+0x84>)
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d103      	bne.n	800800a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008002:	4b18      	ldr	r3, [pc, #96]	; (8008064 <tcp_new_port+0x84>)
 8008004:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008008:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800800a:	2300      	movs	r3, #0
 800800c:	71fb      	strb	r3, [r7, #7]
 800800e:	e01e      	b.n	800804e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	4a15      	ldr	r2, [pc, #84]	; (8008068 <tcp_new_port+0x88>)
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	e011      	b.n	8008042 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	8ada      	ldrh	r2, [r3, #22]
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <tcp_new_port+0x84>)
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d108      	bne.n	800803c <tcp_new_port+0x5c>
        n++;
 800802a:	88bb      	ldrh	r3, [r7, #4]
 800802c:	3301      	adds	r3, #1
 800802e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008030:	88bb      	ldrh	r3, [r7, #4]
 8008032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008036:	d3d8      	bcc.n	8007fea <tcp_new_port+0xa>
          return 0;
 8008038:	2300      	movs	r3, #0
 800803a:	e00d      	b.n	8008058 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1ea      	bne.n	800801e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	3301      	adds	r3, #1
 800804c:	71fb      	strb	r3, [r7, #7]
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b03      	cmp	r3, #3
 8008052:	d9dd      	bls.n	8008010 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008054:	4b03      	ldr	r3, [pc, #12]	; (8008064 <tcp_new_port+0x84>)
 8008056:	881b      	ldrh	r3, [r3, #0]
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	2000000a 	.word	0x2000000a
 8008068:	080168d4 	.word	0x080168d4

0800806c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800806c:	b5b0      	push	{r4, r5, r7, lr}
 800806e:	b090      	sub	sp, #64	; 0x40
 8008070:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008078:	4b94      	ldr	r3, [pc, #592]	; (80082cc <tcp_slowtmr+0x260>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	4a93      	ldr	r2, [pc, #588]	; (80082cc <tcp_slowtmr+0x260>)
 8008080:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008082:	4b93      	ldr	r3, [pc, #588]	; (80082d0 <tcp_slowtmr+0x264>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	3301      	adds	r3, #1
 8008088:	b2da      	uxtb	r2, r3
 800808a:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <tcp_slowtmr+0x264>)
 800808c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008092:	4b90      	ldr	r3, [pc, #576]	; (80082d4 <tcp_slowtmr+0x268>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008098:	e29d      	b.n	80085d6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	7d1b      	ldrb	r3, [r3, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <tcp_slowtmr+0x44>
 80080a2:	4b8d      	ldr	r3, [pc, #564]	; (80082d8 <tcp_slowtmr+0x26c>)
 80080a4:	f240 42be 	movw	r2, #1214	; 0x4be
 80080a8:	498c      	ldr	r1, [pc, #560]	; (80082dc <tcp_slowtmr+0x270>)
 80080aa:	488d      	ldr	r0, [pc, #564]	; (80082e0 <tcp_slowtmr+0x274>)
 80080ac:	f00a fa54 	bl	8012558 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	7d1b      	ldrb	r3, [r3, #20]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d106      	bne.n	80080c6 <tcp_slowtmr+0x5a>
 80080b8:	4b87      	ldr	r3, [pc, #540]	; (80082d8 <tcp_slowtmr+0x26c>)
 80080ba:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80080be:	4989      	ldr	r1, [pc, #548]	; (80082e4 <tcp_slowtmr+0x278>)
 80080c0:	4887      	ldr	r0, [pc, #540]	; (80082e0 <tcp_slowtmr+0x274>)
 80080c2:	f00a fa49 	bl	8012558 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	7d1b      	ldrb	r3, [r3, #20]
 80080ca:	2b0a      	cmp	r3, #10
 80080cc:	d106      	bne.n	80080dc <tcp_slowtmr+0x70>
 80080ce:	4b82      	ldr	r3, [pc, #520]	; (80082d8 <tcp_slowtmr+0x26c>)
 80080d0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80080d4:	4984      	ldr	r1, [pc, #528]	; (80082e8 <tcp_slowtmr+0x27c>)
 80080d6:	4882      	ldr	r0, [pc, #520]	; (80082e0 <tcp_slowtmr+0x274>)
 80080d8:	f00a fa3e 	bl	8012558 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	7f9a      	ldrb	r2, [r3, #30]
 80080e0:	4b7b      	ldr	r3, [pc, #492]	; (80082d0 <tcp_slowtmr+0x264>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d105      	bne.n	80080f4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80080f2:	e270      	b.n	80085d6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80080f4:	4b76      	ldr	r3, [pc, #472]	; (80082d0 <tcp_slowtmr+0x264>)
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	7d1b      	ldrb	r3, [r3, #20]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d10a      	bne.n	8008126 <tcp_slowtmr+0xba>
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008116:	2b05      	cmp	r3, #5
 8008118:	d905      	bls.n	8008126 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800811a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800811e:	3301      	adds	r3, #1
 8008120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008124:	e11e      	b.n	8008364 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800812c:	2b0b      	cmp	r3, #11
 800812e:	d905      	bls.n	800813c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008134:	3301      	adds	r3, #1
 8008136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800813a:	e113      	b.n	8008364 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008142:	2b00      	cmp	r3, #0
 8008144:	d075      	beq.n	8008232 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <tcp_slowtmr+0xf0>
 800814e:	4b62      	ldr	r3, [pc, #392]	; (80082d8 <tcp_slowtmr+0x26c>)
 8008150:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008154:	4965      	ldr	r1, [pc, #404]	; (80082ec <tcp_slowtmr+0x280>)
 8008156:	4862      	ldr	r0, [pc, #392]	; (80082e0 <tcp_slowtmr+0x274>)
 8008158:	f00a f9fe 	bl	8012558 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <tcp_slowtmr+0x106>
 8008164:	4b5c      	ldr	r3, [pc, #368]	; (80082d8 <tcp_slowtmr+0x26c>)
 8008166:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800816a:	4961      	ldr	r1, [pc, #388]	; (80082f0 <tcp_slowtmr+0x284>)
 800816c:	485c      	ldr	r0, [pc, #368]	; (80082e0 <tcp_slowtmr+0x274>)
 800816e:	f00a f9f3 	bl	8012558 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d905      	bls.n	8008188 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800817c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008180:	3301      	adds	r3, #1
 8008182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008186:	e0ed      	b.n	8008364 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800818e:	3b01      	subs	r3, #1
 8008190:	4a58      	ldr	r2, [pc, #352]	; (80082f4 <tcp_slowtmr+0x288>)
 8008192:	5cd3      	ldrb	r3, [r2, r3]
 8008194:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800819c:	7c7a      	ldrb	r2, [r7, #17]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d907      	bls.n	80081b2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80081b8:	7c7a      	ldrb	r2, [r7, #17]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	f200 80d2 	bhi.w	8008364 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80081c0:	2301      	movs	r3, #1
 80081c2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d108      	bne.n	80081e0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80081ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081d0:	f005 f978 	bl	800d4c4 <tcp_zero_window_probe>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d014      	beq.n	8008204 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80081da:	2300      	movs	r3, #0
 80081dc:	623b      	str	r3, [r7, #32]
 80081de:	e011      	b.n	8008204 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081e6:	4619      	mov	r1, r3
 80081e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ea:	f004 f82b 	bl	800c244 <tcp_split_unsent_seg>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80081f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081f6:	f004 faab 	bl	800c750 <tcp_output>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80ac 	beq.w	8008364 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800821a:	2b06      	cmp	r3, #6
 800821c:	f200 80a2 	bhi.w	8008364 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008226:	3301      	adds	r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008230:	e098      	b.n	8008364 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008238:	2b00      	cmp	r3, #0
 800823a:	db0f      	blt.n	800825c <tcp_slowtmr+0x1f0>
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008242:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008246:	4293      	cmp	r3, r2
 8008248:	d008      	beq.n	800825c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008250:	b29b      	uxth	r3, r3
 8008252:	3301      	adds	r3, #1
 8008254:	b29b      	uxth	r3, r3
 8008256:	b21a      	sxth	r2, r3
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008268:	429a      	cmp	r2, r3
 800826a:	db7b      	blt.n	8008364 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800826c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800826e:	f004 fd67 	bl	800cd40 <tcp_rexmit_rto_prepare>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <tcp_slowtmr+0x21c>
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	2b00      	cmp	r3, #0
 800827e:	d171      	bne.n	8008364 <tcp_slowtmr+0x2f8>
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d06d      	beq.n	8008364 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	7d1b      	ldrb	r3, [r3, #20]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d03a      	beq.n	8008306 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008296:	2b0c      	cmp	r3, #12
 8008298:	bf28      	it	cs
 800829a:	230c      	movcs	r3, #12
 800829c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80082a4:	10db      	asrs	r3, r3, #3
 80082a6:	b21b      	sxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80082b0:	4413      	add	r3, r2
 80082b2:	7efa      	ldrb	r2, [r7, #27]
 80082b4:	4910      	ldr	r1, [pc, #64]	; (80082f8 <tcp_slowtmr+0x28c>)
 80082b6:	5c8a      	ldrb	r2, [r1, r2]
 80082b8:	4093      	lsls	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80082c2:	4293      	cmp	r3, r2
 80082c4:	dc1a      	bgt.n	80082fc <tcp_slowtmr+0x290>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	b21a      	sxth	r2, r3
 80082ca:	e019      	b.n	8008300 <tcp_slowtmr+0x294>
 80082cc:	2000718c 	.word	0x2000718c
 80082d0:	2000051a 	.word	0x2000051a
 80082d4:	20007188 	.word	0x20007188
 80082d8:	08014134 	.word	0x08014134
 80082dc:	08014478 	.word	0x08014478
 80082e0:	08014178 	.word	0x08014178
 80082e4:	080144a4 	.word	0x080144a4
 80082e8:	080144d0 	.word	0x080144d0
 80082ec:	08014500 	.word	0x08014500
 80082f0:	08014534 	.word	0x08014534
 80082f4:	080168cc 	.word	0x080168cc
 80082f8:	080168bc 	.word	0x080168bc
 80082fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	2200      	movs	r2, #0
 800830a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800830c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008318:	4293      	cmp	r3, r2
 800831a:	bf28      	it	cs
 800831c:	4613      	movcs	r3, r2
 800831e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	b29b      	uxth	r3, r3
 800833a:	429a      	cmp	r2, r3
 800833c:	d206      	bcs.n	800834c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	b29a      	uxth	r2, r3
 8008346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008348:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	2200      	movs	r2, #0
 800835a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800835e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008360:	f004 fd5e 	bl	800ce20 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	7d1b      	ldrb	r3, [r3, #20]
 8008368:	2b06      	cmp	r3, #6
 800836a:	d111      	bne.n	8008390 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	8b5b      	ldrh	r3, [r3, #26]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008378:	4b9c      	ldr	r3, [pc, #624]	; (80085ec <tcp_slowtmr+0x580>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b28      	cmp	r3, #40	; 0x28
 8008384:	d904      	bls.n	8008390 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800838a:	3301      	adds	r3, #1
 800838c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	7a5b      	ldrb	r3, [r3, #9]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d04a      	beq.n	8008432 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d003      	beq.n	80083ac <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80083a8:	2b07      	cmp	r3, #7
 80083aa:	d142      	bne.n	8008432 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083ac:	4b8f      	ldr	r3, [pc, #572]	; (80085ec <tcp_slowtmr+0x580>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80083bc:	4b8c      	ldr	r3, [pc, #560]	; (80085f0 <tcp_slowtmr+0x584>)
 80083be:	440b      	add	r3, r1
 80083c0:	498c      	ldr	r1, [pc, #560]	; (80085f4 <tcp_slowtmr+0x588>)
 80083c2:	fba1 1303 	umull	r1, r3, r1, r3
 80083c6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d90a      	bls.n	80083e2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80083cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d0:	3301      	adds	r3, #1
 80083d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80083d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083da:	3301      	adds	r3, #1
 80083dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80083e0:	e027      	b.n	8008432 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083e2:	4b82      	ldr	r3, [pc, #520]	; (80085ec <tcp_slowtmr+0x580>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80083f8:	4618      	mov	r0, r3
 80083fa:	4b7f      	ldr	r3, [pc, #508]	; (80085f8 <tcp_slowtmr+0x58c>)
 80083fc:	fb03 f300 	mul.w	r3, r3, r0
 8008400:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008402:	497c      	ldr	r1, [pc, #496]	; (80085f4 <tcp_slowtmr+0x588>)
 8008404:	fba1 1303 	umull	r1, r3, r1, r3
 8008408:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800840a:	429a      	cmp	r2, r3
 800840c:	d911      	bls.n	8008432 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800840e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008410:	f005 f818 	bl	800d444 <tcp_keepalive>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800841a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800841e:	2b00      	cmp	r3, #0
 8008420:	d107      	bne.n	8008432 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008428:	3301      	adds	r3, #1
 800842a:	b2da      	uxtb	r2, r3
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008436:	2b00      	cmp	r3, #0
 8008438:	d011      	beq.n	800845e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800843a:	4b6c      	ldr	r3, [pc, #432]	; (80085ec <tcp_slowtmr+0x580>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	1ad2      	subs	r2, r2, r3
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800844a:	4619      	mov	r1, r3
 800844c:	460b      	mov	r3, r1
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	440b      	add	r3, r1
 8008452:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008454:	429a      	cmp	r2, r3
 8008456:	d302      	bcc.n	800845e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800845a:	f000 fec5 	bl	80091e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	7d1b      	ldrb	r3, [r3, #20]
 8008462:	2b03      	cmp	r3, #3
 8008464:	d10b      	bne.n	800847e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008466:	4b61      	ldr	r3, [pc, #388]	; (80085ec <tcp_slowtmr+0x580>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b28      	cmp	r3, #40	; 0x28
 8008472:	d904      	bls.n	800847e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008478:	3301      	adds	r3, #1
 800847a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	7d1b      	ldrb	r3, [r3, #20]
 8008482:	2b09      	cmp	r3, #9
 8008484:	d10b      	bne.n	800849e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <tcp_slowtmr+0x580>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2bf0      	cmp	r3, #240	; 0xf0
 8008492:	d904      	bls.n	800849e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008498:	3301      	adds	r3, #1
 800849a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800849e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d060      	beq.n	8008568 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ac:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80084ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b0:	f000 fce6 	bl	8008e80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d010      	beq.n	80084dc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80084ba:	4b50      	ldr	r3, [pc, #320]	; (80085fc <tcp_slowtmr+0x590>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d106      	bne.n	80084d2 <tcp_slowtmr+0x466>
 80084c4:	4b4e      	ldr	r3, [pc, #312]	; (8008600 <tcp_slowtmr+0x594>)
 80084c6:	f240 526d 	movw	r2, #1389	; 0x56d
 80084ca:	494e      	ldr	r1, [pc, #312]	; (8008604 <tcp_slowtmr+0x598>)
 80084cc:	484e      	ldr	r0, [pc, #312]	; (8008608 <tcp_slowtmr+0x59c>)
 80084ce:	f00a f843 	bl	8012558 <iprintf>
        prev->next = pcb->next;
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	60da      	str	r2, [r3, #12]
 80084da:	e00f      	b.n	80084fc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80084dc:	4b47      	ldr	r3, [pc, #284]	; (80085fc <tcp_slowtmr+0x590>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d006      	beq.n	80084f4 <tcp_slowtmr+0x488>
 80084e6:	4b46      	ldr	r3, [pc, #280]	; (8008600 <tcp_slowtmr+0x594>)
 80084e8:	f240 5271 	movw	r2, #1393	; 0x571
 80084ec:	4947      	ldr	r1, [pc, #284]	; (800860c <tcp_slowtmr+0x5a0>)
 80084ee:	4846      	ldr	r0, [pc, #280]	; (8008608 <tcp_slowtmr+0x59c>)
 80084f0:	f00a f832 	bl	8012558 <iprintf>
        tcp_active_pcbs = pcb->next;
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4a40      	ldr	r2, [pc, #256]	; (80085fc <tcp_slowtmr+0x590>)
 80084fa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80084fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008500:	2b00      	cmp	r3, #0
 8008502:	d013      	beq.n	800852c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800850c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	3304      	adds	r3, #4
 8008512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008514:	8ad2      	ldrh	r2, [r2, #22]
 8008516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008518:	8b09      	ldrh	r1, [r1, #24]
 800851a:	9102      	str	r1, [sp, #8]
 800851c:	9201      	str	r2, [sp, #4]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	462b      	mov	r3, r5
 8008522:	4622      	mov	r2, r4
 8008524:	4601      	mov	r1, r0
 8008526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008528:	f004 fed8 	bl	800d2dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	7d1b      	ldrb	r3, [r3, #20]
 8008536:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008542:	6838      	ldr	r0, [r7, #0]
 8008544:	f7ff f842 	bl	80075cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008548:	4b31      	ldr	r3, [pc, #196]	; (8008610 <tcp_slowtmr+0x5a4>)
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <tcp_slowtmr+0x4f2>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f06f 010c 	mvn.w	r1, #12
 800855a:	68b8      	ldr	r0, [r7, #8]
 800855c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800855e:	4b2c      	ldr	r3, [pc, #176]	; (8008610 <tcp_slowtmr+0x5a4>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d037      	beq.n	80085d6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008566:	e592      	b.n	800808e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	7f1b      	ldrb	r3, [r3, #28]
 8008576:	3301      	adds	r3, #1
 8008578:	b2da      	uxtb	r2, r3
 800857a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	7f1a      	ldrb	r2, [r3, #28]
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	7f5b      	ldrb	r3, [r3, #29]
 8008586:	429a      	cmp	r2, r3
 8008588:	d325      	bcc.n	80085d6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008590:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <tcp_slowtmr+0x5a4>)
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <tcp_slowtmr+0x54c>
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a8:	6912      	ldr	r2, [r2, #16]
 80085aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80085b6:	e002      	b.n	80085be <tcp_slowtmr+0x552>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80085be:	4b14      	ldr	r3, [pc, #80]	; (8008610 <tcp_slowtmr+0x5a4>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d000      	beq.n	80085c8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80085c6:	e562      	b.n	800808e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80085c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80085d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d2:	f004 f8bd 	bl	800c750 <tcp_output>
  while (pcb != NULL) {
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f47f ad5e 	bne.w	800809a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <tcp_slowtmr+0x5a8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80085e8:	e069      	b.n	80086be <tcp_slowtmr+0x652>
 80085ea:	bf00      	nop
 80085ec:	2000718c 	.word	0x2000718c
 80085f0:	000a4cb8 	.word	0x000a4cb8
 80085f4:	10624dd3 	.word	0x10624dd3
 80085f8:	000124f8 	.word	0x000124f8
 80085fc:	20007188 	.word	0x20007188
 8008600:	08014134 	.word	0x08014134
 8008604:	0801456c 	.word	0x0801456c
 8008608:	08014178 	.word	0x08014178
 800860c:	08014598 	.word	0x08014598
 8008610:	20007184 	.word	0x20007184
 8008614:	20007198 	.word	0x20007198
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	7d1b      	ldrb	r3, [r3, #20]
 800861c:	2b0a      	cmp	r3, #10
 800861e:	d006      	beq.n	800862e <tcp_slowtmr+0x5c2>
 8008620:	4b2a      	ldr	r3, [pc, #168]	; (80086cc <tcp_slowtmr+0x660>)
 8008622:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008626:	492a      	ldr	r1, [pc, #168]	; (80086d0 <tcp_slowtmr+0x664>)
 8008628:	482a      	ldr	r0, [pc, #168]	; (80086d4 <tcp_slowtmr+0x668>)
 800862a:	f009 ff95 	bl	8012558 <iprintf>
    pcb_remove = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008634:	4b28      	ldr	r3, [pc, #160]	; (80086d8 <tcp_slowtmr+0x66c>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2bf0      	cmp	r3, #240	; 0xf0
 8008640:	d904      	bls.n	800864c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008646:	3301      	adds	r3, #1
 8008648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800864c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008650:	2b00      	cmp	r3, #0
 8008652:	d02f      	beq.n	80086b4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008656:	f000 fc13 	bl	8008e80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d010      	beq.n	8008682 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008660:	4b1e      	ldr	r3, [pc, #120]	; (80086dc <tcp_slowtmr+0x670>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008666:	429a      	cmp	r2, r3
 8008668:	d106      	bne.n	8008678 <tcp_slowtmr+0x60c>
 800866a:	4b18      	ldr	r3, [pc, #96]	; (80086cc <tcp_slowtmr+0x660>)
 800866c:	f240 52af 	movw	r2, #1455	; 0x5af
 8008670:	491b      	ldr	r1, [pc, #108]	; (80086e0 <tcp_slowtmr+0x674>)
 8008672:	4818      	ldr	r0, [pc, #96]	; (80086d4 <tcp_slowtmr+0x668>)
 8008674:	f009 ff70 	bl	8012558 <iprintf>
        prev->next = pcb->next;
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	60da      	str	r2, [r3, #12]
 8008680:	e00f      	b.n	80086a2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008682:	4b16      	ldr	r3, [pc, #88]	; (80086dc <tcp_slowtmr+0x670>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008688:	429a      	cmp	r2, r3
 800868a:	d006      	beq.n	800869a <tcp_slowtmr+0x62e>
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <tcp_slowtmr+0x660>)
 800868e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008692:	4914      	ldr	r1, [pc, #80]	; (80086e4 <tcp_slowtmr+0x678>)
 8008694:	480f      	ldr	r0, [pc, #60]	; (80086d4 <tcp_slowtmr+0x668>)
 8008696:	f009 ff5f 	bl	8012558 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	4a0f      	ldr	r2, [pc, #60]	; (80086dc <tcp_slowtmr+0x670>)
 80086a0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80086ac:	69f8      	ldr	r0, [r7, #28]
 80086ae:	f7fe ff8d 	bl	80075cc <tcp_free>
 80086b2:	e004      	b.n	80086be <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1a9      	bne.n	8008618 <tcp_slowtmr+0x5ac>
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	3730      	adds	r7, #48	; 0x30
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bdb0      	pop	{r4, r5, r7, pc}
 80086cc:	08014134 	.word	0x08014134
 80086d0:	080145c4 	.word	0x080145c4
 80086d4:	08014178 	.word	0x08014178
 80086d8:	2000718c 	.word	0x2000718c
 80086dc:	20007198 	.word	0x20007198
 80086e0:	080145f4 	.word	0x080145f4
 80086e4:	0801461c 	.word	0x0801461c

080086e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80086ee:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <tcp_fasttmr+0xbc>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <tcp_fasttmr+0xbc>)
 80086f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80086fa:	4b2b      	ldr	r3, [pc, #172]	; (80087a8 <tcp_fasttmr+0xc0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008700:	e048      	b.n	8008794 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7f9a      	ldrb	r2, [r3, #30]
 8008706:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <tcp_fasttmr+0xbc>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d03f      	beq.n	800878e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800870e:	4b25      	ldr	r3, [pc, #148]	; (80087a4 <tcp_fasttmr+0xbc>)
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	8b5b      	ldrh	r3, [r3, #26]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d010      	beq.n	8008744 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	8b5b      	ldrh	r3, [r3, #26]
 8008726:	f043 0302 	orr.w	r3, r3, #2
 800872a:	b29a      	uxth	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f004 f80d 	bl	800c750 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8b5b      	ldrh	r3, [r3, #26]
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	b29a      	uxth	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8b5b      	ldrh	r3, [r3, #26]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d009      	beq.n	8008764 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8b5b      	ldrh	r3, [r3, #26]
 8008754:	f023 0308 	bic.w	r3, r3, #8
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff f8c4 	bl	80078ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008772:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <tcp_fasttmr+0xc4>)
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f819 	bl	80087b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800877e:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <tcp_fasttmr+0xc4>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d000      	beq.n	8008788 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008786:	e7b8      	b.n	80086fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	607b      	str	r3, [r7, #4]
 800878c:	e002      	b.n	8008794 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1b3      	bne.n	8008702 <tcp_fasttmr+0x1a>
    }
  }
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	2000051a 	.word	0x2000051a
 80087a8:	20007188 	.word	0x20007188
 80087ac:	20007184 	.word	0x20007184

080087b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <tcp_process_refused_data+0x22>
 80087be:	4b37      	ldr	r3, [pc, #220]	; (800889c <tcp_process_refused_data+0xec>)
 80087c0:	f240 6209 	movw	r2, #1545	; 0x609
 80087c4:	4936      	ldr	r1, [pc, #216]	; (80088a0 <tcp_process_refused_data+0xf0>)
 80087c6:	4837      	ldr	r0, [pc, #220]	; (80088a4 <tcp_process_refused_data+0xf4>)
 80087c8:	f009 fec6 	bl	8012558 <iprintf>
 80087cc:	f06f 030f 	mvn.w	r3, #15
 80087d0:	e060      	b.n	8008894 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087d6:	7b5b      	ldrb	r3, [r3, #13]
 80087d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <tcp_process_refused_data+0x58>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6918      	ldr	r0, [r3, #16]
 80087fa:	2300      	movs	r3, #0
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	47a0      	blx	r4
 8008802:	4603      	mov	r3, r0
 8008804:	73fb      	strb	r3, [r7, #15]
 8008806:	e007      	b.n	8008818 <tcp_process_refused_data+0x68>
 8008808:	2300      	movs	r3, #0
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	2000      	movs	r0, #0
 8008810:	f000 f8c0 	bl	8008994 <tcp_recv_null>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d12a      	bne.n	8008876 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d033      	beq.n	8008892 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008832:	d005      	beq.n	8008840 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008838:	3301      	adds	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <tcp_process_refused_data+0xb2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6918      	ldr	r0, [r3, #16]
 8008854:	2300      	movs	r3, #0
 8008856:	2200      	movs	r2, #0
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	47a0      	blx	r4
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
 8008860:	e001      	b.n	8008866 <tcp_process_refused_data+0xb6>
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800886a:	f113 0f0d 	cmn.w	r3, #13
 800886e:	d110      	bne.n	8008892 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008870:	f06f 030c 	mvn.w	r3, #12
 8008874:	e00e      	b.n	8008894 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887a:	f113 0f0d 	cmn.w	r3, #13
 800887e:	d102      	bne.n	8008886 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008880:	f06f 030c 	mvn.w	r3, #12
 8008884:	e006      	b.n	8008894 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800888c:	f06f 0304 	mvn.w	r3, #4
 8008890:	e000      	b.n	8008894 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	bd90      	pop	{r4, r7, pc}
 800889c:	08014134 	.word	0x08014134
 80088a0:	08014644 	.word	0x08014644
 80088a4:	08014178 	.word	0x08014178

080088a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80088b0:	e007      	b.n	80088c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f809 	bl	80088d0 <tcp_seg_free>
    seg = next;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f4      	bne.n	80088b2 <tcp_segs_free+0xa>
  }
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00c      	beq.n	80088f8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fbbe 	bl	800706c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	2003      	movs	r0, #3
 80088f4:	f7fd fdba 	bl	800646c <memp_free>
  }
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d107      	bne.n	8008922 <tcp_setprio+0x22>
 8008912:	4b07      	ldr	r3, [pc, #28]	; (8008930 <tcp_setprio+0x30>)
 8008914:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008918:	4906      	ldr	r1, [pc, #24]	; (8008934 <tcp_setprio+0x34>)
 800891a:	4807      	ldr	r0, [pc, #28]	; (8008938 <tcp_setprio+0x38>)
 800891c:	f009 fe1c 	bl	8012558 <iprintf>
 8008920:	e002      	b.n	8008928 <tcp_setprio+0x28>

  pcb->prio = prio;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	755a      	strb	r2, [r3, #21]
}
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	08014134 	.word	0x08014134
 8008934:	0801466c 	.word	0x0801466c
 8008938:	08014178 	.word	0x08014178

0800893c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d106      	bne.n	8008958 <tcp_seg_copy+0x1c>
 800894a:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <tcp_seg_copy+0x4c>)
 800894c:	f240 6282 	movw	r2, #1666	; 0x682
 8008950:	490e      	ldr	r1, [pc, #56]	; (800898c <tcp_seg_copy+0x50>)
 8008952:	480f      	ldr	r0, [pc, #60]	; (8008990 <tcp_seg_copy+0x54>)
 8008954:	f009 fe00 	bl	8012558 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008958:	2003      	movs	r0, #3
 800895a:	f7fd fd3b 	bl	80063d4 <memp_malloc>
 800895e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <tcp_seg_copy+0x2e>
    return NULL;
 8008966:	2300      	movs	r3, #0
 8008968:	e00a      	b.n	8008980 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800896a:	2210      	movs	r2, #16
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f009 fddf 	bl	8012532 <memcpy>
  pbuf_ref(cseg->p);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fc17 	bl	80071ac <pbuf_ref>
  return cseg;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	08014134 	.word	0x08014134
 800898c:	08014688 	.word	0x08014688
 8008990:	08014178 	.word	0x08014178

08008994 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <tcp_recv_null+0x28>
 80089a8:	4b12      	ldr	r3, [pc, #72]	; (80089f4 <tcp_recv_null+0x60>)
 80089aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80089ae:	4912      	ldr	r1, [pc, #72]	; (80089f8 <tcp_recv_null+0x64>)
 80089b0:	4812      	ldr	r0, [pc, #72]	; (80089fc <tcp_recv_null+0x68>)
 80089b2:	f009 fdd1 	bl	8012558 <iprintf>
 80089b6:	f06f 030f 	mvn.w	r3, #15
 80089ba:	e016      	b.n	80089ea <tcp_recv_null+0x56>

  if (p != NULL) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	891b      	ldrh	r3, [r3, #8]
 80089c6:	4619      	mov	r1, r3
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f7ff fab9 	bl	8007f40 <tcp_recved>
    pbuf_free(p);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7fe fb4c 	bl	800706c <pbuf_free>
 80089d4:	e008      	b.n	80089e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80089d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80089de:	68b8      	ldr	r0, [r7, #8]
 80089e0:	f7fe ffea 	bl	80079b8 <tcp_close>
 80089e4:	4603      	mov	r3, r0
 80089e6:	e000      	b.n	80089ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	08014134 	.word	0x08014134
 80089f8:	080146a4 	.word	0x080146a4
 80089fc:	08014178 	.word	0x08014178

08008a00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	db01      	blt.n	8008a16 <tcp_kill_prio+0x16>
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	e000      	b.n	8008a18 <tcp_kill_prio+0x18>
 8008a16:	237f      	movs	r3, #127	; 0x7f
 8008a18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d034      	beq.n	8008a8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a2e:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <tcp_kill_prio+0x94>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e01f      	b.n	8008a76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	7d5b      	ldrb	r3, [r3, #21]
 8008a3a:	7afa      	ldrb	r2, [r7, #11]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d80c      	bhi.n	8008a5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008a44:	7afa      	ldrb	r2, [r7, #11]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d112      	bne.n	8008a70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008a4a:	4b13      	ldr	r3, [pc, #76]	; (8008a98 <tcp_kill_prio+0x98>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d80a      	bhi.n	8008a70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008a5a:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <tcp_kill_prio+0x98>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	7d5b      	ldrb	r3, [r3, #21]
 8008a6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1dc      	bne.n	8008a36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d004      	beq.n	8008a8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008a82:	6938      	ldr	r0, [r7, #16]
 8008a84:	f7ff f882 	bl	8007b8c <tcp_abort>
 8008a88:	e000      	b.n	8008a8c <tcp_kill_prio+0x8c>
    return;
 8008a8a:	bf00      	nop
  }
}
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20007188 	.word	0x20007188
 8008a98:	2000718c 	.word	0x2000718c

08008a9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	2b08      	cmp	r3, #8
 8008aaa:	d009      	beq.n	8008ac0 <tcp_kill_state+0x24>
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	2b09      	cmp	r3, #9
 8008ab0:	d006      	beq.n	8008ac0 <tcp_kill_state+0x24>
 8008ab2:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <tcp_kill_state+0x80>)
 8008ab4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008ab8:	4919      	ldr	r1, [pc, #100]	; (8008b20 <tcp_kill_state+0x84>)
 8008aba:	481a      	ldr	r0, [pc, #104]	; (8008b24 <tcp_kill_state+0x88>)
 8008abc:	f009 fd4c 	bl	8012558 <iprintf>

  inactivity = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ac8:	4b17      	ldr	r3, [pc, #92]	; (8008b28 <tcp_kill_state+0x8c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	e017      	b.n	8008b00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	7d1b      	ldrb	r3, [r3, #20]
 8008ad4:	79fa      	ldrb	r2, [r7, #7]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d10f      	bne.n	8008afa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ada:	4b14      	ldr	r3, [pc, #80]	; (8008b2c <tcp_kill_state+0x90>)
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d807      	bhi.n	8008afa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008aea:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <tcp_kill_state+0x90>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e4      	bne.n	8008ad0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	6938      	ldr	r0, [r7, #16]
 8008b10:	f7fe ff7e 	bl	8007a10 <tcp_abandon>
  }
}
 8008b14:	bf00      	nop
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	08014134 	.word	0x08014134
 8008b20:	080146c0 	.word	0x080146c0
 8008b24:	08014178 	.word	0x08014178
 8008b28:	20007188 	.word	0x20007188
 8008b2c:	2000718c 	.word	0x2000718c

08008b30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b3e:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <tcp_kill_timewait+0x58>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e012      	b.n	8008b6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <tcp_kill_timewait+0x5c>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d807      	bhi.n	8008b66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <tcp_kill_timewait+0x5c>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e9      	bne.n	8008b46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008b78:	68b8      	ldr	r0, [r7, #8]
 8008b7a:	f7ff f807 	bl	8007b8c <tcp_abort>
  }
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20007198 	.word	0x20007198
 8008b8c:	2000718c 	.word	0x2000718c

08008b90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <tcp_handle_closepend+0x48>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008b9c:	e014      	b.n	8008bc8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8b5b      	ldrh	r3, [r3, #26]
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d009      	beq.n	8008bc4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	8b5b      	ldrh	r3, [r3, #26]
 8008bb4:	f023 0308 	bic.w	r3, r3, #8
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7fe fe94 	bl	80078ec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e7      	bne.n	8008b9e <tcp_handle_closepend+0xe>
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20007188 	.word	0x20007188

08008bdc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008be6:	2001      	movs	r0, #1
 8008be8:	f7fd fbf4 	bl	80063d4 <memp_malloc>
 8008bec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d126      	bne.n	8008c42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008bf4:	f7ff ffcc 	bl	8008b90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008bf8:	f7ff ff9a 	bl	8008b30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	f7fd fbe9 	bl	80063d4 <memp_malloc>
 8008c02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11b      	bne.n	8008c42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008c0a:	2009      	movs	r0, #9
 8008c0c:	f7ff ff46 	bl	8008a9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c10:	2001      	movs	r0, #1
 8008c12:	f7fd fbdf 	bl	80063d4 <memp_malloc>
 8008c16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d111      	bne.n	8008c42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008c1e:	2008      	movs	r0, #8
 8008c20:	f7ff ff3c 	bl	8008a9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c24:	2001      	movs	r0, #1
 8008c26:	f7fd fbd5 	bl	80063d4 <memp_malloc>
 8008c2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d107      	bne.n	8008c42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fee3 	bl	8008a00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	f7fd fbca 	bl	80063d4 <memp_malloc>
 8008c40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d03f      	beq.n	8008cc8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008c48:	229c      	movs	r2, #156	; 0x9c
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f009 fc7b 	bl	8012548 <memset>
    pcb->prio = prio;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	79fa      	ldrb	r2, [r7, #7]
 8008c56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008c5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008c7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2206      	movs	r2, #6
 8008c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2206      	movs	r2, #6
 8008c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <tcp_alloc+0xf8>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <tcp_alloc+0xfc>)
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008cb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <tcp_alloc+0x100>)
 8008cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4a07      	ldr	r2, [pc, #28]	; (8008ce0 <tcp_alloc+0x104>)
 8008cc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	2000718c 	.word	0x2000718c
 8008cd8:	2000051a 	.word	0x2000051a
 8008cdc:	08008995 	.word	0x08008995
 8008ce0:	006ddd00 	.word	0x006ddd00

08008ce4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008cee:	2040      	movs	r0, #64	; 0x40
 8008cf0:	f7ff ff74 	bl	8008bdc <tcp_alloc>
 8008cf4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	611a      	str	r2, [r3, #16]
  }
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00e      	beq.n	8008d52 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7d1b      	ldrb	r3, [r3, #20]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <tcp_recv+0x26>
 8008d3c:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <tcp_recv+0x38>)
 8008d3e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008d42:	4907      	ldr	r1, [pc, #28]	; (8008d60 <tcp_recv+0x3c>)
 8008d44:	4807      	ldr	r0, [pc, #28]	; (8008d64 <tcp_recv+0x40>)
 8008d46:	f009 fc07 	bl	8012558 <iprintf>
    pcb->recv = recv;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08014134 	.word	0x08014134
 8008d60:	080146d0 	.word	0x080146d0
 8008d64:	08014178 	.word	0x08014178

08008d68 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00e      	beq.n	8008d96 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7d1b      	ldrb	r3, [r3, #20]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d106      	bne.n	8008d8e <tcp_sent+0x26>
 8008d80:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <tcp_sent+0x38>)
 8008d82:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008d86:	4907      	ldr	r1, [pc, #28]	; (8008da4 <tcp_sent+0x3c>)
 8008d88:	4807      	ldr	r0, [pc, #28]	; (8008da8 <tcp_sent+0x40>)
 8008d8a:	f009 fbe5 	bl	8012558 <iprintf>
    pcb->sent = sent;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	08014134 	.word	0x08014134
 8008da4:	080146f8 	.word	0x080146f8
 8008da8:	08014178 	.word	0x08014178

08008dac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d106      	bne.n	8008dd2 <tcp_err+0x26>
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <tcp_err+0x38>)
 8008dc6:	f640 020d 	movw	r2, #2061	; 0x80d
 8008dca:	4907      	ldr	r1, [pc, #28]	; (8008de8 <tcp_err+0x3c>)
 8008dcc:	4807      	ldr	r0, [pc, #28]	; (8008dec <tcp_err+0x40>)
 8008dce:	f009 fbc3 	bl	8012558 <iprintf>
    pcb->errf = err;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	08014134 	.word	0x08014134
 8008de8:	08014720 	.word	0x08014720
 8008dec:	08014178 	.word	0x08014178

08008df0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d008      	beq.n	8008e12 <tcp_accept+0x22>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7d1b      	ldrb	r3, [r3, #20]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d104      	bne.n	8008e12 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	619a      	str	r2, [r3, #24]
  }
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d107      	bne.n	8008e44 <tcp_poll+0x24>
 8008e34:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <tcp_poll+0x50>)
 8008e36:	f640 023d 	movw	r2, #2109	; 0x83d
 8008e3a:	490e      	ldr	r1, [pc, #56]	; (8008e74 <tcp_poll+0x54>)
 8008e3c:	480e      	ldr	r0, [pc, #56]	; (8008e78 <tcp_poll+0x58>)
 8008e3e:	f009 fb8b 	bl	8012558 <iprintf>
 8008e42:	e011      	b.n	8008e68 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	7d1b      	ldrb	r3, [r3, #20]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d106      	bne.n	8008e5a <tcp_poll+0x3a>
 8008e4c:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <tcp_poll+0x50>)
 8008e4e:	f640 023e 	movw	r2, #2110	; 0x83e
 8008e52:	490a      	ldr	r1, [pc, #40]	; (8008e7c <tcp_poll+0x5c>)
 8008e54:	4808      	ldr	r0, [pc, #32]	; (8008e78 <tcp_poll+0x58>)
 8008e56:	f009 fb7f 	bl	8012558 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	79fa      	ldrb	r2, [r7, #7]
 8008e66:	775a      	strb	r2, [r3, #29]
}
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	08014134 	.word	0x08014134
 8008e74:	08014748 	.word	0x08014748
 8008e78:	08014178 	.word	0x08014178
 8008e7c:	08014760 	.word	0x08014760

08008e80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d107      	bne.n	8008e9e <tcp_pcb_purge+0x1e>
 8008e8e:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <tcp_pcb_purge+0x94>)
 8008e90:	f640 0251 	movw	r2, #2129	; 0x851
 8008e94:	4920      	ldr	r1, [pc, #128]	; (8008f18 <tcp_pcb_purge+0x98>)
 8008e96:	4821      	ldr	r0, [pc, #132]	; (8008f1c <tcp_pcb_purge+0x9c>)
 8008e98:	f009 fb5e 	bl	8012558 <iprintf>
 8008e9c:	e037      	b.n	8008f0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7d1b      	ldrb	r3, [r3, #20]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d033      	beq.n	8008f0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008eaa:	2b0a      	cmp	r3, #10
 8008eac:	d02f      	beq.n	8008f0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d02b      	beq.n	8008f0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe f8d2 	bl	800706c <pbuf_free>
      pcb->refused_data = NULL;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f986 	bl	80091e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ee2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fcdd 	bl	80088a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff fcd8 	bl	80088a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	66da      	str	r2, [r3, #108]	; 0x6c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	08014134 	.word	0x08014134
 8008f18:	08014780 	.word	0x08014780
 8008f1c:	08014178 	.word	0x08014178

08008f20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d106      	bne.n	8008f3e <tcp_pcb_remove+0x1e>
 8008f30:	4b3e      	ldr	r3, [pc, #248]	; (800902c <tcp_pcb_remove+0x10c>)
 8008f32:	f640 0283 	movw	r2, #2179	; 0x883
 8008f36:	493e      	ldr	r1, [pc, #248]	; (8009030 <tcp_pcb_remove+0x110>)
 8008f38:	483e      	ldr	r0, [pc, #248]	; (8009034 <tcp_pcb_remove+0x114>)
 8008f3a:	f009 fb0d 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <tcp_pcb_remove+0x32>
 8008f44:	4b39      	ldr	r3, [pc, #228]	; (800902c <tcp_pcb_remove+0x10c>)
 8008f46:	f640 0284 	movw	r2, #2180	; 0x884
 8008f4a:	493b      	ldr	r1, [pc, #236]	; (8009038 <tcp_pcb_remove+0x118>)
 8008f4c:	4839      	ldr	r0, [pc, #228]	; (8009034 <tcp_pcb_remove+0x114>)
 8008f4e:	f009 fb03 	bl	8012558 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d105      	bne.n	8008f68 <tcp_pcb_remove+0x48>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e013      	b.n	8008f90 <tcp_pcb_remove+0x70>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e00c      	b.n	8008f8a <tcp_pcb_remove+0x6a>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d104      	bne.n	8008f84 <tcp_pcb_remove+0x64>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	e005      	b.n	8008f90 <tcp_pcb_remove+0x70>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1ef      	bne.n	8008f70 <tcp_pcb_remove+0x50>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008f96:	6838      	ldr	r0, [r7, #0]
 8008f98:	f7ff ff72 	bl	8008e80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	7d1b      	ldrb	r3, [r3, #20]
 8008fa0:	2b0a      	cmp	r3, #10
 8008fa2:	d013      	beq.n	8008fcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d00f      	beq.n	8008fcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	8b5b      	ldrh	r3, [r3, #26]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	8b5b      	ldrh	r3, [r3, #26]
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fc6:	6838      	ldr	r0, [r7, #0]
 8008fc8:	f003 fbc2 	bl	800c750 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	7d1b      	ldrb	r3, [r3, #20]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d020      	beq.n	8009016 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <tcp_pcb_remove+0xca>
 8008fdc:	4b13      	ldr	r3, [pc, #76]	; (800902c <tcp_pcb_remove+0x10c>)
 8008fde:	f640 0293 	movw	r2, #2195	; 0x893
 8008fe2:	4916      	ldr	r1, [pc, #88]	; (800903c <tcp_pcb_remove+0x11c>)
 8008fe4:	4813      	ldr	r0, [pc, #76]	; (8009034 <tcp_pcb_remove+0x114>)
 8008fe6:	f009 fab7 	bl	8012558 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <tcp_pcb_remove+0xe0>
 8008ff2:	4b0e      	ldr	r3, [pc, #56]	; (800902c <tcp_pcb_remove+0x10c>)
 8008ff4:	f640 0294 	movw	r2, #2196	; 0x894
 8008ff8:	4911      	ldr	r1, [pc, #68]	; (8009040 <tcp_pcb_remove+0x120>)
 8008ffa:	480e      	ldr	r0, [pc, #56]	; (8009034 <tcp_pcb_remove+0x114>)
 8008ffc:	f009 faac 	bl	8012558 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <tcp_pcb_remove+0xf6>
 8009008:	4b08      	ldr	r3, [pc, #32]	; (800902c <tcp_pcb_remove+0x10c>)
 800900a:	f640 0296 	movw	r2, #2198	; 0x896
 800900e:	490d      	ldr	r1, [pc, #52]	; (8009044 <tcp_pcb_remove+0x124>)
 8009010:	4808      	ldr	r0, [pc, #32]	; (8009034 <tcp_pcb_remove+0x114>)
 8009012:	f009 faa1 	bl	8012558 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	08014134 	.word	0x08014134
 8009030:	0801479c 	.word	0x0801479c
 8009034:	08014178 	.word	0x08014178
 8009038:	080147b8 	.word	0x080147b8
 800903c:	080147d8 	.word	0x080147d8
 8009040:	080147f0 	.word	0x080147f0
 8009044:	0801480c 	.word	0x0801480c

08009048 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <tcp_next_iss+0x1c>
 8009056:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <tcp_next_iss+0x38>)
 8009058:	f640 02af 	movw	r2, #2223	; 0x8af
 800905c:	4909      	ldr	r1, [pc, #36]	; (8009084 <tcp_next_iss+0x3c>)
 800905e:	480a      	ldr	r0, [pc, #40]	; (8009088 <tcp_next_iss+0x40>)
 8009060:	f009 fa7a 	bl	8012558 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <tcp_next_iss+0x44>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4b09      	ldr	r3, [pc, #36]	; (8009090 <tcp_next_iss+0x48>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4413      	add	r3, r2
 800906e:	4a07      	ldr	r2, [pc, #28]	; (800908c <tcp_next_iss+0x44>)
 8009070:	6013      	str	r3, [r2, #0]
  return iss;
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <tcp_next_iss+0x44>)
 8009074:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	08014134 	.word	0x08014134
 8009084:	08014824 	.word	0x08014824
 8009088:	08014178 	.word	0x08014178
 800908c:	2000000c 	.word	0x2000000c
 8009090:	2000718c 	.word	0x2000718c

08009094 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <tcp_eff_send_mss_netif+0x22>
 80090a8:	4b14      	ldr	r3, [pc, #80]	; (80090fc <tcp_eff_send_mss_netif+0x68>)
 80090aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80090ae:	4914      	ldr	r1, [pc, #80]	; (8009100 <tcp_eff_send_mss_netif+0x6c>)
 80090b0:	4814      	ldr	r0, [pc, #80]	; (8009104 <tcp_eff_send_mss_netif+0x70>)
 80090b2:	f009 fa51 	bl	8012558 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80090bc:	89fb      	ldrh	r3, [r7, #14]
 80090be:	e019      	b.n	80090f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80090c6:	8afb      	ldrh	r3, [r7, #22]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d012      	beq.n	80090f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80090cc:	2328      	movs	r3, #40	; 0x28
 80090ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80090d0:	8afa      	ldrh	r2, [r7, #22]
 80090d2:	8abb      	ldrh	r3, [r7, #20]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d904      	bls.n	80090e2 <tcp_eff_send_mss_netif+0x4e>
 80090d8:	8afa      	ldrh	r2, [r7, #22]
 80090da:	8abb      	ldrh	r3, [r7, #20]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	b29b      	uxth	r3, r3
 80090e0:	e000      	b.n	80090e4 <tcp_eff_send_mss_netif+0x50>
 80090e2:	2300      	movs	r3, #0
 80090e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80090e6:	8a7a      	ldrh	r2, [r7, #18]
 80090e8:	89fb      	ldrh	r3, [r7, #14]
 80090ea:	4293      	cmp	r3, r2
 80090ec:	bf28      	it	cs
 80090ee:	4613      	movcs	r3, r2
 80090f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80090f2:	89fb      	ldrh	r3, [r7, #14]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	08014134 	.word	0x08014134
 8009100:	08014840 	.word	0x08014840
 8009104:	08014178 	.word	0x08014178

08009108 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d119      	bne.n	8009150 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800911c:	4b10      	ldr	r3, [pc, #64]	; (8009160 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800911e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009122:	4910      	ldr	r1, [pc, #64]	; (8009164 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009124:	4810      	ldr	r0, [pc, #64]	; (8009168 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009126:	f009 fa17 	bl	8012558 <iprintf>

  while (pcb != NULL) {
 800912a:	e011      	b.n	8009150 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d108      	bne.n	800914a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7fe fd24 	bl	8007b8c <tcp_abort>
      pcb = next;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e002      	b.n	8009150 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1ea      	bne.n	800912c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	08014134 	.word	0x08014134
 8009164:	08014868 	.word	0x08014868
 8009168:	08014178 	.word	0x08014178

0800916c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d02a      	beq.n	80091d2 <tcp_netif_ip_addr_changed+0x66>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d026      	beq.n	80091d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009184:	4b15      	ldr	r3, [pc, #84]	; (80091dc <tcp_netif_ip_addr_changed+0x70>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff ffbc 	bl	8009108 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009190:	4b13      	ldr	r3, [pc, #76]	; (80091e0 <tcp_netif_ip_addr_changed+0x74>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff ffb6 	bl	8009108 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d017      	beq.n	80091d2 <tcp_netif_ip_addr_changed+0x66>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d013      	beq.n	80091d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80091aa:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <tcp_netif_ip_addr_changed+0x78>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e00c      	b.n	80091cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d103      	bne.n	80091c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1ef      	bne.n	80091b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20007188 	.word	0x20007188
 80091e0:	20007194 	.word	0x20007194
 80091e4:	20007190 	.word	0x20007190

080091e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fb53 	bl	80088a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b08d      	sub	sp, #52	; 0x34
 8009214:	af04      	add	r7, sp, #16
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d105      	bne.n	800922c <tcp_input+0x1c>
 8009220:	4b9b      	ldr	r3, [pc, #620]	; (8009490 <tcp_input+0x280>)
 8009222:	2283      	movs	r2, #131	; 0x83
 8009224:	499b      	ldr	r1, [pc, #620]	; (8009494 <tcp_input+0x284>)
 8009226:	489c      	ldr	r0, [pc, #624]	; (8009498 <tcp_input+0x288>)
 8009228:	f009 f996 	bl	8012558 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4a9a      	ldr	r2, [pc, #616]	; (800949c <tcp_input+0x28c>)
 8009232:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	895b      	ldrh	r3, [r3, #10]
 8009238:	2b13      	cmp	r3, #19
 800923a:	f240 83c4 	bls.w	80099c6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800923e:	4b98      	ldr	r3, [pc, #608]	; (80094a0 <tcp_input+0x290>)
 8009240:	695a      	ldr	r2, [r3, #20]
 8009242:	4b97      	ldr	r3, [pc, #604]	; (80094a0 <tcp_input+0x290>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f008 f9f3 	bl	8011634 <ip4_addr_isbroadcast_u32>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f040 83ba 	bne.w	80099ca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009256:	4b92      	ldr	r3, [pc, #584]	; (80094a0 <tcp_input+0x290>)
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800925e:	2be0      	cmp	r3, #224	; 0xe0
 8009260:	f000 83b3 	beq.w	80099ca <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009264:	4b8d      	ldr	r3, [pc, #564]	; (800949c <tcp_input+0x28c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	899b      	ldrh	r3, [r3, #12]
 800926a:	b29b      	uxth	r3, r3
 800926c:	4618      	mov	r0, r3
 800926e:	f7fc fc25 	bl	8005abc <lwip_htons>
 8009272:	4603      	mov	r3, r0
 8009274:	0b1b      	lsrs	r3, r3, #12
 8009276:	b29b      	uxth	r3, r3
 8009278:	b2db      	uxtb	r3, r3
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800927e:	7cbb      	ldrb	r3, [r7, #18]
 8009280:	2b13      	cmp	r3, #19
 8009282:	f240 83a2 	bls.w	80099ca <tcp_input+0x7ba>
 8009286:	7cbb      	ldrb	r3, [r7, #18]
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	891b      	ldrh	r3, [r3, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	f200 839b 	bhi.w	80099ca <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009294:	7cbb      	ldrb	r3, [r7, #18]
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b14      	subs	r3, #20
 800929a:	b29a      	uxth	r2, r3
 800929c:	4b81      	ldr	r3, [pc, #516]	; (80094a4 <tcp_input+0x294>)
 800929e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80092a0:	4b81      	ldr	r3, [pc, #516]	; (80094a8 <tcp_input+0x298>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	895a      	ldrh	r2, [r3, #10]
 80092aa:	7cbb      	ldrb	r3, [r7, #18]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d309      	bcc.n	80092c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80092b2:	4b7c      	ldr	r3, [pc, #496]	; (80094a4 <tcp_input+0x294>)
 80092b4:	881a      	ldrh	r2, [r3, #0]
 80092b6:	4b7d      	ldr	r3, [pc, #500]	; (80094ac <tcp_input+0x29c>)
 80092b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80092ba:	7cbb      	ldrb	r3, [r7, #18]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7fd fe4e 	bl	8006f60 <pbuf_remove_header>
 80092c4:	e04e      	b.n	8009364 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <tcp_input+0xca>
 80092ce:	4b70      	ldr	r3, [pc, #448]	; (8009490 <tcp_input+0x280>)
 80092d0:	22c2      	movs	r2, #194	; 0xc2
 80092d2:	4977      	ldr	r1, [pc, #476]	; (80094b0 <tcp_input+0x2a0>)
 80092d4:	4870      	ldr	r0, [pc, #448]	; (8009498 <tcp_input+0x288>)
 80092d6:	f009 f93f 	bl	8012558 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80092da:	2114      	movs	r1, #20
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7fd fe3f 	bl	8006f60 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	895a      	ldrh	r2, [r3, #10]
 80092e6:	4b71      	ldr	r3, [pc, #452]	; (80094ac <tcp_input+0x29c>)
 80092e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80092ea:	4b6e      	ldr	r3, [pc, #440]	; (80094a4 <tcp_input+0x294>)
 80092ec:	881a      	ldrh	r2, [r3, #0]
 80092ee:	4b6f      	ldr	r3, [pc, #444]	; (80094ac <tcp_input+0x29c>)
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80092f6:	4b6d      	ldr	r3, [pc, #436]	; (80094ac <tcp_input+0x29c>)
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7fd fe2f 	bl	8006f60 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	895b      	ldrh	r3, [r3, #10]
 8009308:	8a3a      	ldrh	r2, [r7, #16]
 800930a:	429a      	cmp	r2, r3
 800930c:	f200 835f 	bhi.w	80099ce <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	4a64      	ldr	r2, [pc, #400]	; (80094a8 <tcp_input+0x298>)
 8009318:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	8a3a      	ldrh	r2, [r7, #16]
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f7fd fe1c 	bl	8006f60 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	891a      	ldrh	r2, [r3, #8]
 800932c:	8a3b      	ldrh	r3, [r7, #16]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	895b      	ldrh	r3, [r3, #10]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <tcp_input+0x13a>
 800933e:	4b54      	ldr	r3, [pc, #336]	; (8009490 <tcp_input+0x280>)
 8009340:	22df      	movs	r2, #223	; 0xdf
 8009342:	495c      	ldr	r1, [pc, #368]	; (80094b4 <tcp_input+0x2a4>)
 8009344:	4854      	ldr	r0, [pc, #336]	; (8009498 <tcp_input+0x288>)
 8009346:	f009 f907 	bl	8012558 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	891a      	ldrh	r2, [r3, #8]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	891b      	ldrh	r3, [r3, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	d005      	beq.n	8009364 <tcp_input+0x154>
 8009358:	4b4d      	ldr	r3, [pc, #308]	; (8009490 <tcp_input+0x280>)
 800935a:	22e0      	movs	r2, #224	; 0xe0
 800935c:	4956      	ldr	r1, [pc, #344]	; (80094b8 <tcp_input+0x2a8>)
 800935e:	484e      	ldr	r0, [pc, #312]	; (8009498 <tcp_input+0x288>)
 8009360:	f009 f8fa 	bl	8012558 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009364:	4b4d      	ldr	r3, [pc, #308]	; (800949c <tcp_input+0x28c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29a      	uxth	r2, r3
 800936c:	4b4b      	ldr	r3, [pc, #300]	; (800949c <tcp_input+0x28c>)
 800936e:	681c      	ldr	r4, [r3, #0]
 8009370:	4610      	mov	r0, r2
 8009372:	f7fc fba3 	bl	8005abc <lwip_htons>
 8009376:	4603      	mov	r3, r0
 8009378:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800937a:	4b48      	ldr	r3, [pc, #288]	; (800949c <tcp_input+0x28c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	885b      	ldrh	r3, [r3, #2]
 8009380:	b29a      	uxth	r2, r3
 8009382:	4b46      	ldr	r3, [pc, #280]	; (800949c <tcp_input+0x28c>)
 8009384:	681c      	ldr	r4, [r3, #0]
 8009386:	4610      	mov	r0, r2
 8009388:	f7fc fb98 	bl	8005abc <lwip_htons>
 800938c:	4603      	mov	r3, r0
 800938e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009390:	4b42      	ldr	r3, [pc, #264]	; (800949c <tcp_input+0x28c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	4b41      	ldr	r3, [pc, #260]	; (800949c <tcp_input+0x28c>)
 8009398:	681c      	ldr	r4, [r3, #0]
 800939a:	4610      	mov	r0, r2
 800939c:	f7fc fba3 	bl	8005ae6 <lwip_htonl>
 80093a0:	4603      	mov	r3, r0
 80093a2:	6063      	str	r3, [r4, #4]
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	4a45      	ldr	r2, [pc, #276]	; (80094bc <tcp_input+0x2ac>)
 80093a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80093aa:	4b3c      	ldr	r3, [pc, #240]	; (800949c <tcp_input+0x28c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	4b3a      	ldr	r3, [pc, #232]	; (800949c <tcp_input+0x28c>)
 80093b2:	681c      	ldr	r4, [r3, #0]
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fc fb96 	bl	8005ae6 <lwip_htonl>
 80093ba:	4603      	mov	r3, r0
 80093bc:	60a3      	str	r3, [r4, #8]
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	4a3f      	ldr	r2, [pc, #252]	; (80094c0 <tcp_input+0x2b0>)
 80093c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80093c4:	4b35      	ldr	r3, [pc, #212]	; (800949c <tcp_input+0x28c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	89db      	ldrh	r3, [r3, #14]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	4b33      	ldr	r3, [pc, #204]	; (800949c <tcp_input+0x28c>)
 80093ce:	681c      	ldr	r4, [r3, #0]
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fc fb73 	bl	8005abc <lwip_htons>
 80093d6:	4603      	mov	r3, r0
 80093d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80093da:	4b30      	ldr	r3, [pc, #192]	; (800949c <tcp_input+0x28c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	899b      	ldrh	r3, [r3, #12]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fc fb6a 	bl	8005abc <lwip_htons>
 80093e8:	4603      	mov	r3, r0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	4b34      	ldr	r3, [pc, #208]	; (80094c4 <tcp_input+0x2b4>)
 80093f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	891a      	ldrh	r2, [r3, #8]
 80093fa:	4b33      	ldr	r3, [pc, #204]	; (80094c8 <tcp_input+0x2b8>)
 80093fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80093fe:	4b31      	ldr	r3, [pc, #196]	; (80094c4 <tcp_input+0x2b4>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00c      	beq.n	8009424 <tcp_input+0x214>
    tcplen++;
 800940a:	4b2f      	ldr	r3, [pc, #188]	; (80094c8 <tcp_input+0x2b8>)
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	3301      	adds	r3, #1
 8009410:	b29a      	uxth	r2, r3
 8009412:	4b2d      	ldr	r3, [pc, #180]	; (80094c8 <tcp_input+0x2b8>)
 8009414:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	891a      	ldrh	r2, [r3, #8]
 800941a:	4b2b      	ldr	r3, [pc, #172]	; (80094c8 <tcp_input+0x2b8>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	f200 82d7 	bhi.w	80099d2 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009424:	2300      	movs	r3, #0
 8009426:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009428:	4b28      	ldr	r3, [pc, #160]	; (80094cc <tcp_input+0x2bc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e09d      	b.n	800956c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	7d1b      	ldrb	r3, [r3, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <tcp_input+0x234>
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <tcp_input+0x280>)
 800943a:	22fb      	movs	r2, #251	; 0xfb
 800943c:	4924      	ldr	r1, [pc, #144]	; (80094d0 <tcp_input+0x2c0>)
 800943e:	4816      	ldr	r0, [pc, #88]	; (8009498 <tcp_input+0x288>)
 8009440:	f009 f88a 	bl	8012558 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	7d1b      	ldrb	r3, [r3, #20]
 8009448:	2b0a      	cmp	r3, #10
 800944a:	d105      	bne.n	8009458 <tcp_input+0x248>
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <tcp_input+0x280>)
 800944e:	22fc      	movs	r2, #252	; 0xfc
 8009450:	4920      	ldr	r1, [pc, #128]	; (80094d4 <tcp_input+0x2c4>)
 8009452:	4811      	ldr	r0, [pc, #68]	; (8009498 <tcp_input+0x288>)
 8009454:	f009 f880 	bl	8012558 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	7d1b      	ldrb	r3, [r3, #20]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d105      	bne.n	800946c <tcp_input+0x25c>
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <tcp_input+0x280>)
 8009462:	22fd      	movs	r2, #253	; 0xfd
 8009464:	491c      	ldr	r1, [pc, #112]	; (80094d8 <tcp_input+0x2c8>)
 8009466:	480c      	ldr	r0, [pc, #48]	; (8009498 <tcp_input+0x288>)
 8009468:	f009 f876 	bl	8012558 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	7a1b      	ldrb	r3, [r3, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d033      	beq.n	80094dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	7a1a      	ldrb	r2, [r3, #8]
 8009478:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <tcp_input+0x290>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009480:	3301      	adds	r3, #1
 8009482:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009484:	429a      	cmp	r2, r3
 8009486:	d029      	beq.n	80094dc <tcp_input+0x2cc>
      prev = pcb;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	61bb      	str	r3, [r7, #24]
      continue;
 800948c:	e06b      	b.n	8009566 <tcp_input+0x356>
 800948e:	bf00      	nop
 8009490:	0801489c 	.word	0x0801489c
 8009494:	080148d0 	.word	0x080148d0
 8009498:	080148e8 	.word	0x080148e8
 800949c:	2000052c 	.word	0x2000052c
 80094a0:	20003c24 	.word	0x20003c24
 80094a4:	20000530 	.word	0x20000530
 80094a8:	20000534 	.word	0x20000534
 80094ac:	20000532 	.word	0x20000532
 80094b0:	08014910 	.word	0x08014910
 80094b4:	08014920 	.word	0x08014920
 80094b8:	0801492c 	.word	0x0801492c
 80094bc:	2000053c 	.word	0x2000053c
 80094c0:	20000540 	.word	0x20000540
 80094c4:	20000548 	.word	0x20000548
 80094c8:	20000546 	.word	0x20000546
 80094cc:	20007188 	.word	0x20007188
 80094d0:	0801494c 	.word	0x0801494c
 80094d4:	08014974 	.word	0x08014974
 80094d8:	080149a0 	.word	0x080149a0
    }

    if (pcb->remote_port == tcphdr->src &&
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	8b1a      	ldrh	r2, [r3, #24]
 80094e0:	4b94      	ldr	r3, [pc, #592]	; (8009734 <tcp_input+0x524>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d13a      	bne.n	8009562 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	8ada      	ldrh	r2, [r3, #22]
 80094f0:	4b90      	ldr	r3, [pc, #576]	; (8009734 <tcp_input+0x524>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d132      	bne.n	8009562 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4b8d      	ldr	r3, [pc, #564]	; (8009738 <tcp_input+0x528>)
 8009502:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009504:	429a      	cmp	r2, r3
 8009506:	d12c      	bne.n	8009562 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	4b8a      	ldr	r3, [pc, #552]	; (8009738 <tcp_input+0x528>)
 800950e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009510:	429a      	cmp	r2, r3
 8009512:	d126      	bne.n	8009562 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	429a      	cmp	r2, r3
 800951c:	d106      	bne.n	800952c <tcp_input+0x31c>
 800951e:	4b87      	ldr	r3, [pc, #540]	; (800973c <tcp_input+0x52c>)
 8009520:	f240 120d 	movw	r2, #269	; 0x10d
 8009524:	4986      	ldr	r1, [pc, #536]	; (8009740 <tcp_input+0x530>)
 8009526:	4887      	ldr	r0, [pc, #540]	; (8009744 <tcp_input+0x534>)
 8009528:	f009 f816 	bl	8012558 <iprintf>
      if (prev != NULL) {
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <tcp_input+0x338>
        prev->next = pcb->next;
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800953a:	4b83      	ldr	r3, [pc, #524]	; (8009748 <tcp_input+0x538>)
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009542:	4a81      	ldr	r2, [pc, #516]	; (8009748 <tcp_input+0x538>)
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	429a      	cmp	r2, r3
 8009550:	d111      	bne.n	8009576 <tcp_input+0x366>
 8009552:	4b7a      	ldr	r3, [pc, #488]	; (800973c <tcp_input+0x52c>)
 8009554:	f240 1215 	movw	r2, #277	; 0x115
 8009558:	497c      	ldr	r1, [pc, #496]	; (800974c <tcp_input+0x53c>)
 800955a:	487a      	ldr	r0, [pc, #488]	; (8009744 <tcp_input+0x534>)
 800955c:	f008 fffc 	bl	8012558 <iprintf>
      break;
 8009560:	e009      	b.n	8009576 <tcp_input+0x366>
    }
    prev = pcb;
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f47f af5e 	bne.w	8009430 <tcp_input+0x220>
 8009574:	e000      	b.n	8009578 <tcp_input+0x368>
      break;
 8009576:	bf00      	nop
  }

  if (pcb == NULL) {
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f040 8095 	bne.w	80096aa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009580:	4b73      	ldr	r3, [pc, #460]	; (8009750 <tcp_input+0x540>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	e03f      	b.n	8009608 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	7d1b      	ldrb	r3, [r3, #20]
 800958c:	2b0a      	cmp	r3, #10
 800958e:	d006      	beq.n	800959e <tcp_input+0x38e>
 8009590:	4b6a      	ldr	r3, [pc, #424]	; (800973c <tcp_input+0x52c>)
 8009592:	f240 121f 	movw	r2, #287	; 0x11f
 8009596:	496f      	ldr	r1, [pc, #444]	; (8009754 <tcp_input+0x544>)
 8009598:	486a      	ldr	r0, [pc, #424]	; (8009744 <tcp_input+0x534>)
 800959a:	f008 ffdd 	bl	8012558 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	7a1b      	ldrb	r3, [r3, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d009      	beq.n	80095ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	7a1a      	ldrb	r2, [r3, #8]
 80095aa:	4b63      	ldr	r3, [pc, #396]	; (8009738 <tcp_input+0x528>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095b2:	3301      	adds	r3, #1
 80095b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d122      	bne.n	8009600 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	8b1a      	ldrh	r2, [r3, #24]
 80095be:	4b5d      	ldr	r3, [pc, #372]	; (8009734 <tcp_input+0x524>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d11b      	bne.n	8009602 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	8ada      	ldrh	r2, [r3, #22]
 80095ce:	4b59      	ldr	r3, [pc, #356]	; (8009734 <tcp_input+0x524>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d113      	bne.n	8009602 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	4b56      	ldr	r3, [pc, #344]	; (8009738 <tcp_input+0x528>)
 80095e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d10d      	bne.n	8009602 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b53      	ldr	r3, [pc, #332]	; (8009738 <tcp_input+0x528>)
 80095ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d107      	bne.n	8009602 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80095f2:	69f8      	ldr	r0, [r7, #28]
 80095f4:	f000 fb52 	bl	8009c9c <tcp_timewait_input>
        }
        pbuf_free(p);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7fd fd37 	bl	800706c <pbuf_free>
        return;
 80095fe:	e1ee      	b.n	80099de <tcp_input+0x7ce>
        continue;
 8009600:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1bc      	bne.n	8009588 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <tcp_input+0x548>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e02a      	b.n	8009670 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	7a1b      	ldrb	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00c      	beq.n	800963c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	7a1a      	ldrb	r2, [r3, #8]
 8009626:	4b44      	ldr	r3, [pc, #272]	; (8009738 <tcp_input+0x528>)
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800962e:	3301      	adds	r3, #1
 8009630:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009632:	429a      	cmp	r2, r3
 8009634:	d002      	beq.n	800963c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	61bb      	str	r3, [r7, #24]
        continue;
 800963a:	e016      	b.n	800966a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	8ada      	ldrh	r2, [r3, #22]
 8009640:	4b3c      	ldr	r3, [pc, #240]	; (8009734 <tcp_input+0x524>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	885b      	ldrh	r3, [r3, #2]
 8009646:	b29b      	uxth	r3, r3
 8009648:	429a      	cmp	r2, r3
 800964a:	d10c      	bne.n	8009666 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4b39      	ldr	r3, [pc, #228]	; (8009738 <tcp_input+0x528>)
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	429a      	cmp	r2, r3
 8009656:	d00f      	beq.n	8009678 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00d      	beq.n	800967a <tcp_input+0x46a>
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1d1      	bne.n	800961a <tcp_input+0x40a>
 8009676:	e000      	b.n	800967a <tcp_input+0x46a>
            break;
 8009678:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d014      	beq.n	80096aa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800968e:	4b32      	ldr	r3, [pc, #200]	; (8009758 <tcp_input+0x548>)
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009696:	4a30      	ldr	r2, [pc, #192]	; (8009758 <tcp_input+0x548>)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800969c:	6978      	ldr	r0, [r7, #20]
 800969e:	f000 f9ff 	bl	8009aa0 <tcp_listen_input>
      }
      pbuf_free(p);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7fd fce2 	bl	800706c <pbuf_free>
      return;
 80096a8:	e199      	b.n	80099de <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8160 	beq.w	8009972 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80096b2:	4b2a      	ldr	r3, [pc, #168]	; (800975c <tcp_input+0x54c>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	891a      	ldrh	r2, [r3, #8]
 80096bc:	4b27      	ldr	r3, [pc, #156]	; (800975c <tcp_input+0x54c>)
 80096be:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80096c0:	4a26      	ldr	r2, [pc, #152]	; (800975c <tcp_input+0x54c>)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80096c6:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <tcp_input+0x524>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a24      	ldr	r2, [pc, #144]	; (800975c <tcp_input+0x54c>)
 80096cc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80096ce:	4b24      	ldr	r3, [pc, #144]	; (8009760 <tcp_input+0x550>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80096d4:	4b23      	ldr	r3, [pc, #140]	; (8009764 <tcp_input+0x554>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80096da:	4b23      	ldr	r3, [pc, #140]	; (8009768 <tcp_input+0x558>)
 80096dc:	2200      	movs	r2, #0
 80096de:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80096e0:	4b22      	ldr	r3, [pc, #136]	; (800976c <tcp_input+0x55c>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d006      	beq.n	80096fa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7b5b      	ldrb	r3, [r3, #13]
 80096f0:	f043 0301 	orr.w	r3, r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d038      	beq.n	8009774 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009702:	69f8      	ldr	r0, [r7, #28]
 8009704:	f7ff f854 	bl	80087b0 <tcp_process_refused_data>
 8009708:	4603      	mov	r3, r0
 800970a:	f113 0f0d 	cmn.w	r3, #13
 800970e:	d007      	beq.n	8009720 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009714:	2b00      	cmp	r3, #0
 8009716:	d02d      	beq.n	8009774 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009718:	4b15      	ldr	r3, [pc, #84]	; (8009770 <tcp_input+0x560>)
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d029      	beq.n	8009774 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009724:	2b00      	cmp	r3, #0
 8009726:	f040 8104 	bne.w	8009932 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800972a:	69f8      	ldr	r0, [r7, #28]
 800972c:	f003 fe28 	bl	800d380 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009730:	e0ff      	b.n	8009932 <tcp_input+0x722>
 8009732:	bf00      	nop
 8009734:	2000052c 	.word	0x2000052c
 8009738:	20003c24 	.word	0x20003c24
 800973c:	0801489c 	.word	0x0801489c
 8009740:	080149c8 	.word	0x080149c8
 8009744:	080148e8 	.word	0x080148e8
 8009748:	20007188 	.word	0x20007188
 800974c:	080149f4 	.word	0x080149f4
 8009750:	20007198 	.word	0x20007198
 8009754:	08014a20 	.word	0x08014a20
 8009758:	20007190 	.word	0x20007190
 800975c:	2000051c 	.word	0x2000051c
 8009760:	2000054c 	.word	0x2000054c
 8009764:	20000549 	.word	0x20000549
 8009768:	20000544 	.word	0x20000544
 800976c:	20000548 	.word	0x20000548
 8009770:	20000546 	.word	0x20000546
      }
    }
    tcp_input_pcb = pcb;
 8009774:	4a9b      	ldr	r2, [pc, #620]	; (80099e4 <tcp_input+0x7d4>)
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800977a:	69f8      	ldr	r0, [r7, #28]
 800977c:	f000 fb0a 	bl	8009d94 <tcp_process>
 8009780:	4603      	mov	r3, r0
 8009782:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009784:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009788:	f113 0f0d 	cmn.w	r3, #13
 800978c:	f000 80d3 	beq.w	8009936 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8009790:	4b95      	ldr	r3, [pc, #596]	; (80099e8 <tcp_input+0x7d8>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d015      	beq.n	80097c8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <tcp_input+0x5a8>
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	6912      	ldr	r2, [r2, #16]
 80097b0:	f06f 010d 	mvn.w	r1, #13
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80097b8:	69f9      	ldr	r1, [r7, #28]
 80097ba:	488c      	ldr	r0, [pc, #560]	; (80099ec <tcp_input+0x7dc>)
 80097bc:	f7ff fbb0 	bl	8008f20 <tcp_pcb_remove>
        tcp_free(pcb);
 80097c0:	69f8      	ldr	r0, [r7, #28]
 80097c2:	f7fd ff03 	bl	80075cc <tcp_free>
 80097c6:	e0c1      	b.n	800994c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80097cc:	4b88      	ldr	r3, [pc, #544]	; (80099f0 <tcp_input+0x7e0>)
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01d      	beq.n	8009810 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80097d4:	4b86      	ldr	r3, [pc, #536]	; (80099f0 <tcp_input+0x7e0>)
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00a      	beq.n	80097fa <tcp_input+0x5ea>
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	6910      	ldr	r0, [r2, #16]
 80097ee:	89fa      	ldrh	r2, [r7, #14]
 80097f0:	69f9      	ldr	r1, [r7, #28]
 80097f2:	4798      	blx	r3
 80097f4:	4603      	mov	r3, r0
 80097f6:	74fb      	strb	r3, [r7, #19]
 80097f8:	e001      	b.n	80097fe <tcp_input+0x5ee>
 80097fa:	2300      	movs	r3, #0
 80097fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80097fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009802:	f113 0f0d 	cmn.w	r3, #13
 8009806:	f000 8098 	beq.w	800993a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800980a:	4b79      	ldr	r3, [pc, #484]	; (80099f0 <tcp_input+0x7e0>)
 800980c:	2200      	movs	r2, #0
 800980e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009810:	69f8      	ldr	r0, [r7, #28]
 8009812:	f000 f905 	bl	8009a20 <tcp_input_delayed_close>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 8090 	bne.w	800993e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800981e:	4b75      	ldr	r3, [pc, #468]	; (80099f4 <tcp_input+0x7e4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d041      	beq.n	80098aa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800982a:	2b00      	cmp	r3, #0
 800982c:	d006      	beq.n	800983c <tcp_input+0x62c>
 800982e:	4b72      	ldr	r3, [pc, #456]	; (80099f8 <tcp_input+0x7e8>)
 8009830:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009834:	4971      	ldr	r1, [pc, #452]	; (80099fc <tcp_input+0x7ec>)
 8009836:	4872      	ldr	r0, [pc, #456]	; (8009a00 <tcp_input+0x7f0>)
 8009838:	f008 fe8e 	bl	8012558 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	8b5b      	ldrh	r3, [r3, #26]
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009848:	4b6a      	ldr	r3, [pc, #424]	; (80099f4 <tcp_input+0x7e4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4618      	mov	r0, r3
 800984e:	f7fd fc0d 	bl	800706c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009852:	69f8      	ldr	r0, [r7, #28]
 8009854:	f7fe f99a 	bl	8007b8c <tcp_abort>
            goto aborted;
 8009858:	e078      	b.n	800994c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00c      	beq.n	800987e <tcp_input+0x66e>
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	6918      	ldr	r0, [r3, #16]
 800986e:	4b61      	ldr	r3, [pc, #388]	; (80099f4 <tcp_input+0x7e4>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	2300      	movs	r3, #0
 8009874:	69f9      	ldr	r1, [r7, #28]
 8009876:	47a0      	blx	r4
 8009878:	4603      	mov	r3, r0
 800987a:	74fb      	strb	r3, [r7, #19]
 800987c:	e008      	b.n	8009890 <tcp_input+0x680>
 800987e:	4b5d      	ldr	r3, [pc, #372]	; (80099f4 <tcp_input+0x7e4>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	69f9      	ldr	r1, [r7, #28]
 8009886:	2000      	movs	r0, #0
 8009888:	f7ff f884 	bl	8008994 <tcp_recv_null>
 800988c:	4603      	mov	r3, r0
 800988e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009890:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009894:	f113 0f0d 	cmn.w	r3, #13
 8009898:	d053      	beq.n	8009942 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800989a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80098a2:	4b54      	ldr	r3, [pc, #336]	; (80099f4 <tcp_input+0x7e4>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80098aa:	4b4f      	ldr	r3, [pc, #316]	; (80099e8 <tcp_input+0x7d8>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d030      	beq.n	8009918 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d009      	beq.n	80098d2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098c2:	7b5a      	ldrb	r2, [r3, #13]
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098c8:	f042 0220 	orr.w	r2, r2, #32
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	735a      	strb	r2, [r3, #13]
 80098d0:	e022      	b.n	8009918 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80098da:	d005      	beq.n	80098e8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e0:	3301      	adds	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <tcp_input+0x6fa>
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	6918      	ldr	r0, [r3, #16]
 80098fc:	2300      	movs	r3, #0
 80098fe:	2200      	movs	r2, #0
 8009900:	69f9      	ldr	r1, [r7, #28]
 8009902:	47a0      	blx	r4
 8009904:	4603      	mov	r3, r0
 8009906:	74fb      	strb	r3, [r7, #19]
 8009908:	e001      	b.n	800990e <tcp_input+0x6fe>
 800990a:	2300      	movs	r3, #0
 800990c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800990e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009912:	f113 0f0d 	cmn.w	r3, #13
 8009916:	d016      	beq.n	8009946 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009918:	4b32      	ldr	r3, [pc, #200]	; (80099e4 <tcp_input+0x7d4>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800991e:	69f8      	ldr	r0, [r7, #28]
 8009920:	f000 f87e 	bl	8009a20 <tcp_input_delayed_close>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10f      	bne.n	800994a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800992a:	69f8      	ldr	r0, [r7, #28]
 800992c:	f002 ff10 	bl	800c750 <tcp_output>
 8009930:	e00c      	b.n	800994c <tcp_input+0x73c>
        goto aborted;
 8009932:	bf00      	nop
 8009934:	e00a      	b.n	800994c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009936:	bf00      	nop
 8009938:	e008      	b.n	800994c <tcp_input+0x73c>
              goto aborted;
 800993a:	bf00      	nop
 800993c:	e006      	b.n	800994c <tcp_input+0x73c>
          goto aborted;
 800993e:	bf00      	nop
 8009940:	e004      	b.n	800994c <tcp_input+0x73c>
            goto aborted;
 8009942:	bf00      	nop
 8009944:	e002      	b.n	800994c <tcp_input+0x73c>
              goto aborted;
 8009946:	bf00      	nop
 8009948:	e000      	b.n	800994c <tcp_input+0x73c>
          goto aborted;
 800994a:	bf00      	nop
    tcp_input_pcb = NULL;
 800994c:	4b25      	ldr	r3, [pc, #148]	; (80099e4 <tcp_input+0x7d4>)
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009952:	4b28      	ldr	r3, [pc, #160]	; (80099f4 <tcp_input+0x7e4>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009958:	4b2a      	ldr	r3, [pc, #168]	; (8009a04 <tcp_input+0x7f4>)
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d03d      	beq.n	80099dc <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8009960:	4b28      	ldr	r3, [pc, #160]	; (8009a04 <tcp_input+0x7f4>)
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	f7fd fb81 	bl	800706c <pbuf_free>
      inseg.p = NULL;
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <tcp_input+0x7f4>)
 800996c:	2200      	movs	r2, #0
 800996e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009970:	e034      	b.n	80099dc <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009972:	4b25      	ldr	r3, [pc, #148]	; (8009a08 <tcp_input+0x7f8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	899b      	ldrh	r3, [r3, #12]
 8009978:	b29b      	uxth	r3, r3
 800997a:	4618      	mov	r0, r3
 800997c:	f7fc f89e 	bl	8005abc <lwip_htons>
 8009980:	4603      	mov	r3, r0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d118      	bne.n	80099be <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800998c:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <tcp_input+0x7fc>)
 800998e:	6819      	ldr	r1, [r3, #0]
 8009990:	4b1f      	ldr	r3, [pc, #124]	; (8009a10 <tcp_input+0x800>)
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <tcp_input+0x804>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800999c:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <tcp_input+0x7f8>)
 800999e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099a0:	885b      	ldrh	r3, [r3, #2]
 80099a2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099a4:	4a18      	ldr	r2, [pc, #96]	; (8009a08 <tcp_input+0x7f8>)
 80099a6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099a8:	8812      	ldrh	r2, [r2, #0]
 80099aa:	b292      	uxth	r2, r2
 80099ac:	9202      	str	r2, [sp, #8]
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	4b19      	ldr	r3, [pc, #100]	; (8009a18 <tcp_input+0x808>)
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	4b19      	ldr	r3, [pc, #100]	; (8009a1c <tcp_input+0x80c>)
 80099b6:	4602      	mov	r2, r0
 80099b8:	2000      	movs	r0, #0
 80099ba:	f003 fc8f 	bl	800d2dc <tcp_rst>
    pbuf_free(p);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7fd fb54 	bl	800706c <pbuf_free>
  return;
 80099c4:	e00a      	b.n	80099dc <tcp_input+0x7cc>
    goto dropped;
 80099c6:	bf00      	nop
 80099c8:	e004      	b.n	80099d4 <tcp_input+0x7c4>
dropped:
 80099ca:	bf00      	nop
 80099cc:	e002      	b.n	80099d4 <tcp_input+0x7c4>
      goto dropped;
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <tcp_input+0x7c4>
      goto dropped;
 80099d2:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7fd fb49 	bl	800706c <pbuf_free>
 80099da:	e000      	b.n	80099de <tcp_input+0x7ce>
  return;
 80099dc:	bf00      	nop
}
 80099de:	3724      	adds	r7, #36	; 0x24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd90      	pop	{r4, r7, pc}
 80099e4:	2000719c 	.word	0x2000719c
 80099e8:	20000549 	.word	0x20000549
 80099ec:	20007188 	.word	0x20007188
 80099f0:	20000544 	.word	0x20000544
 80099f4:	2000054c 	.word	0x2000054c
 80099f8:	0801489c 	.word	0x0801489c
 80099fc:	08014a50 	.word	0x08014a50
 8009a00:	080148e8 	.word	0x080148e8
 8009a04:	2000051c 	.word	0x2000051c
 8009a08:	2000052c 	.word	0x2000052c
 8009a0c:	20000540 	.word	0x20000540
 8009a10:	20000546 	.word	0x20000546
 8009a14:	2000053c 	.word	0x2000053c
 8009a18:	20003c34 	.word	0x20003c34
 8009a1c:	20003c38 	.word	0x20003c38

08009a20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <tcp_input_delayed_close+0x1c>
 8009a2e:	4b17      	ldr	r3, [pc, #92]	; (8009a8c <tcp_input_delayed_close+0x6c>)
 8009a30:	f240 225a 	movw	r2, #602	; 0x25a
 8009a34:	4916      	ldr	r1, [pc, #88]	; (8009a90 <tcp_input_delayed_close+0x70>)
 8009a36:	4817      	ldr	r0, [pc, #92]	; (8009a94 <tcp_input_delayed_close+0x74>)
 8009a38:	f008 fd8e 	bl	8012558 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009a3c:	4b16      	ldr	r3, [pc, #88]	; (8009a98 <tcp_input_delayed_close+0x78>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d01c      	beq.n	8009a82 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	8b5b      	ldrh	r3, [r3, #26]
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10d      	bne.n	8009a70 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d008      	beq.n	8009a70 <tcp_input_delayed_close+0x50>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6912      	ldr	r2, [r2, #16]
 8009a68:	f06f 010e 	mvn.w	r1, #14
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	480a      	ldr	r0, [pc, #40]	; (8009a9c <tcp_input_delayed_close+0x7c>)
 8009a74:	f7ff fa54 	bl	8008f20 <tcp_pcb_remove>
    tcp_free(pcb);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7fd fda7 	bl	80075cc <tcp_free>
    return 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	0801489c 	.word	0x0801489c
 8009a90:	08014a6c 	.word	0x08014a6c
 8009a94:	080148e8 	.word	0x080148e8
 8009a98:	20000549 	.word	0x20000549
 8009a9c:	20007188 	.word	0x20007188

08009aa0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009aa0:	b590      	push	{r4, r7, lr}
 8009aa2:	b08b      	sub	sp, #44	; 0x2c
 8009aa4:	af04      	add	r7, sp, #16
 8009aa6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009aa8:	4b6f      	ldr	r3, [pc, #444]	; (8009c68 <tcp_listen_input+0x1c8>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f040 80d3 	bne.w	8009c5c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <tcp_listen_input+0x2a>
 8009abc:	4b6b      	ldr	r3, [pc, #428]	; (8009c6c <tcp_listen_input+0x1cc>)
 8009abe:	f240 2281 	movw	r2, #641	; 0x281
 8009ac2:	496b      	ldr	r1, [pc, #428]	; (8009c70 <tcp_listen_input+0x1d0>)
 8009ac4:	486b      	ldr	r0, [pc, #428]	; (8009c74 <tcp_listen_input+0x1d4>)
 8009ac6:	f008 fd47 	bl	8012558 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009aca:	4b67      	ldr	r3, [pc, #412]	; (8009c68 <tcp_listen_input+0x1c8>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d019      	beq.n	8009b0a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ad6:	4b68      	ldr	r3, [pc, #416]	; (8009c78 <tcp_listen_input+0x1d8>)
 8009ad8:	6819      	ldr	r1, [r3, #0]
 8009ada:	4b68      	ldr	r3, [pc, #416]	; (8009c7c <tcp_listen_input+0x1dc>)
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4b67      	ldr	r3, [pc, #412]	; (8009c80 <tcp_listen_input+0x1e0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ae6:	4b67      	ldr	r3, [pc, #412]	; (8009c84 <tcp_listen_input+0x1e4>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aea:	885b      	ldrh	r3, [r3, #2]
 8009aec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aee:	4a65      	ldr	r2, [pc, #404]	; (8009c84 <tcp_listen_input+0x1e4>)
 8009af0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009af2:	8812      	ldrh	r2, [r2, #0]
 8009af4:	b292      	uxth	r2, r2
 8009af6:	9202      	str	r2, [sp, #8]
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	4b63      	ldr	r3, [pc, #396]	; (8009c88 <tcp_listen_input+0x1e8>)
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	4b63      	ldr	r3, [pc, #396]	; (8009c8c <tcp_listen_input+0x1ec>)
 8009b00:	4602      	mov	r2, r0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f003 fbea 	bl	800d2dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009b08:	e0aa      	b.n	8009c60 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8009b0a:	4b57      	ldr	r3, [pc, #348]	; (8009c68 <tcp_listen_input+0x1c8>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 80a4 	beq.w	8009c60 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7d5b      	ldrb	r3, [r3, #21]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff f85d 	bl	8008bdc <tcp_alloc>
 8009b22:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d111      	bne.n	8009b4e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <tcp_listen_input+0xa8>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	6910      	ldr	r0, [r2, #16]
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4798      	blx	r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	73bb      	strb	r3, [r7, #14]
      return;
 8009b46:	e08c      	b.n	8009c62 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009b48:	23f0      	movs	r3, #240	; 0xf0
 8009b4a:	73bb      	strb	r3, [r7, #14]
      return;
 8009b4c:	e089      	b.n	8009c62 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009b4e:	4b50      	ldr	r3, [pc, #320]	; (8009c90 <tcp_listen_input+0x1f0>)
 8009b50:	695a      	ldr	r2, [r3, #20]
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009b56:	4b4e      	ldr	r3, [pc, #312]	; (8009c90 <tcp_listen_input+0x1f0>)
 8009b58:	691a      	ldr	r2, [r3, #16]
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8ada      	ldrh	r2, [r3, #22]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009b66:	4b47      	ldr	r3, [pc, #284]	; (8009c84 <tcp_listen_input+0x1e4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2203      	movs	r2, #3
 8009b76:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009b78:	4b41      	ldr	r3, [pc, #260]	; (8009c80 <tcp_listen_input+0x1e0>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009b8a:	6978      	ldr	r0, [r7, #20]
 8009b8c:	f7ff fa5c 	bl	8009048 <tcp_next_iss>
 8009b90:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009baa:	4b35      	ldr	r3, [pc, #212]	; (8009c80 <tcp_listen_input+0x1e0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	1e5a      	subs	r2, r3, #1
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	7a5b      	ldrb	r3, [r3, #9]
 8009bc6:	f003 030c 	and.w	r3, r3, #12
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	7a1a      	ldrb	r2, [r3, #8]
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009bd8:	4b2e      	ldr	r3, [pc, #184]	; (8009c94 <tcp_listen_input+0x1f4>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	60da      	str	r2, [r3, #12]
 8009be0:	4a2c      	ldr	r2, [pc, #176]	; (8009c94 <tcp_listen_input+0x1f4>)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	f003 fd3b 	bl	800d660 <tcp_timer_needed>
 8009bea:	4b2b      	ldr	r3, [pc, #172]	; (8009c98 <tcp_listen_input+0x1f8>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009bf0:	6978      	ldr	r0, [r7, #20]
 8009bf2:	f001 fd8f 	bl	800b714 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009bf6:	4b23      	ldr	r3, [pc, #140]	; (8009c84 <tcp_listen_input+0x1e4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	89db      	ldrh	r3, [r3, #14]
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f007 fa59 	bl	80110d0 <ip4_route>
 8009c1e:	4601      	mov	r1, r0
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3304      	adds	r3, #4
 8009c24:	461a      	mov	r2, r3
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff fa34 	bl	8009094 <tcp_eff_send_mss_netif>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009c34:	2112      	movs	r1, #18
 8009c36:	6978      	ldr	r0, [r7, #20]
 8009c38:	f002 fc9c 	bl	800c574 <tcp_enqueue_flags>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009c48:	2100      	movs	r1, #0
 8009c4a:	6978      	ldr	r0, [r7, #20]
 8009c4c:	f7fd fee0 	bl	8007a10 <tcp_abandon>
      return;
 8009c50:	e007      	b.n	8009c62 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8009c52:	6978      	ldr	r0, [r7, #20]
 8009c54:	f002 fd7c 	bl	800c750 <tcp_output>
  return;
 8009c58:	bf00      	nop
 8009c5a:	e001      	b.n	8009c60 <tcp_listen_input+0x1c0>
    return;
 8009c5c:	bf00      	nop
 8009c5e:	e000      	b.n	8009c62 <tcp_listen_input+0x1c2>
  return;
 8009c60:	bf00      	nop
}
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd90      	pop	{r4, r7, pc}
 8009c68:	20000548 	.word	0x20000548
 8009c6c:	0801489c 	.word	0x0801489c
 8009c70:	08014a94 	.word	0x08014a94
 8009c74:	080148e8 	.word	0x080148e8
 8009c78:	20000540 	.word	0x20000540
 8009c7c:	20000546 	.word	0x20000546
 8009c80:	2000053c 	.word	0x2000053c
 8009c84:	2000052c 	.word	0x2000052c
 8009c88:	20003c34 	.word	0x20003c34
 8009c8c:	20003c38 	.word	0x20003c38
 8009c90:	20003c24 	.word	0x20003c24
 8009c94:	20007188 	.word	0x20007188
 8009c98:	20007184 	.word	0x20007184

08009c9c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009ca4:	4b30      	ldr	r3, [pc, #192]	; (8009d68 <tcp_timewait_input+0xcc>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d154      	bne.n	8009d5a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d106      	bne.n	8009cc4 <tcp_timewait_input+0x28>
 8009cb6:	4b2d      	ldr	r3, [pc, #180]	; (8009d6c <tcp_timewait_input+0xd0>)
 8009cb8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009cbc:	492c      	ldr	r1, [pc, #176]	; (8009d70 <tcp_timewait_input+0xd4>)
 8009cbe:	482d      	ldr	r0, [pc, #180]	; (8009d74 <tcp_timewait_input+0xd8>)
 8009cc0:	f008 fc4a 	bl	8012558 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009cc4:	4b28      	ldr	r3, [pc, #160]	; (8009d68 <tcp_timewait_input+0xcc>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02a      	beq.n	8009d26 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009cd0:	4b29      	ldr	r3, [pc, #164]	; (8009d78 <tcp_timewait_input+0xdc>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	db2d      	blt.n	8009d3a <tcp_timewait_input+0x9e>
 8009cde:	4b26      	ldr	r3, [pc, #152]	; (8009d78 <tcp_timewait_input+0xdc>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cea:	440b      	add	r3, r1
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dc23      	bgt.n	8009d3a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cf2:	4b22      	ldr	r3, [pc, #136]	; (8009d7c <tcp_timewait_input+0xe0>)
 8009cf4:	6819      	ldr	r1, [r3, #0]
 8009cf6:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <tcp_timewait_input+0xe4>)
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <tcp_timewait_input+0xdc>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d02:	4b20      	ldr	r3, [pc, #128]	; (8009d84 <tcp_timewait_input+0xe8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d06:	885b      	ldrh	r3, [r3, #2]
 8009d08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <tcp_timewait_input+0xe8>)
 8009d0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d0e:	8812      	ldrh	r2, [r2, #0]
 8009d10:	b292      	uxth	r2, r2
 8009d12:	9202      	str	r2, [sp, #8]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <tcp_timewait_input+0xec>)
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <tcp_timewait_input+0xf0>)
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f003 fadc 	bl	800d2dc <tcp_rst>
      return;
 8009d24:	e01c      	b.n	8009d60 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8009d26:	4b10      	ldr	r3, [pc, #64]	; (8009d68 <tcp_timewait_input+0xcc>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009d32:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <tcp_timewait_input+0xf4>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <tcp_timewait_input+0xe4>)
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00d      	beq.n	8009d5e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	8b5b      	ldrh	r3, [r3, #26]
 8009d46:	f043 0302 	orr.w	r3, r3, #2
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f002 fcfd 	bl	800c750 <tcp_output>
  }
  return;
 8009d56:	bf00      	nop
 8009d58:	e001      	b.n	8009d5e <tcp_timewait_input+0xc2>
    return;
 8009d5a:	bf00      	nop
 8009d5c:	e000      	b.n	8009d60 <tcp_timewait_input+0xc4>
  return;
 8009d5e:	bf00      	nop
}
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000548 	.word	0x20000548
 8009d6c:	0801489c 	.word	0x0801489c
 8009d70:	08014ab4 	.word	0x08014ab4
 8009d74:	080148e8 	.word	0x080148e8
 8009d78:	2000053c 	.word	0x2000053c
 8009d7c:	20000540 	.word	0x20000540
 8009d80:	20000546 	.word	0x20000546
 8009d84:	2000052c 	.word	0x2000052c
 8009d88:	20003c34 	.word	0x20003c34
 8009d8c:	20003c38 	.word	0x20003c38
 8009d90:	2000718c 	.word	0x2000718c

08009d94 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009d94:	b590      	push	{r4, r7, lr}
 8009d96:	b08d      	sub	sp, #52	; 0x34
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <tcp_process+0x24>
 8009daa:	4ba5      	ldr	r3, [pc, #660]	; (800a040 <tcp_process+0x2ac>)
 8009dac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009db0:	49a4      	ldr	r1, [pc, #656]	; (800a044 <tcp_process+0x2b0>)
 8009db2:	48a5      	ldr	r0, [pc, #660]	; (800a048 <tcp_process+0x2b4>)
 8009db4:	f008 fbd0 	bl	8012558 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009db8:	4ba4      	ldr	r3, [pc, #656]	; (800a04c <tcp_process+0x2b8>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d04e      	beq.n	8009e62 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7d1b      	ldrb	r3, [r3, #20]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d108      	bne.n	8009dde <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dd0:	4b9f      	ldr	r3, [pc, #636]	; (800a050 <tcp_process+0x2bc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d123      	bne.n	8009e20 <tcp_process+0x8c>
        acceptable = 1;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	76fb      	strb	r3, [r7, #27]
 8009ddc:	e020      	b.n	8009e20 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009de2:	4b9c      	ldr	r3, [pc, #624]	; (800a054 <tcp_process+0x2c0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d102      	bne.n	8009df0 <tcp_process+0x5c>
        acceptable = 1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	76fb      	strb	r3, [r7, #27]
 8009dee:	e017      	b.n	8009e20 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009df0:	4b98      	ldr	r3, [pc, #608]	; (800a054 <tcp_process+0x2c0>)
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	db10      	blt.n	8009e20 <tcp_process+0x8c>
 8009dfe:	4b95      	ldr	r3, [pc, #596]	; (800a054 <tcp_process+0x2c0>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e0a:	440b      	add	r3, r1
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dc06      	bgt.n	8009e20 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8b5b      	ldrh	r3, [r3, #26]
 8009e16:	f043 0302 	orr.w	r3, r3, #2
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009e20:	7efb      	ldrb	r3, [r7, #27]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01b      	beq.n	8009e5e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	7d1b      	ldrb	r3, [r3, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <tcp_process+0xa8>
 8009e2e:	4b84      	ldr	r3, [pc, #528]	; (800a040 <tcp_process+0x2ac>)
 8009e30:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009e34:	4988      	ldr	r1, [pc, #544]	; (800a058 <tcp_process+0x2c4>)
 8009e36:	4884      	ldr	r0, [pc, #528]	; (800a048 <tcp_process+0x2b4>)
 8009e38:	f008 fb8e 	bl	8012558 <iprintf>
      recv_flags |= TF_RESET;
 8009e3c:	4b87      	ldr	r3, [pc, #540]	; (800a05c <tcp_process+0x2c8>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	f043 0308 	orr.w	r3, r3, #8
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	4b85      	ldr	r3, [pc, #532]	; (800a05c <tcp_process+0x2c8>)
 8009e48:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	8b5b      	ldrh	r3, [r3, #26]
 8009e4e:	f023 0301 	bic.w	r3, r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009e58:	f06f 030d 	mvn.w	r3, #13
 8009e5c:	e37a      	b.n	800a554 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e378      	b.n	800a554 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009e62:	4b7a      	ldr	r3, [pc, #488]	; (800a04c <tcp_process+0x2b8>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d010      	beq.n	8009e90 <tcp_process+0xfc>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	7d1b      	ldrb	r3, [r3, #20]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d00c      	beq.n	8009e90 <tcp_process+0xfc>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	7d1b      	ldrb	r3, [r3, #20]
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d008      	beq.n	8009e90 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	8b5b      	ldrh	r3, [r3, #26]
 8009e82:	f043 0302 	orr.w	r3, r3, #2
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e361      	b.n	800a554 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	8b5b      	ldrh	r3, [r3, #26]
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009e9c:	4b70      	ldr	r3, [pc, #448]	; (800a060 <tcp_process+0x2cc>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 fc2d 	bl	800b714 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	7d1b      	ldrb	r3, [r3, #20]
 8009ebe:	3b02      	subs	r3, #2
 8009ec0:	2b07      	cmp	r3, #7
 8009ec2:	f200 8337 	bhi.w	800a534 <tcp_process+0x7a0>
 8009ec6:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <tcp_process+0x138>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009eed 	.word	0x08009eed
 8009ed0:	0800a11d 	.word	0x0800a11d
 8009ed4:	0800a295 	.word	0x0800a295
 8009ed8:	0800a2bf 	.word	0x0800a2bf
 8009edc:	0800a3e3 	.word	0x0800a3e3
 8009ee0:	0800a295 	.word	0x0800a295
 8009ee4:	0800a46f 	.word	0x0800a46f
 8009ee8:	0800a4ff 	.word	0x0800a4ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009eec:	4b57      	ldr	r3, [pc, #348]	; (800a04c <tcp_process+0x2b8>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	f003 0310 	and.w	r3, r3, #16
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 80e4 	beq.w	800a0c2 <tcp_process+0x32e>
 8009efa:	4b54      	ldr	r3, [pc, #336]	; (800a04c <tcp_process+0x2b8>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 80dd 	beq.w	800a0c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	4b50      	ldr	r3, [pc, #320]	; (800a050 <tcp_process+0x2bc>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	f040 80d5 	bne.w	800a0c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009f18:	4b4e      	ldr	r3, [pc, #312]	; (800a054 <tcp_process+0x2c0>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009f2a:	4b49      	ldr	r3, [pc, #292]	; (800a050 <tcp_process+0x2bc>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009f32:	4b4c      	ldr	r3, [pc, #304]	; (800a064 <tcp_process+0x2d0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	89db      	ldrh	r3, [r3, #14]
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009f4c:	4b41      	ldr	r3, [pc, #260]	; (800a054 <tcp_process+0x2c0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	1e5a      	subs	r2, r3, #1
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4618      	mov	r0, r3
 8009f66:	f007 f8b3 	bl	80110d0 <ip4_route>
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	461a      	mov	r2, r3
 8009f72:	4620      	mov	r0, r4
 8009f74:	f7ff f88e 	bl	8009094 <tcp_eff_send_mss_netif>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f84:	009a      	lsls	r2, r3, #2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009f90:	428b      	cmp	r3, r1
 8009f92:	bf38      	it	cc
 8009f94:	460b      	movcc	r3, r1
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d204      	bcs.n	8009fa4 <tcp_process+0x210>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	e00d      	b.n	8009fc0 <tcp_process+0x22c>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	f241 121c 	movw	r2, #4380	; 0x111c
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d904      	bls.n	8009fbc <tcp_process+0x228>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	e001      	b.n	8009fc0 <tcp_process+0x22c>
 8009fbc:	f241 131c 	movw	r3, #4380	; 0x111c
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <tcp_process+0x24a>
 8009fd0:	4b1b      	ldr	r3, [pc, #108]	; (800a040 <tcp_process+0x2ac>)
 8009fd2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009fd6:	4924      	ldr	r1, [pc, #144]	; (800a068 <tcp_process+0x2d4>)
 8009fd8:	481b      	ldr	r0, [pc, #108]	; (800a048 <tcp_process+0x2b4>)
 8009fda:	f008 fabd 	bl	8012558 <iprintf>
        --pcb->snd_queuelen;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d111      	bne.n	800a01e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ffe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <tcp_process+0x280>
 800a006:	4b0e      	ldr	r3, [pc, #56]	; (800a040 <tcp_process+0x2ac>)
 800a008:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a00c:	4917      	ldr	r1, [pc, #92]	; (800a06c <tcp_process+0x2d8>)
 800a00e:	480e      	ldr	r0, [pc, #56]	; (800a048 <tcp_process+0x2b4>)
 800a010:	f008 faa2 	bl	8012558 <iprintf>
          pcb->unsent = rseg->next;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	66da      	str	r2, [r3, #108]	; 0x6c
 800a01c:	e003      	b.n	800a026 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a026:	69f8      	ldr	r0, [r7, #28]
 800a028:	f7fe fc52 	bl	80088d0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a030:	2b00      	cmp	r3, #0
 800a032:	d11d      	bne.n	800a070 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a03a:	861a      	strh	r2, [r3, #48]	; 0x30
 800a03c:	e01f      	b.n	800a07e <tcp_process+0x2ea>
 800a03e:	bf00      	nop
 800a040:	0801489c 	.word	0x0801489c
 800a044:	08014ad4 	.word	0x08014ad4
 800a048:	080148e8 	.word	0x080148e8
 800a04c:	20000548 	.word	0x20000548
 800a050:	20000540 	.word	0x20000540
 800a054:	2000053c 	.word	0x2000053c
 800a058:	08014af0 	.word	0x08014af0
 800a05c:	20000549 	.word	0x20000549
 800a060:	2000718c 	.word	0x2000718c
 800a064:	2000052c 	.word	0x2000052c
 800a068:	08014b10 	.word	0x08014b10
 800a06c:	08014b28 	.word	0x08014b28
        } else {
          pcb->rtime = 0;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <tcp_process+0x30a>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6910      	ldr	r0, [r2, #16]
 800a092:	2200      	movs	r2, #0
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	4798      	blx	r3
 800a098:	4603      	mov	r3, r0
 800a09a:	76bb      	strb	r3, [r7, #26]
 800a09c:	e001      	b.n	800a0a2 <tcp_process+0x30e>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a0a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a0a6:	f113 0f0d 	cmn.w	r3, #13
 800a0aa:	d102      	bne.n	800a0b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800a0ac:	f06f 030c 	mvn.w	r3, #12
 800a0b0:	e250      	b.n	800a554 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	8b5b      	ldrh	r3, [r3, #26]
 800a0b6:	f043 0302 	orr.w	r3, r3, #2
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a0c0:	e23a      	b.n	800a538 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a0c2:	4b9d      	ldr	r3, [pc, #628]	; (800a338 <tcp_process+0x5a4>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 8234 	beq.w	800a538 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0d0:	4b9a      	ldr	r3, [pc, #616]	; (800a33c <tcp_process+0x5a8>)
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	4b9a      	ldr	r3, [pc, #616]	; (800a340 <tcp_process+0x5ac>)
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b9a      	ldr	r3, [pc, #616]	; (800a344 <tcp_process+0x5b0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0e0:	4b99      	ldr	r3, [pc, #612]	; (800a348 <tcp_process+0x5b4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0e4:	885b      	ldrh	r3, [r3, #2]
 800a0e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0e8:	4a97      	ldr	r2, [pc, #604]	; (800a348 <tcp_process+0x5b4>)
 800a0ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0ec:	8812      	ldrh	r2, [r2, #0]
 800a0ee:	b292      	uxth	r2, r2
 800a0f0:	9202      	str	r2, [sp, #8]
 800a0f2:	9301      	str	r3, [sp, #4]
 800a0f4:	4b95      	ldr	r3, [pc, #596]	; (800a34c <tcp_process+0x5b8>)
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	4b95      	ldr	r3, [pc, #596]	; (800a350 <tcp_process+0x5bc>)
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f003 f8ed 	bl	800d2dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a108:	2b05      	cmp	r3, #5
 800a10a:	f200 8215 	bhi.w	800a538 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f002 feab 	bl	800ce70 <tcp_rexmit_rto>
      break;
 800a11a:	e20d      	b.n	800a538 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a11c:	4b86      	ldr	r3, [pc, #536]	; (800a338 <tcp_process+0x5a4>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 80a1 	beq.w	800a26c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a12a:	4b84      	ldr	r3, [pc, #528]	; (800a33c <tcp_process+0x5a8>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	db7e      	blt.n	800a238 <tcp_process+0x4a4>
 800a13a:	4b80      	ldr	r3, [pc, #512]	; (800a33c <tcp_process+0x5a8>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc77      	bgt.n	800a238 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2204      	movs	r2, #4
 800a14c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a156:	23fa      	movs	r3, #250	; 0xfa
 800a158:	76bb      	strb	r3, [r7, #26]
 800a15a:	e01d      	b.n	800a198 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <tcp_process+0x3e0>
 800a166:	4b7b      	ldr	r3, [pc, #492]	; (800a354 <tcp_process+0x5c0>)
 800a168:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a16c:	497a      	ldr	r1, [pc, #488]	; (800a358 <tcp_process+0x5c4>)
 800a16e:	487b      	ldr	r0, [pc, #492]	; (800a35c <tcp_process+0x5c8>)
 800a170:	f008 f9f2 	bl	8012558 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <tcp_process+0x400>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6910      	ldr	r0, [r2, #16]
 800a188:	2200      	movs	r2, #0
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4798      	blx	r3
 800a18e:	4603      	mov	r3, r0
 800a190:	76bb      	strb	r3, [r7, #26]
 800a192:	e001      	b.n	800a198 <tcp_process+0x404>
 800a194:	23f0      	movs	r3, #240	; 0xf0
 800a196:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a198:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00a      	beq.n	800a1b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a1a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1a4:	f113 0f0d 	cmn.w	r3, #13
 800a1a8:	d002      	beq.n	800a1b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7fd fcee 	bl	8007b8c <tcp_abort>
            }
            return ERR_ABRT;
 800a1b0:	f06f 030c 	mvn.w	r3, #12
 800a1b4:	e1ce      	b.n	800a554 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fae0 	bl	800a77c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a1bc:	4b68      	ldr	r3, [pc, #416]	; (800a360 <tcp_process+0x5cc>)
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <tcp_process+0x43c>
            recv_acked--;
 800a1c4:	4b66      	ldr	r3, [pc, #408]	; (800a360 <tcp_process+0x5cc>)
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	4b64      	ldr	r3, [pc, #400]	; (800a360 <tcp_process+0x5cc>)
 800a1ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1d4:	009a      	lsls	r2, r3, #2
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	bf38      	it	cc
 800a1e4:	460b      	movcc	r3, r1
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d204      	bcs.n	800a1f4 <tcp_process+0x460>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	e00d      	b.n	800a210 <tcp_process+0x47c>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d904      	bls.n	800a20c <tcp_process+0x478>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a206:	005b      	lsls	r3, r3, #1
 800a208:	b29b      	uxth	r3, r3
 800a20a:	e001      	b.n	800a210 <tcp_process+0x47c>
 800a20c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a216:	4b53      	ldr	r3, [pc, #332]	; (800a364 <tcp_process+0x5d0>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d037      	beq.n	800a292 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	8b5b      	ldrh	r3, [r3, #26]
 800a226:	f043 0302 	orr.w	r3, r3, #2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2207      	movs	r2, #7
 800a234:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a236:	e02c      	b.n	800a292 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a238:	4b40      	ldr	r3, [pc, #256]	; (800a33c <tcp_process+0x5a8>)
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	4b40      	ldr	r3, [pc, #256]	; (800a340 <tcp_process+0x5ac>)
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	4b40      	ldr	r3, [pc, #256]	; (800a344 <tcp_process+0x5b0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a248:	4b3f      	ldr	r3, [pc, #252]	; (800a348 <tcp_process+0x5b4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a250:	4a3d      	ldr	r2, [pc, #244]	; (800a348 <tcp_process+0x5b4>)
 800a252:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a254:	8812      	ldrh	r2, [r2, #0]
 800a256:	b292      	uxth	r2, r2
 800a258:	9202      	str	r2, [sp, #8]
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	4b3b      	ldr	r3, [pc, #236]	; (800a34c <tcp_process+0x5b8>)
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4b3b      	ldr	r3, [pc, #236]	; (800a350 <tcp_process+0x5bc>)
 800a262:	4602      	mov	r2, r0
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f003 f839 	bl	800d2dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a26a:	e167      	b.n	800a53c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a26c:	4b32      	ldr	r3, [pc, #200]	; (800a338 <tcp_process+0x5a4>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8161 	beq.w	800a53c <tcp_process+0x7a8>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	1e5a      	subs	r2, r3, #1
 800a280:	4b30      	ldr	r3, [pc, #192]	; (800a344 <tcp_process+0x5b0>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	429a      	cmp	r2, r3
 800a286:	f040 8159 	bne.w	800a53c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f002 fe12 	bl	800ceb4 <tcp_rexmit>
      break;
 800a290:	e154      	b.n	800a53c <tcp_process+0x7a8>
 800a292:	e153      	b.n	800a53c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fa71 	bl	800a77c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a29a:	4b32      	ldr	r3, [pc, #200]	; (800a364 <tcp_process+0x5d0>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 814c 	beq.w	800a540 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	8b5b      	ldrh	r3, [r3, #26]
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2207      	movs	r2, #7
 800a2ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a2bc:	e140      	b.n	800a540 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa5c 	bl	800a77c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a2c4:	4b27      	ldr	r3, [pc, #156]	; (800a364 <tcp_process+0x5d0>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d071      	beq.n	800a3b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2d0:	4b19      	ldr	r3, [pc, #100]	; (800a338 <tcp_process+0x5a4>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	f003 0310 	and.w	r3, r3, #16
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d060      	beq.n	800a39e <tcp_process+0x60a>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2e0:	4b16      	ldr	r3, [pc, #88]	; (800a33c <tcp_process+0x5a8>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d15a      	bne.n	800a39e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d156      	bne.n	800a39e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	8b5b      	ldrh	r3, [r3, #26]
 800a2f4:	f043 0302 	orr.w	r3, r3, #2
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fe fdbe 	bl	8008e80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a304:	4b18      	ldr	r3, [pc, #96]	; (800a368 <tcp_process+0x5d4>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d105      	bne.n	800a31a <tcp_process+0x586>
 800a30e:	4b16      	ldr	r3, [pc, #88]	; (800a368 <tcp_process+0x5d4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	4a14      	ldr	r2, [pc, #80]	; (800a368 <tcp_process+0x5d4>)
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	e02e      	b.n	800a378 <tcp_process+0x5e4>
 800a31a:	4b13      	ldr	r3, [pc, #76]	; (800a368 <tcp_process+0x5d4>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e027      	b.n	800a372 <tcp_process+0x5de>
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d11f      	bne.n	800a36c <tcp_process+0x5d8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	60da      	str	r2, [r3, #12]
 800a334:	e020      	b.n	800a378 <tcp_process+0x5e4>
 800a336:	bf00      	nop
 800a338:	20000548 	.word	0x20000548
 800a33c:	20000540 	.word	0x20000540
 800a340:	20000546 	.word	0x20000546
 800a344:	2000053c 	.word	0x2000053c
 800a348:	2000052c 	.word	0x2000052c
 800a34c:	20003c34 	.word	0x20003c34
 800a350:	20003c38 	.word	0x20003c38
 800a354:	0801489c 	.word	0x0801489c
 800a358:	08014b3c 	.word	0x08014b3c
 800a35c:	080148e8 	.word	0x080148e8
 800a360:	20000544 	.word	0x20000544
 800a364:	20000549 	.word	0x20000549
 800a368:	20007188 	.word	0x20007188
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1d4      	bne.n	800a322 <tcp_process+0x58e>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	60da      	str	r2, [r3, #12]
 800a37e:	4b77      	ldr	r3, [pc, #476]	; (800a55c <tcp_process+0x7c8>)
 800a380:	2201      	movs	r2, #1
 800a382:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	220a      	movs	r2, #10
 800a388:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a38a:	4b75      	ldr	r3, [pc, #468]	; (800a560 <tcp_process+0x7cc>)
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60da      	str	r2, [r3, #12]
 800a392:	4a73      	ldr	r2, [pc, #460]	; (800a560 <tcp_process+0x7cc>)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	f003 f962 	bl	800d660 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a39c:	e0d2      	b.n	800a544 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	8b5b      	ldrh	r3, [r3, #26]
 800a3a2:	f043 0302 	orr.w	r3, r3, #2
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2208      	movs	r2, #8
 800a3b0:	751a      	strb	r2, [r3, #20]
      break;
 800a3b2:	e0c7      	b.n	800a544 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3b4:	4b6b      	ldr	r3, [pc, #428]	; (800a564 <tcp_process+0x7d0>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 80c1 	beq.w	800a544 <tcp_process+0x7b0>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3c6:	4b68      	ldr	r3, [pc, #416]	; (800a568 <tcp_process+0x7d4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	f040 80ba 	bne.w	800a544 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 80b5 	bne.w	800a544 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2206      	movs	r2, #6
 800a3de:	751a      	strb	r2, [r3, #20]
      break;
 800a3e0:	e0b0      	b.n	800a544 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f9ca 	bl	800a77c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a3e8:	4b60      	ldr	r3, [pc, #384]	; (800a56c <tcp_process+0x7d8>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80a9 	beq.w	800a548 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	8b5b      	ldrh	r3, [r3, #26]
 800a3fa:	f043 0302 	orr.w	r3, r3, #2
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7fe fd3b 	bl	8008e80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a40a:	4b59      	ldr	r3, [pc, #356]	; (800a570 <tcp_process+0x7dc>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	429a      	cmp	r2, r3
 800a412:	d105      	bne.n	800a420 <tcp_process+0x68c>
 800a414:	4b56      	ldr	r3, [pc, #344]	; (800a570 <tcp_process+0x7dc>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	4a55      	ldr	r2, [pc, #340]	; (800a570 <tcp_process+0x7dc>)
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	e013      	b.n	800a448 <tcp_process+0x6b4>
 800a420:	4b53      	ldr	r3, [pc, #332]	; (800a570 <tcp_process+0x7dc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	e00c      	b.n	800a442 <tcp_process+0x6ae>
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d104      	bne.n	800a43c <tcp_process+0x6a8>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	60da      	str	r2, [r3, #12]
 800a43a:	e005      	b.n	800a448 <tcp_process+0x6b4>
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1ef      	bne.n	800a428 <tcp_process+0x694>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	60da      	str	r2, [r3, #12]
 800a44e:	4b43      	ldr	r3, [pc, #268]	; (800a55c <tcp_process+0x7c8>)
 800a450:	2201      	movs	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	220a      	movs	r2, #10
 800a458:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a45a:	4b41      	ldr	r3, [pc, #260]	; (800a560 <tcp_process+0x7cc>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60da      	str	r2, [r3, #12]
 800a462:	4a3f      	ldr	r2, [pc, #252]	; (800a560 <tcp_process+0x7cc>)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	f003 f8fa 	bl	800d660 <tcp_timer_needed>
      }
      break;
 800a46c:	e06c      	b.n	800a548 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f984 	bl	800a77c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a474:	4b3b      	ldr	r3, [pc, #236]	; (800a564 <tcp_process+0x7d0>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	f003 0310 	and.w	r3, r3, #16
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d065      	beq.n	800a54c <tcp_process+0x7b8>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a484:	4b38      	ldr	r3, [pc, #224]	; (800a568 <tcp_process+0x7d4>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d15f      	bne.n	800a54c <tcp_process+0x7b8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d15b      	bne.n	800a54c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7fe fcf3 	bl	8008e80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a49a:	4b35      	ldr	r3, [pc, #212]	; (800a570 <tcp_process+0x7dc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d105      	bne.n	800a4b0 <tcp_process+0x71c>
 800a4a4:	4b32      	ldr	r3, [pc, #200]	; (800a570 <tcp_process+0x7dc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	4a31      	ldr	r2, [pc, #196]	; (800a570 <tcp_process+0x7dc>)
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	e013      	b.n	800a4d8 <tcp_process+0x744>
 800a4b0:	4b2f      	ldr	r3, [pc, #188]	; (800a570 <tcp_process+0x7dc>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	e00c      	b.n	800a4d2 <tcp_process+0x73e>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d104      	bne.n	800a4cc <tcp_process+0x738>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	e005      	b.n	800a4d8 <tcp_process+0x744>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1ef      	bne.n	800a4b8 <tcp_process+0x724>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	60da      	str	r2, [r3, #12]
 800a4de:	4b1f      	ldr	r3, [pc, #124]	; (800a55c <tcp_process+0x7c8>)
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	220a      	movs	r2, #10
 800a4e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	; (800a560 <tcp_process+0x7cc>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60da      	str	r2, [r3, #12]
 800a4f2:	4a1b      	ldr	r2, [pc, #108]	; (800a560 <tcp_process+0x7cc>)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	f003 f8b2 	bl	800d660 <tcp_timer_needed>
      }
      break;
 800a4fc:	e026      	b.n	800a54c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f93c 	bl	800a77c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a504:	4b17      	ldr	r3, [pc, #92]	; (800a564 <tcp_process+0x7d0>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01f      	beq.n	800a550 <tcp_process+0x7bc>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a514:	4b14      	ldr	r3, [pc, #80]	; (800a568 <tcp_process+0x7d4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d119      	bne.n	800a550 <tcp_process+0x7bc>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a520:	2b00      	cmp	r3, #0
 800a522:	d115      	bne.n	800a550 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a524:	4b11      	ldr	r3, [pc, #68]	; (800a56c <tcp_process+0x7d8>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	f043 0310 	orr.w	r3, r3, #16
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <tcp_process+0x7d8>)
 800a530:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a532:	e00d      	b.n	800a550 <tcp_process+0x7bc>
    default:
      break;
 800a534:	bf00      	nop
 800a536:	e00c      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a538:	bf00      	nop
 800a53a:	e00a      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a53c:	bf00      	nop
 800a53e:	e008      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a540:	bf00      	nop
 800a542:	e006      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a544:	bf00      	nop
 800a546:	e004      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a548:	bf00      	nop
 800a54a:	e002      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a54c:	bf00      	nop
 800a54e:	e000      	b.n	800a552 <tcp_process+0x7be>
      break;
 800a550:	bf00      	nop
  }
  return ERR_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3724      	adds	r7, #36	; 0x24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd90      	pop	{r4, r7, pc}
 800a55c:	20007184 	.word	0x20007184
 800a560:	20007198 	.word	0x20007198
 800a564:	20000548 	.word	0x20000548
 800a568:	20000540 	.word	0x20000540
 800a56c:	20000549 	.word	0x20000549
 800a570:	20007188 	.word	0x20007188

0800a574 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <tcp_oos_insert_segment+0x1e>
 800a584:	4b3b      	ldr	r3, [pc, #236]	; (800a674 <tcp_oos_insert_segment+0x100>)
 800a586:	f240 421f 	movw	r2, #1055	; 0x41f
 800a58a:	493b      	ldr	r1, [pc, #236]	; (800a678 <tcp_oos_insert_segment+0x104>)
 800a58c:	483b      	ldr	r0, [pc, #236]	; (800a67c <tcp_oos_insert_segment+0x108>)
 800a58e:	f007 ffe3 	bl	8012558 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	899b      	ldrh	r3, [r3, #12]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fb fa8e 	bl	8005abc <lwip_htons>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d028      	beq.n	800a5fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a5ac:	6838      	ldr	r0, [r7, #0]
 800a5ae:	f7fe f97b 	bl	80088a8 <tcp_segs_free>
    next = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	603b      	str	r3, [r7, #0]
 800a5b6:	e056      	b.n	800a666 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	899b      	ldrh	r3, [r3, #12]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fb fa7b 	bl	8005abc <lwip_htons>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00d      	beq.n	800a5ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	b29c      	uxth	r4, r3
 800a5da:	2001      	movs	r0, #1
 800a5dc:	f7fb fa6e 	bl	8005abc <lwip_htons>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	4322      	orrs	r2, r4
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f7fe f969 	bl	80088d0 <tcp_seg_free>
    while (next &&
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00e      	beq.n	800a622 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	891b      	ldrh	r3, [r3, #8]
 800a608:	461a      	mov	r2, r3
 800a60a:	4b1d      	ldr	r3, [pc, #116]	; (800a680 <tcp_oos_insert_segment+0x10c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	441a      	add	r2, r3
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	8909      	ldrh	r1, [r1, #8]
 800a61a:	440b      	add	r3, r1
 800a61c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a61e:	2b00      	cmp	r3, #0
 800a620:	daca      	bge.n	800a5b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01e      	beq.n	800a666 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	891b      	ldrh	r3, [r3, #8]
 800a62c:	461a      	mov	r2, r3
 800a62e:	4b14      	ldr	r3, [pc, #80]	; (800a680 <tcp_oos_insert_segment+0x10c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	441a      	add	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd12      	ble.n	800a666 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	b29a      	uxth	r2, r3
 800a648:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <tcp_oos_insert_segment+0x10c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	b29a      	uxth	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	891b      	ldrh	r3, [r3, #8]
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7fc fb7d 	bl	8006d60 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	601a      	str	r2, [r3, #0]
}
 800a66c:	bf00      	nop
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	bd90      	pop	{r4, r7, pc}
 800a674:	0801489c 	.word	0x0801489c
 800a678:	08014b5c 	.word	0x08014b5c
 800a67c:	080148e8 	.word	0x080148e8
 800a680:	2000053c 	.word	0x2000053c

0800a684 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a684:	b5b0      	push	{r4, r5, r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a692:	e03e      	b.n	800a712 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fc fd6a 	bl	800717c <pbuf_clen>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6b2:	8a7a      	ldrh	r2, [r7, #18]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d906      	bls.n	800a6c6 <tcp_free_acked_segments+0x42>
 800a6b8:	4b2a      	ldr	r3, [pc, #168]	; (800a764 <tcp_free_acked_segments+0xe0>)
 800a6ba:	f240 4257 	movw	r2, #1111	; 0x457
 800a6be:	492a      	ldr	r1, [pc, #168]	; (800a768 <tcp_free_acked_segments+0xe4>)
 800a6c0:	482a      	ldr	r0, [pc, #168]	; (800a76c <tcp_free_acked_segments+0xe8>)
 800a6c2:	f007 ff49 	bl	8012558 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a6cc:	8a7b      	ldrh	r3, [r7, #18]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	891a      	ldrh	r2, [r3, #8]
 800a6dc:	4b24      	ldr	r3, [pc, #144]	; (800a770 <tcp_free_acked_segments+0xec>)
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	4b22      	ldr	r3, [pc, #136]	; (800a770 <tcp_free_acked_segments+0xec>)
 800a6e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a6e8:	6978      	ldr	r0, [r7, #20]
 800a6ea:	f7fe f8f1 	bl	80088d0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00c      	beq.n	800a712 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d109      	bne.n	800a712 <tcp_free_acked_segments+0x8e>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d106      	bne.n	800a712 <tcp_free_acked_segments+0x8e>
 800a704:	4b17      	ldr	r3, [pc, #92]	; (800a764 <tcp_free_acked_segments+0xe0>)
 800a706:	f240 4262 	movw	r2, #1122	; 0x462
 800a70a:	491a      	ldr	r1, [pc, #104]	; (800a774 <tcp_free_acked_segments+0xf0>)
 800a70c:	4817      	ldr	r0, [pc, #92]	; (800a76c <tcp_free_acked_segments+0xe8>)
 800a70e:	f007 ff23 	bl	8012558 <iprintf>
  while (seg_list != NULL &&
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d020      	beq.n	800a75a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fb f9e1 	bl	8005ae6 <lwip_htonl>
 800a724:	4604      	mov	r4, r0
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	891b      	ldrh	r3, [r3, #8]
 800a72a:	461d      	mov	r5, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	899b      	ldrh	r3, [r3, #12]
 800a732:	b29b      	uxth	r3, r3
 800a734:	4618      	mov	r0, r3
 800a736:	f7fb f9c1 	bl	8005abc <lwip_htons>
 800a73a:	4603      	mov	r3, r0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <tcp_free_acked_segments+0xc6>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <tcp_free_acked_segments+0xc8>
 800a74a:	2300      	movs	r3, #0
 800a74c:	442b      	add	r3, r5
 800a74e:	18e2      	adds	r2, r4, r3
 800a750:	4b09      	ldr	r3, [pc, #36]	; (800a778 <tcp_free_acked_segments+0xf4>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a756:	2b00      	cmp	r3, #0
 800a758:	dd9c      	ble.n	800a694 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a75a:	68bb      	ldr	r3, [r7, #8]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bdb0      	pop	{r4, r5, r7, pc}
 800a764:	0801489c 	.word	0x0801489c
 800a768:	08014b84 	.word	0x08014b84
 800a76c:	080148e8 	.word	0x080148e8
 800a770:	20000544 	.word	0x20000544
 800a774:	08014bac 	.word	0x08014bac
 800a778:	20000540 	.word	0x20000540

0800a77c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a77c:	b5b0      	push	{r4, r5, r7, lr}
 800a77e:	b094      	sub	sp, #80	; 0x50
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <tcp_receive+0x20>
 800a78e:	4ba6      	ldr	r3, [pc, #664]	; (800aa28 <tcp_receive+0x2ac>)
 800a790:	f240 427b 	movw	r2, #1147	; 0x47b
 800a794:	49a5      	ldr	r1, [pc, #660]	; (800aa2c <tcp_receive+0x2b0>)
 800a796:	48a6      	ldr	r0, [pc, #664]	; (800aa30 <tcp_receive+0x2b4>)
 800a798:	f007 fede 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	7d1b      	ldrb	r3, [r3, #20]
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d806      	bhi.n	800a7b2 <tcp_receive+0x36>
 800a7a4:	4ba0      	ldr	r3, [pc, #640]	; (800aa28 <tcp_receive+0x2ac>)
 800a7a6:	f240 427c 	movw	r2, #1148	; 0x47c
 800a7aa:	49a2      	ldr	r1, [pc, #648]	; (800aa34 <tcp_receive+0x2b8>)
 800a7ac:	48a0      	ldr	r0, [pc, #640]	; (800aa30 <tcp_receive+0x2b4>)
 800a7ae:	f007 fed3 	bl	8012558 <iprintf>

  if (flags & TCP_ACK) {
 800a7b2:	4ba1      	ldr	r3, [pc, #644]	; (800aa38 <tcp_receive+0x2bc>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 0310 	and.w	r3, r3, #16
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 8263 	beq.w	800ac86 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7cc:	4413      	add	r3, r2
 800a7ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7d4:	4b99      	ldr	r3, [pc, #612]	; (800aa3c <tcp_receive+0x2c0>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	db1b      	blt.n	800a816 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7e2:	4b96      	ldr	r3, [pc, #600]	; (800aa3c <tcp_receive+0x2c0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d106      	bne.n	800a7f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7ee:	4b94      	ldr	r3, [pc, #592]	; (800aa40 <tcp_receive+0x2c4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	db0e      	blt.n	800a816 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7fc:	4b90      	ldr	r3, [pc, #576]	; (800aa40 <tcp_receive+0x2c4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a800:	429a      	cmp	r2, r3
 800a802:	d125      	bne.n	800a850 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a804:	4b8f      	ldr	r3, [pc, #572]	; (800aa44 <tcp_receive+0x2c8>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	89db      	ldrh	r3, [r3, #14]
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a812:	429a      	cmp	r2, r3
 800a814:	d91c      	bls.n	800a850 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a816:	4b8b      	ldr	r3, [pc, #556]	; (800aa44 <tcp_receive+0x2c8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	89db      	ldrh	r3, [r3, #14]
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a830:	429a      	cmp	r2, r3
 800a832:	d205      	bcs.n	800a840 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a840:	4b7e      	ldr	r3, [pc, #504]	; (800aa3c <tcp_receive+0x2c0>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a848:	4b7d      	ldr	r3, [pc, #500]	; (800aa40 <tcp_receive+0x2c4>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a850:	4b7b      	ldr	r3, [pc, #492]	; (800aa40 <tcp_receive+0x2c4>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dc58      	bgt.n	800a910 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a85e:	4b7a      	ldr	r3, [pc, #488]	; (800aa48 <tcp_receive+0x2cc>)
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d14b      	bne.n	800a8fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a870:	4413      	add	r3, r2
 800a872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a874:	429a      	cmp	r2, r3
 800a876:	d142      	bne.n	800a8fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a87e:	2b00      	cmp	r3, #0
 800a880:	db3d      	blt.n	800a8fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a886:	4b6e      	ldr	r3, [pc, #440]	; (800aa40 <tcp_receive+0x2c4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d137      	bne.n	800a8fe <tcp_receive+0x182>
              found_dupack = 1;
 800a88e:	2301      	movs	r3, #1
 800a890:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a898:	2bff      	cmp	r3, #255	; 0xff
 800a89a:	d007      	beq.n	800a8ac <tcp_receive+0x130>
                ++pcb->dupacks;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d91b      	bls.n	800a8ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8c0:	4413      	add	r3, r2
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d30a      	bcc.n	800a8e4 <tcp_receive+0x168>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8d8:	4413      	add	r3, r2
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a8e2:	e004      	b.n	800a8ee <tcp_receive+0x172>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d902      	bls.n	800a8fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f002 fb47 	bl	800cf8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a900:	2b00      	cmp	r3, #0
 800a902:	f040 8160 	bne.w	800abc6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a90e:	e15a      	b.n	800abc6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a910:	4b4b      	ldr	r3, [pc, #300]	; (800aa40 <tcp_receive+0x2c4>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f2c0 814d 	blt.w	800abbc <tcp_receive+0x440>
 800a922:	4b47      	ldr	r3, [pc, #284]	; (800aa40 <tcp_receive+0x2c4>)
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f300 8145 	bgt.w	800abbc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	8b5b      	ldrh	r3, [r3, #26]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d010      	beq.n	800a960 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8b5b      	ldrh	r3, [r3, #26]
 800a942:	f023 0304 	bic.w	r3, r3, #4
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a96e:	10db      	asrs	r3, r3, #3
 800a970:	b21b      	sxth	r3, r3
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4413      	add	r3, r2
 800a97e:	b29b      	uxth	r3, r3
 800a980:	b21a      	sxth	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a988:	4b2d      	ldr	r3, [pc, #180]	; (800aa40 <tcp_receive+0x2c4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	b29b      	uxth	r3, r3
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a9a0:	4b27      	ldr	r3, [pc, #156]	; (800aa40 <tcp_receive+0x2c4>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7d1b      	ldrb	r3, [r3, #20]
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	f240 8096 	bls.w	800aade <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d244      	bcs.n	800aa4c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	8b5b      	ldrh	r3, [r3, #26]
 800a9c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <tcp_receive+0x256>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <tcp_receive+0x258>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a9d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9e2:	fb12 f303 	smulbb	r3, r2, r3
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	bf28      	it	cs
 800a9ee:	4613      	movcs	r3, r2
 800a9f0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a9fa:	4413      	add	r3, r2
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d309      	bcc.n	800aa1c <tcp_receive+0x2a0>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa10:	4413      	add	r3, r2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aa1a:	e060      	b.n	800aade <tcp_receive+0x362>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aa26:	e05a      	b.n	800aade <tcp_receive+0x362>
 800aa28:	0801489c 	.word	0x0801489c
 800aa2c:	08014bcc 	.word	0x08014bcc
 800aa30:	080148e8 	.word	0x080148e8
 800aa34:	08014be8 	.word	0x08014be8
 800aa38:	20000548 	.word	0x20000548
 800aa3c:	2000053c 	.word	0x2000053c
 800aa40:	20000540 	.word	0x20000540
 800aa44:	2000052c 	.word	0x2000052c
 800aa48:	20000546 	.word	0x20000546
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa54:	4413      	add	r3, r2
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d309      	bcc.n	800aa76 <tcp_receive+0x2fa>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa6a:	4413      	add	r3, r2
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aa74:	e004      	b.n	800aa80 <tcp_receive+0x304>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d326      	bcc.n	800aade <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aab0:	4413      	add	r3, r2
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d30a      	bcc.n	800aad4 <tcp_receive+0x358>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aac8:	4413      	add	r3, r2
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aad2:	e004      	b.n	800aade <tcp_receive+0x362>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aada:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae6:	4a98      	ldr	r2, [pc, #608]	; (800ad48 <tcp_receive+0x5cc>)
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff fdcb 	bl	800a684 <tcp_free_acked_segments>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafc:	4a93      	ldr	r2, [pc, #588]	; (800ad4c <tcp_receive+0x5d0>)
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff fdc0 	bl	800a684 <tcp_free_acked_segments>
 800ab04:	4602      	mov	r2, r0
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab18:	861a      	strh	r2, [r3, #48]	; 0x30
 800ab1a:	e002      	b.n	800ab22 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ab3e:	4b84      	ldr	r3, [pc, #528]	; (800ad50 <tcp_receive+0x5d4>)
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	4413      	add	r3, r2
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8b5b      	ldrh	r3, [r3, #26]
 800ab50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d035      	beq.n	800abc4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d118      	bne.n	800ab92 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00c      	beq.n	800ab82 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fa ffb6 	bl	8005ae6 <lwip_htonl>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dc20      	bgt.n	800abc4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	8b5b      	ldrh	r3, [r3, #26]
 800ab86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab90:	e018      	b.n	800abc4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fa ffa1 	bl	8005ae6 <lwip_htonl>
 800aba4:	4603      	mov	r3, r0
 800aba6:	1ae3      	subs	r3, r4, r3
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dc0b      	bgt.n	800abc4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8b5b      	ldrh	r3, [r3, #26]
 800abb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800abba:	e003      	b.n	800abc4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 fbdf 	bl	800d380 <tcp_send_empty_ack>
 800abc2:	e000      	b.n	800abc6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800abc4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d05b      	beq.n	800ac86 <tcp_receive+0x50a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd2:	4b60      	ldr	r3, [pc, #384]	; (800ad54 <tcp_receive+0x5d8>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da54      	bge.n	800ac86 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800abdc:	4b5e      	ldr	r3, [pc, #376]	; (800ad58 <tcp_receive+0x5dc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	b29b      	uxth	r3, r3
 800abec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800abf0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800abfa:	10db      	asrs	r3, r3, #3
 800abfc:	b21b      	sxth	r3, r3
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac14:	4413      	add	r3, r2
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	b21a      	sxth	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ac1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	da05      	bge.n	800ac32 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ac26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac2a:	425b      	negs	r3, r3
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ac32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac3c:	109b      	asrs	r3, r3, #2
 800ac3e:	b21b      	sxth	r3, r3
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac56:	4413      	add	r3, r2
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	b21a      	sxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac66:	10db      	asrs	r3, r3, #3
 800ac68:	b21b      	sxth	r3, r3
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	4413      	add	r3, r2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	b21a      	sxth	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ac86:	4b35      	ldr	r3, [pc, #212]	; (800ad5c <tcp_receive+0x5e0>)
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 84e1 	beq.w	800b652 <tcp_receive+0xed6>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	7d1b      	ldrb	r3, [r3, #20]
 800ac94:	2b06      	cmp	r3, #6
 800ac96:	f200 84dc 	bhi.w	800b652 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac9e:	4b30      	ldr	r3, [pc, #192]	; (800ad60 <tcp_receive+0x5e4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	3b01      	subs	r3, #1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f2c0 808e 	blt.w	800adc8 <tcp_receive+0x64c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acb0:	4b2a      	ldr	r3, [pc, #168]	; (800ad5c <tcp_receive+0x5e0>)
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	4619      	mov	r1, r3
 800acb6:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <tcp_receive+0x5e4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	440b      	add	r3, r1
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	3301      	adds	r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f300 8081 	bgt.w	800adc8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800acc6:	4b27      	ldr	r3, [pc, #156]	; (800ad64 <tcp_receive+0x5e8>)
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acd0:	4b23      	ldr	r3, [pc, #140]	; (800ad60 <tcp_receive+0x5e4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800acd8:	4b22      	ldr	r3, [pc, #136]	; (800ad64 <tcp_receive+0x5e8>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d106      	bne.n	800acee <tcp_receive+0x572>
 800ace0:	4b21      	ldr	r3, [pc, #132]	; (800ad68 <tcp_receive+0x5ec>)
 800ace2:	f240 5294 	movw	r2, #1428	; 0x594
 800ace6:	4921      	ldr	r1, [pc, #132]	; (800ad6c <tcp_receive+0x5f0>)
 800ace8:	4821      	ldr	r0, [pc, #132]	; (800ad70 <tcp_receive+0x5f4>)
 800acea:	f007 fc35 	bl	8012558 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d906      	bls.n	800ad06 <tcp_receive+0x58a>
 800acf8:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <tcp_receive+0x5ec>)
 800acfa:	f240 5295 	movw	r2, #1429	; 0x595
 800acfe:	491d      	ldr	r1, [pc, #116]	; (800ad74 <tcp_receive+0x5f8>)
 800ad00:	481b      	ldr	r0, [pc, #108]	; (800ad70 <tcp_receive+0x5f4>)
 800ad02:	f007 fc29 	bl	8012558 <iprintf>
      off = (u16_t)off32;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ad0c:	4b15      	ldr	r3, [pc, #84]	; (800ad64 <tcp_receive+0x5e8>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	891b      	ldrh	r3, [r3, #8]
 800ad12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d906      	bls.n	800ad28 <tcp_receive+0x5ac>
 800ad1a:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <tcp_receive+0x5ec>)
 800ad1c:	f240 5297 	movw	r2, #1431	; 0x597
 800ad20:	4915      	ldr	r1, [pc, #84]	; (800ad78 <tcp_receive+0x5fc>)
 800ad22:	4813      	ldr	r0, [pc, #76]	; (800ad70 <tcp_receive+0x5f4>)
 800ad24:	f007 fc18 	bl	8012558 <iprintf>
      inseg.len -= off;
 800ad28:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <tcp_receive+0x5e8>)
 800ad2a:	891a      	ldrh	r2, [r3, #8]
 800ad2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <tcp_receive+0x5e8>)
 800ad36:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <tcp_receive+0x5e8>)
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	891a      	ldrh	r2, [r3, #8]
 800ad3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ad46:	e029      	b.n	800ad9c <tcp_receive+0x620>
 800ad48:	08014c04 	.word	0x08014c04
 800ad4c:	08014c0c 	.word	0x08014c0c
 800ad50:	20000544 	.word	0x20000544
 800ad54:	20000540 	.word	0x20000540
 800ad58:	2000718c 	.word	0x2000718c
 800ad5c:	20000546 	.word	0x20000546
 800ad60:	2000053c 	.word	0x2000053c
 800ad64:	2000051c 	.word	0x2000051c
 800ad68:	0801489c 	.word	0x0801489c
 800ad6c:	08014c14 	.word	0x08014c14
 800ad70:	080148e8 	.word	0x080148e8
 800ad74:	08014c24 	.word	0x08014c24
 800ad78:	08014c34 	.word	0x08014c34
        off -= p->len;
 800ad7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7e:	895b      	ldrh	r3, [r3, #10]
 800ad80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ad8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ad90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad92:	2200      	movs	r2, #0
 800ad94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ad96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ad9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad9e:	895b      	ldrh	r3, [r3, #10]
 800ada0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d8e9      	bhi.n	800ad7c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ada8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800adac:	4619      	mov	r1, r3
 800adae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adb0:	f7fc f8d6 	bl	8006f60 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	4a91      	ldr	r2, [pc, #580]	; (800b000 <tcp_receive+0x884>)
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	4b91      	ldr	r3, [pc, #580]	; (800b004 <tcp_receive+0x888>)
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	4a8f      	ldr	r2, [pc, #572]	; (800b000 <tcp_receive+0x884>)
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800adc6:	e00d      	b.n	800ade4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800adc8:	4b8d      	ldr	r3, [pc, #564]	; (800b000 <tcp_receive+0x884>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	da06      	bge.n	800ade4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	8b5b      	ldrh	r3, [r3, #26]
 800adda:	f043 0302 	orr.w	r3, r3, #2
 800adde:	b29a      	uxth	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ade4:	4b86      	ldr	r3, [pc, #536]	; (800b000 <tcp_receive+0x884>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f2c0 842a 	blt.w	800b648 <tcp_receive+0xecc>
 800adf4:	4b82      	ldr	r3, [pc, #520]	; (800b000 <tcp_receive+0x884>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae00:	440b      	add	r3, r1
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	3301      	adds	r3, #1
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f300 841e 	bgt.w	800b648 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae10:	4b7b      	ldr	r3, [pc, #492]	; (800b000 <tcp_receive+0x884>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	f040 829a 	bne.w	800b34e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ae1a:	4b7a      	ldr	r3, [pc, #488]	; (800b004 <tcp_receive+0x888>)
 800ae1c:	891c      	ldrh	r4, [r3, #8]
 800ae1e:	4b79      	ldr	r3, [pc, #484]	; (800b004 <tcp_receive+0x888>)
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	899b      	ldrh	r3, [r3, #12]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fa fe48 	bl	8005abc <lwip_htons>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <tcp_receive+0x6c0>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <tcp_receive+0x6c2>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4423      	add	r3, r4
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	4b71      	ldr	r3, [pc, #452]	; (800b008 <tcp_receive+0x88c>)
 800ae44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae4a:	4b6f      	ldr	r3, [pc, #444]	; (800b008 <tcp_receive+0x88c>)
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d275      	bcs.n	800af3e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ae52:	4b6c      	ldr	r3, [pc, #432]	; (800b004 <tcp_receive+0x888>)
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	899b      	ldrh	r3, [r3, #12]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fa fe2e 	bl	8005abc <lwip_htons>
 800ae60:	4603      	mov	r3, r0
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	f003 0301 	and.w	r3, r3, #1
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01f      	beq.n	800aeac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ae6c:	4b65      	ldr	r3, [pc, #404]	; (800b004 <tcp_receive+0x888>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	899b      	ldrh	r3, [r3, #12]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	b21b      	sxth	r3, r3
 800ae76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae7a:	b21c      	sxth	r4, r3
 800ae7c:	4b61      	ldr	r3, [pc, #388]	; (800b004 <tcp_receive+0x888>)
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	899b      	ldrh	r3, [r3, #12]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fa fe19 	bl	8005abc <lwip_htons>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fa fe10 	bl	8005abc <lwip_htons>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	b21b      	sxth	r3, r3
 800aea0:	4323      	orrs	r3, r4
 800aea2:	b21a      	sxth	r2, r3
 800aea4:	4b57      	ldr	r3, [pc, #348]	; (800b004 <tcp_receive+0x888>)
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	b292      	uxth	r2, r2
 800aeaa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aeb0:	4b54      	ldr	r3, [pc, #336]	; (800b004 <tcp_receive+0x888>)
 800aeb2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aeb4:	4b53      	ldr	r3, [pc, #332]	; (800b004 <tcp_receive+0x888>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	899b      	ldrh	r3, [r3, #12]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fa fdfd 	bl	8005abc <lwip_htons>
 800aec2:	4603      	mov	r3, r0
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d005      	beq.n	800aeda <tcp_receive+0x75e>
            inseg.len -= 1;
 800aece:	4b4d      	ldr	r3, [pc, #308]	; (800b004 <tcp_receive+0x888>)
 800aed0:	891b      	ldrh	r3, [r3, #8]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	4b4b      	ldr	r3, [pc, #300]	; (800b004 <tcp_receive+0x888>)
 800aed8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aeda:	4b4a      	ldr	r3, [pc, #296]	; (800b004 <tcp_receive+0x888>)
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	4b49      	ldr	r3, [pc, #292]	; (800b004 <tcp_receive+0x888>)
 800aee0:	891b      	ldrh	r3, [r3, #8]
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f7fb ff3b 	bl	8006d60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aeea:	4b46      	ldr	r3, [pc, #280]	; (800b004 <tcp_receive+0x888>)
 800aeec:	891c      	ldrh	r4, [r3, #8]
 800aeee:	4b45      	ldr	r3, [pc, #276]	; (800b004 <tcp_receive+0x888>)
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	899b      	ldrh	r3, [r3, #12]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fa fde0 	bl	8005abc <lwip_htons>
 800aefc:	4603      	mov	r3, r0
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <tcp_receive+0x790>
 800af08:	2301      	movs	r3, #1
 800af0a:	e000      	b.n	800af0e <tcp_receive+0x792>
 800af0c:	2300      	movs	r3, #0
 800af0e:	4423      	add	r3, r4
 800af10:	b29a      	uxth	r2, r3
 800af12:	4b3d      	ldr	r3, [pc, #244]	; (800b008 <tcp_receive+0x88c>)
 800af14:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af16:	4b3c      	ldr	r3, [pc, #240]	; (800b008 <tcp_receive+0x88c>)
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	4b38      	ldr	r3, [pc, #224]	; (800b000 <tcp_receive+0x884>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	441a      	add	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af2a:	440b      	add	r3, r1
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d006      	beq.n	800af3e <tcp_receive+0x7c2>
 800af30:	4b36      	ldr	r3, [pc, #216]	; (800b00c <tcp_receive+0x890>)
 800af32:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800af36:	4936      	ldr	r1, [pc, #216]	; (800b010 <tcp_receive+0x894>)
 800af38:	4836      	ldr	r0, [pc, #216]	; (800b014 <tcp_receive+0x898>)
 800af3a:	f007 fb0d 	bl	8012558 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 80e7 	beq.w	800b116 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af48:	4b2e      	ldr	r3, [pc, #184]	; (800b004 <tcp_receive+0x888>)
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	899b      	ldrh	r3, [r3, #12]
 800af4e:	b29b      	uxth	r3, r3
 800af50:	4618      	mov	r0, r3
 800af52:	f7fa fdb3 	bl	8005abc <lwip_htons>
 800af56:	4603      	mov	r3, r0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d010      	beq.n	800af84 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800af62:	e00a      	b.n	800af7a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af68:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7fd fcab 	bl	80088d0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1f0      	bne.n	800af64 <tcp_receive+0x7e8>
 800af82:	e0c8      	b.n	800b116 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800af8a:	e052      	b.n	800b032 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800af8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	899b      	ldrh	r3, [r3, #12]
 800af92:	b29b      	uxth	r3, r3
 800af94:	4618      	mov	r0, r3
 800af96:	f7fa fd91 	bl	8005abc <lwip_htons>
 800af9a:	4603      	mov	r3, r0
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d03d      	beq.n	800b022 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800afa6:	4b17      	ldr	r3, [pc, #92]	; (800b004 <tcp_receive+0x888>)
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	899b      	ldrh	r3, [r3, #12]
 800afac:	b29b      	uxth	r3, r3
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fa fd84 	bl	8005abc <lwip_htons>
 800afb4:	4603      	mov	r3, r0
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d130      	bne.n	800b022 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800afc0:	4b10      	ldr	r3, [pc, #64]	; (800b004 <tcp_receive+0x888>)
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	899b      	ldrh	r3, [r3, #12]
 800afc6:	b29c      	uxth	r4, r3
 800afc8:	2001      	movs	r0, #1
 800afca:	f7fa fd77 	bl	8005abc <lwip_htons>
 800afce:	4603      	mov	r3, r0
 800afd0:	461a      	mov	r2, r3
 800afd2:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <tcp_receive+0x888>)
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	4322      	orrs	r2, r4
 800afd8:	b292      	uxth	r2, r2
 800afda:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <tcp_receive+0x888>)
 800afde:	891c      	ldrh	r4, [r3, #8]
 800afe0:	4b08      	ldr	r3, [pc, #32]	; (800b004 <tcp_receive+0x888>)
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	899b      	ldrh	r3, [r3, #12]
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fa fd67 	bl	8005abc <lwip_htons>
 800afee:	4603      	mov	r3, r0
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00e      	beq.n	800b018 <tcp_receive+0x89c>
 800affa:	2301      	movs	r3, #1
 800affc:	e00d      	b.n	800b01a <tcp_receive+0x89e>
 800affe:	bf00      	nop
 800b000:	2000053c 	.word	0x2000053c
 800b004:	2000051c 	.word	0x2000051c
 800b008:	20000546 	.word	0x20000546
 800b00c:	0801489c 	.word	0x0801489c
 800b010:	08014c44 	.word	0x08014c44
 800b014:	080148e8 	.word	0x080148e8
 800b018:	2300      	movs	r3, #0
 800b01a:	4423      	add	r3, r4
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	4b98      	ldr	r3, [pc, #608]	; (800b280 <tcp_receive+0xb04>)
 800b020:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b024:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b02c:	6938      	ldr	r0, [r7, #16]
 800b02e:	f7fd fc4f 	bl	80088d0 <tcp_seg_free>
            while (next &&
 800b032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00e      	beq.n	800b056 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b038:	4b91      	ldr	r3, [pc, #580]	; (800b280 <tcp_receive+0xb04>)
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b91      	ldr	r3, [pc, #580]	; (800b284 <tcp_receive+0xb08>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	441a      	add	r2, r3
 800b044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b04c:	8909      	ldrh	r1, [r1, #8]
 800b04e:	440b      	add	r3, r1
 800b050:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b052:	2b00      	cmp	r3, #0
 800b054:	da9a      	bge.n	800af8c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d059      	beq.n	800b110 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b05c:	4b88      	ldr	r3, [pc, #544]	; (800b280 <tcp_receive+0xb04>)
 800b05e:	881b      	ldrh	r3, [r3, #0]
 800b060:	461a      	mov	r2, r3
 800b062:	4b88      	ldr	r3, [pc, #544]	; (800b284 <tcp_receive+0xb08>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	441a      	add	r2, r3
 800b068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b070:	2b00      	cmp	r3, #0
 800b072:	dd4d      	ble.n	800b110 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	4b81      	ldr	r3, [pc, #516]	; (800b284 <tcp_receive+0xb08>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	b29b      	uxth	r3, r3
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	b29a      	uxth	r2, r3
 800b086:	4b80      	ldr	r3, [pc, #512]	; (800b288 <tcp_receive+0xb0c>)
 800b088:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b08a:	4b7f      	ldr	r3, [pc, #508]	; (800b288 <tcp_receive+0xb0c>)
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	899b      	ldrh	r3, [r3, #12]
 800b090:	b29b      	uxth	r3, r3
 800b092:	4618      	mov	r0, r3
 800b094:	f7fa fd12 	bl	8005abc <lwip_htons>
 800b098:	4603      	mov	r3, r0
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d005      	beq.n	800b0b0 <tcp_receive+0x934>
                inseg.len -= 1;
 800b0a4:	4b78      	ldr	r3, [pc, #480]	; (800b288 <tcp_receive+0xb0c>)
 800b0a6:	891b      	ldrh	r3, [r3, #8]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	4b76      	ldr	r3, [pc, #472]	; (800b288 <tcp_receive+0xb0c>)
 800b0ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b0b0:	4b75      	ldr	r3, [pc, #468]	; (800b288 <tcp_receive+0xb0c>)
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	4b74      	ldr	r3, [pc, #464]	; (800b288 <tcp_receive+0xb0c>)
 800b0b6:	891b      	ldrh	r3, [r3, #8]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	f7fb fe50 	bl	8006d60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b0c0:	4b71      	ldr	r3, [pc, #452]	; (800b288 <tcp_receive+0xb0c>)
 800b0c2:	891c      	ldrh	r4, [r3, #8]
 800b0c4:	4b70      	ldr	r3, [pc, #448]	; (800b288 <tcp_receive+0xb0c>)
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	899b      	ldrh	r3, [r3, #12]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fa fcf5 	bl	8005abc <lwip_htons>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <tcp_receive+0x966>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <tcp_receive+0x968>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4423      	add	r3, r4
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	4b65      	ldr	r3, [pc, #404]	; (800b280 <tcp_receive+0xb04>)
 800b0ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b0ec:	4b64      	ldr	r3, [pc, #400]	; (800b280 <tcp_receive+0xb04>)
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	4b64      	ldr	r3, [pc, #400]	; (800b284 <tcp_receive+0xb08>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	441a      	add	r2, r3
 800b0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d006      	beq.n	800b110 <tcp_receive+0x994>
 800b102:	4b62      	ldr	r3, [pc, #392]	; (800b28c <tcp_receive+0xb10>)
 800b104:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800b108:	4961      	ldr	r1, [pc, #388]	; (800b290 <tcp_receive+0xb14>)
 800b10a:	4862      	ldr	r0, [pc, #392]	; (800b294 <tcp_receive+0xb18>)
 800b10c:	f007 fa24 	bl	8012558 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b114:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b116:	4b5a      	ldr	r3, [pc, #360]	; (800b280 <tcp_receive+0xb04>)
 800b118:	881b      	ldrh	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	4b59      	ldr	r3, [pc, #356]	; (800b284 <tcp_receive+0xb08>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	441a      	add	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b12a:	4b55      	ldr	r3, [pc, #340]	; (800b280 <tcp_receive+0xb04>)
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d206      	bcs.n	800b140 <tcp_receive+0x9c4>
 800b132:	4b56      	ldr	r3, [pc, #344]	; (800b28c <tcp_receive+0xb10>)
 800b134:	f240 6207 	movw	r2, #1543	; 0x607
 800b138:	4957      	ldr	r1, [pc, #348]	; (800b298 <tcp_receive+0xb1c>)
 800b13a:	4856      	ldr	r0, [pc, #344]	; (800b294 <tcp_receive+0xb18>)
 800b13c:	f007 fa0c 	bl	8012558 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b144:	4b4e      	ldr	r3, [pc, #312]	; (800b280 <tcp_receive+0xb04>)
 800b146:	881b      	ldrh	r3, [r3, #0]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7fc fe9b 	bl	8007e8c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b156:	4b4c      	ldr	r3, [pc, #304]	; (800b288 <tcp_receive+0xb0c>)
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	891b      	ldrh	r3, [r3, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d006      	beq.n	800b16e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b160:	4b49      	ldr	r3, [pc, #292]	; (800b288 <tcp_receive+0xb0c>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	4a4d      	ldr	r2, [pc, #308]	; (800b29c <tcp_receive+0xb20>)
 800b166:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b168:	4b47      	ldr	r3, [pc, #284]	; (800b288 <tcp_receive+0xb0c>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b16e:	4b46      	ldr	r3, [pc, #280]	; (800b288 <tcp_receive+0xb0c>)
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	899b      	ldrh	r3, [r3, #12]
 800b174:	b29b      	uxth	r3, r3
 800b176:	4618      	mov	r0, r3
 800b178:	f7fa fca0 	bl	8005abc <lwip_htons>
 800b17c:	4603      	mov	r3, r0
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80b8 	beq.w	800b2fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b18a:	4b45      	ldr	r3, [pc, #276]	; (800b2a0 <tcp_receive+0xb24>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f043 0320 	orr.w	r3, r3, #32
 800b192:	b2da      	uxtb	r2, r3
 800b194:	4b42      	ldr	r3, [pc, #264]	; (800b2a0 <tcp_receive+0xb24>)
 800b196:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b198:	e0af      	b.n	800b2fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b19e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a36      	ldr	r2, [pc, #216]	; (800b284 <tcp_receive+0xb08>)
 800b1aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	891b      	ldrh	r3, [r3, #8]
 800b1b0:	461c      	mov	r4, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	899b      	ldrh	r3, [r3, #12]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fa fc7e 	bl	8005abc <lwip_htons>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	f003 0303 	and.w	r3, r3, #3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <tcp_receive+0xa54>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e000      	b.n	800b1d2 <tcp_receive+0xa56>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	191a      	adds	r2, r3, r4
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	441a      	add	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	891b      	ldrh	r3, [r3, #8]
 800b1e8:	461d      	mov	r5, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	899b      	ldrh	r3, [r3, #12]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fa fc62 	bl	8005abc <lwip_htons>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <tcp_receive+0xa8c>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <tcp_receive+0xa8e>
 800b208:	2300      	movs	r3, #0
 800b20a:	442b      	add	r3, r5
 800b20c:	429c      	cmp	r4, r3
 800b20e:	d206      	bcs.n	800b21e <tcp_receive+0xaa2>
 800b210:	4b1e      	ldr	r3, [pc, #120]	; (800b28c <tcp_receive+0xb10>)
 800b212:	f240 622c 	movw	r2, #1580	; 0x62c
 800b216:	4923      	ldr	r1, [pc, #140]	; (800b2a4 <tcp_receive+0xb28>)
 800b218:	481e      	ldr	r0, [pc, #120]	; (800b294 <tcp_receive+0xb18>)
 800b21a:	f007 f99d 	bl	8012558 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	891b      	ldrh	r3, [r3, #8]
 800b222:	461c      	mov	r4, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	899b      	ldrh	r3, [r3, #12]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fa fc45 	bl	8005abc <lwip_htons>
 800b232:	4603      	mov	r3, r0
 800b234:	b2db      	uxtb	r3, r3
 800b236:	f003 0303 	and.w	r3, r3, #3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <tcp_receive+0xac6>
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <tcp_receive+0xac8>
 800b242:	2300      	movs	r3, #0
 800b244:	1919      	adds	r1, r3, r4
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b24a:	b28b      	uxth	r3, r1
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	b29a      	uxth	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7fc fe19 	bl	8007e8c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	891b      	ldrh	r3, [r3, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d028      	beq.n	800b2b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b264:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <tcp_receive+0xb20>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01d      	beq.n	800b2a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b26c:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <tcp_receive+0xb20>)
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	4619      	mov	r1, r3
 800b276:	4610      	mov	r0, r2
 800b278:	f7fb ffba 	bl	80071f0 <pbuf_cat>
 800b27c:	e018      	b.n	800b2b0 <tcp_receive+0xb34>
 800b27e:	bf00      	nop
 800b280:	20000546 	.word	0x20000546
 800b284:	2000053c 	.word	0x2000053c
 800b288:	2000051c 	.word	0x2000051c
 800b28c:	0801489c 	.word	0x0801489c
 800b290:	08014c7c 	.word	0x08014c7c
 800b294:	080148e8 	.word	0x080148e8
 800b298:	08014cb8 	.word	0x08014cb8
 800b29c:	2000054c 	.word	0x2000054c
 800b2a0:	20000549 	.word	0x20000549
 800b2a4:	08014cd8 	.word	0x08014cd8
            } else {
              recv_data = cseg->p;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4a70      	ldr	r2, [pc, #448]	; (800b470 <tcp_receive+0xcf4>)
 800b2ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	899b      	ldrh	r3, [r3, #12]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fa fbfc 	bl	8005abc <lwip_htons>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00d      	beq.n	800b2ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b2d0:	4b68      	ldr	r3, [pc, #416]	; (800b474 <tcp_receive+0xcf8>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f043 0320 	orr.w	r3, r3, #32
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	4b66      	ldr	r3, [pc, #408]	; (800b474 <tcp_receive+0xcf8>)
 800b2dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	7d1b      	ldrb	r3, [r3, #20]
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	d102      	bne.n	800b2ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2207      	movs	r2, #7
 800b2ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f7fd faeb 	bl	80088d0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d008      	beq.n	800b314 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b30e:	429a      	cmp	r2, r3
 800b310:	f43f af43 	beq.w	800b19a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	8b5b      	ldrh	r3, [r3, #26]
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00e      	beq.n	800b33e <tcp_receive+0xbc2>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	8b5b      	ldrh	r3, [r3, #26]
 800b324:	f023 0301 	bic.w	r3, r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	835a      	strh	r2, [r3, #26]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	8b5b      	ldrh	r3, [r3, #26]
 800b332:	f043 0302 	orr.w	r3, r3, #2
 800b336:	b29a      	uxth	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b33c:	e188      	b.n	800b650 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b34c:	e180      	b.n	800b650 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b356:	4848      	ldr	r0, [pc, #288]	; (800b478 <tcp_receive+0xcfc>)
 800b358:	f7fd faf0 	bl	800893c <tcp_seg_copy>
 800b35c:	4602      	mov	r2, r0
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	675a      	str	r2, [r3, #116]	; 0x74
 800b362:	e16d      	b.n	800b640 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b364:	2300      	movs	r3, #0
 800b366:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b36e:	e157      	b.n	800b620 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	4b41      	ldr	r3, [pc, #260]	; (800b47c <tcp_receive+0xd00>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d11d      	bne.n	800b3ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b37e:	4b3e      	ldr	r3, [pc, #248]	; (800b478 <tcp_receive+0xcfc>)
 800b380:	891a      	ldrh	r2, [r3, #8]
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	891b      	ldrh	r3, [r3, #8]
 800b386:	429a      	cmp	r2, r3
 800b388:	f240 814f 	bls.w	800b62a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b38c:	483a      	ldr	r0, [pc, #232]	; (800b478 <tcp_receive+0xcfc>)
 800b38e:	f7fd fad5 	bl	800893c <tcp_seg_copy>
 800b392:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 8149 	beq.w	800b62e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e002      	b.n	800b3b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b3b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3b2:	6978      	ldr	r0, [r7, #20]
 800b3b4:	f7ff f8de 	bl	800a574 <tcp_oos_insert_segment>
                }
                break;
 800b3b8:	e139      	b.n	800b62e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d117      	bne.n	800b3f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b3c0:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <tcp_receive+0xd00>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	da57      	bge.n	800b480 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b3d0:	4829      	ldr	r0, [pc, #164]	; (800b478 <tcp_receive+0xcfc>)
 800b3d2:	f7fd fab3 	bl	800893c <tcp_seg_copy>
 800b3d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 8129 	beq.w	800b632 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b3e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3e8:	69b8      	ldr	r0, [r7, #24]
 800b3ea:	f7ff f8c3 	bl	800a574 <tcp_oos_insert_segment>
                  }
                  break;
 800b3ee:	e120      	b.n	800b632 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b3f0:	4b22      	ldr	r3, [pc, #136]	; (800b47c <tcp_receive+0xd00>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	db3e      	blt.n	800b480 <tcp_receive+0xd04>
 800b402:	4b1e      	ldr	r3, [pc, #120]	; (800b47c <tcp_receive+0xd00>)
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	3301      	adds	r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	dc35      	bgt.n	800b480 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b414:	4818      	ldr	r0, [pc, #96]	; (800b478 <tcp_receive+0xcfc>)
 800b416:	f7fd fa91 	bl	800893c <tcp_seg_copy>
 800b41a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 8109 	beq.w	800b636 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b42c:	8912      	ldrh	r2, [r2, #8]
 800b42e:	441a      	add	r2, r3
 800b430:	4b12      	ldr	r3, [pc, #72]	; (800b47c <tcp_receive+0xd00>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	dd12      	ble.n	800b460 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b43a:	4b10      	ldr	r3, [pc, #64]	; (800b47c <tcp_receive+0xd00>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	b29a      	uxth	r2, r3
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	b29b      	uxth	r3, r3
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	685a      	ldr	r2, [r3, #4]
 800b454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b456:	891b      	ldrh	r3, [r3, #8]
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7fb fc80 	bl	8006d60 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b468:	69f8      	ldr	r0, [r7, #28]
 800b46a:	f7ff f883 	bl	800a574 <tcp_oos_insert_segment>
                  }
                  break;
 800b46e:	e0e2      	b.n	800b636 <tcp_receive+0xeba>
 800b470:	2000054c 	.word	0x2000054c
 800b474:	20000549 	.word	0x20000549
 800b478:	2000051c 	.word	0x2000051c
 800b47c:	2000053c 	.word	0x2000053c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f040 80c6 	bne.w	800b61a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b48e:	4b80      	ldr	r3, [pc, #512]	; (800b690 <tcp_receive+0xf14>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f340 80bd 	ble.w	800b61a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	899b      	ldrh	r3, [r3, #12]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fa fb07 	bl	8005abc <lwip_htons>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f040 80bf 	bne.w	800b63a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b4bc:	4875      	ldr	r0, [pc, #468]	; (800b694 <tcp_receive+0xf18>)
 800b4be:	f7fd fa3d 	bl	800893c <tcp_seg_copy>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 80b6 	beq.w	800b63e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4da:	8912      	ldrh	r2, [r2, #8]
 800b4dc:	441a      	add	r2, r3
 800b4de:	4b6c      	ldr	r3, [pc, #432]	; (800b690 <tcp_receive+0xf14>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd12      	ble.n	800b50e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b4e8:	4b69      	ldr	r3, [pc, #420]	; (800b690 <tcp_receive+0xf14>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fb fc29 	bl	8006d60 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b50e:	4b62      	ldr	r3, [pc, #392]	; (800b698 <tcp_receive+0xf1c>)
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	4b5e      	ldr	r3, [pc, #376]	; (800b690 <tcp_receive+0xf14>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	441a      	add	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b522:	440b      	add	r3, r1
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	f340 8089 	ble.w	800b63e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	899b      	ldrh	r3, [r3, #12]
 800b534:	b29b      	uxth	r3, r3
 800b536:	4618      	mov	r0, r3
 800b538:	f7fa fac0 	bl	8005abc <lwip_htons>
 800b53c:	4603      	mov	r3, r0
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	2b00      	cmp	r3, #0
 800b546:	d022      	beq.n	800b58e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	899b      	ldrh	r3, [r3, #12]
 800b550:	b29b      	uxth	r3, r3
 800b552:	b21b      	sxth	r3, r3
 800b554:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b558:	b21c      	sxth	r4, r3
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	899b      	ldrh	r3, [r3, #12]
 800b562:	b29b      	uxth	r3, r3
 800b564:	4618      	mov	r0, r3
 800b566:	f7fa faa9 	bl	8005abc <lwip_htons>
 800b56a:	4603      	mov	r3, r0
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b574:	b29b      	uxth	r3, r3
 800b576:	4618      	mov	r0, r3
 800b578:	f7fa faa0 	bl	8005abc <lwip_htons>
 800b57c:	4603      	mov	r3, r0
 800b57e:	b21b      	sxth	r3, r3
 800b580:	4323      	orrs	r3, r4
 800b582:	b21a      	sxth	r2, r3
 800b584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	b292      	uxth	r2, r2
 800b58c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	b29a      	uxth	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b598:	4413      	add	r3, r2
 800b59a:	b299      	uxth	r1, r3
 800b59c:	4b3c      	ldr	r3, [pc, #240]	; (800b690 <tcp_receive+0xf14>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	1a8a      	subs	r2, r1, r2
 800b5a8:	b292      	uxth	r2, r2
 800b5aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	891b      	ldrh	r3, [r3, #8]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f7fb fbd0 	bl	8006d60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	891c      	ldrh	r4, [r3, #8]
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	899b      	ldrh	r3, [r3, #12]
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fa fa73 	bl	8005abc <lwip_htons>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	f003 0303 	and.w	r3, r3, #3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <tcp_receive+0xe6a>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <tcp_receive+0xe6c>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	4423      	add	r3, r4
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <tcp_receive+0xf1c>)
 800b5ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b5f0:	4b29      	ldr	r3, [pc, #164]	; (800b698 <tcp_receive+0xf1c>)
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4b26      	ldr	r3, [pc, #152]	; (800b690 <tcp_receive+0xf14>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	441a      	add	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b604:	440b      	add	r3, r1
 800b606:	429a      	cmp	r2, r3
 800b608:	d019      	beq.n	800b63e <tcp_receive+0xec2>
 800b60a:	4b24      	ldr	r3, [pc, #144]	; (800b69c <tcp_receive+0xf20>)
 800b60c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b610:	4923      	ldr	r1, [pc, #140]	; (800b6a0 <tcp_receive+0xf24>)
 800b612:	4824      	ldr	r0, [pc, #144]	; (800b6a4 <tcp_receive+0xf28>)
 800b614:	f006 ffa0 	bl	8012558 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b618:	e011      	b.n	800b63e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	2b00      	cmp	r3, #0
 800b624:	f47f aea4 	bne.w	800b370 <tcp_receive+0xbf4>
 800b628:	e00a      	b.n	800b640 <tcp_receive+0xec4>
                break;
 800b62a:	bf00      	nop
 800b62c:	e008      	b.n	800b640 <tcp_receive+0xec4>
                break;
 800b62e:	bf00      	nop
 800b630:	e006      	b.n	800b640 <tcp_receive+0xec4>
                  break;
 800b632:	bf00      	nop
 800b634:	e004      	b.n	800b640 <tcp_receive+0xec4>
                  break;
 800b636:	bf00      	nop
 800b638:	e002      	b.n	800b640 <tcp_receive+0xec4>
                  break;
 800b63a:	bf00      	nop
 800b63c:	e000      	b.n	800b640 <tcp_receive+0xec4>
                break;
 800b63e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f001 fe9d 	bl	800d380 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b646:	e003      	b.n	800b650 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 fe99 	bl	800d380 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b64e:	e01a      	b.n	800b686 <tcp_receive+0xf0a>
 800b650:	e019      	b.n	800b686 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b652:	4b0f      	ldr	r3, [pc, #60]	; (800b690 <tcp_receive+0xf14>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	db0a      	blt.n	800b676 <tcp_receive+0xefa>
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <tcp_receive+0xf14>)
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b66c:	440b      	add	r3, r1
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	3301      	adds	r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	dd07      	ble.n	800b686 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	8b5b      	ldrh	r3, [r3, #26]
 800b67a:	f043 0302 	orr.w	r3, r3, #2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b684:	e7ff      	b.n	800b686 <tcp_receive+0xf0a>
 800b686:	bf00      	nop
 800b688:	3750      	adds	r7, #80	; 0x50
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bdb0      	pop	{r4, r5, r7, pc}
 800b68e:	bf00      	nop
 800b690:	2000053c 	.word	0x2000053c
 800b694:	2000051c 	.word	0x2000051c
 800b698:	20000546 	.word	0x20000546
 800b69c:	0801489c 	.word	0x0801489c
 800b6a0:	08014c44 	.word	0x08014c44
 800b6a4:	080148e8 	.word	0x080148e8

0800b6a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b6ae:	4b15      	ldr	r3, [pc, #84]	; (800b704 <tcp_get_next_optbyte+0x5c>)
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	b291      	uxth	r1, r2
 800b6b6:	4a13      	ldr	r2, [pc, #76]	; (800b704 <tcp_get_next_optbyte+0x5c>)
 800b6b8:	8011      	strh	r1, [r2, #0]
 800b6ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b6bc:	4b12      	ldr	r3, [pc, #72]	; (800b708 <tcp_get_next_optbyte+0x60>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <tcp_get_next_optbyte+0x26>
 800b6c4:	4b11      	ldr	r3, [pc, #68]	; (800b70c <tcp_get_next_optbyte+0x64>)
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	88fa      	ldrh	r2, [r7, #6]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d208      	bcs.n	800b6e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b6ce:	4b10      	ldr	r3, [pc, #64]	; (800b710 <tcp_get_next_optbyte+0x68>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3314      	adds	r3, #20
 800b6d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b6d6:	88fb      	ldrh	r3, [r7, #6]
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	4413      	add	r3, r2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	e00b      	b.n	800b6f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b6e0:	88fb      	ldrh	r3, [r7, #6]
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	4b09      	ldr	r3, [pc, #36]	; (800b70c <tcp_get_next_optbyte+0x64>)
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b6ee:	4b06      	ldr	r3, [pc, #24]	; (800b708 <tcp_get_next_optbyte+0x60>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	797b      	ldrb	r3, [r7, #5]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	20000538 	.word	0x20000538
 800b708:	20000534 	.word	0x20000534
 800b70c:	20000532 	.word	0x20000532
 800b710:	2000052c 	.word	0x2000052c

0800b714 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <tcp_parseopt+0x1c>
 800b722:	4b31      	ldr	r3, [pc, #196]	; (800b7e8 <tcp_parseopt+0xd4>)
 800b724:	f240 727d 	movw	r2, #1917	; 0x77d
 800b728:	4930      	ldr	r1, [pc, #192]	; (800b7ec <tcp_parseopt+0xd8>)
 800b72a:	4831      	ldr	r0, [pc, #196]	; (800b7f0 <tcp_parseopt+0xdc>)
 800b72c:	f006 ff14 	bl	8012558 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b730:	4b30      	ldr	r3, [pc, #192]	; (800b7f4 <tcp_parseopt+0xe0>)
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d053      	beq.n	800b7e0 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b738:	4b2f      	ldr	r3, [pc, #188]	; (800b7f8 <tcp_parseopt+0xe4>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	801a      	strh	r2, [r3, #0]
 800b73e:	e043      	b.n	800b7c8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800b740:	f7ff ffb2 	bl	800b6a8 <tcp_get_next_optbyte>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d03c      	beq.n	800b7c8 <tcp_parseopt+0xb4>
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d002      	beq.n	800b758 <tcp_parseopt+0x44>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d03f      	beq.n	800b7d6 <tcp_parseopt+0xc2>
 800b756:	e026      	b.n	800b7a6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b758:	f7ff ffa6 	bl	800b6a8 <tcp_get_next_optbyte>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b04      	cmp	r3, #4
 800b760:	d13b      	bne.n	800b7da <tcp_parseopt+0xc6>
 800b762:	4b25      	ldr	r3, [pc, #148]	; (800b7f8 <tcp_parseopt+0xe4>)
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	3302      	adds	r3, #2
 800b768:	4a22      	ldr	r2, [pc, #136]	; (800b7f4 <tcp_parseopt+0xe0>)
 800b76a:	8812      	ldrh	r2, [r2, #0]
 800b76c:	4293      	cmp	r3, r2
 800b76e:	dc34      	bgt.n	800b7da <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b770:	f7ff ff9a 	bl	800b6a8 <tcp_get_next_optbyte>
 800b774:	4603      	mov	r3, r0
 800b776:	b29b      	uxth	r3, r3
 800b778:	021b      	lsls	r3, r3, #8
 800b77a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b77c:	f7ff ff94 	bl	800b6a8 <tcp_get_next_optbyte>
 800b780:	4603      	mov	r3, r0
 800b782:	b29a      	uxth	r2, r3
 800b784:	89bb      	ldrh	r3, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b78a:	89bb      	ldrh	r3, [r7, #12]
 800b78c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b790:	d804      	bhi.n	800b79c <tcp_parseopt+0x88>
 800b792:	89bb      	ldrh	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <tcp_parseopt+0x88>
 800b798:	89ba      	ldrh	r2, [r7, #12]
 800b79a:	e001      	b.n	800b7a0 <tcp_parseopt+0x8c>
 800b79c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b7a4:	e010      	b.n	800b7c8 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b7a6:	f7ff ff7f 	bl	800b6a8 <tcp_get_next_optbyte>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b7ae:	7afb      	ldrb	r3, [r7, #11]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d914      	bls.n	800b7de <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <tcp_parseopt+0xe4>)
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	4413      	add	r3, r2
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b02      	subs	r3, #2
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <tcp_parseopt+0xe4>)
 800b7c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <tcp_parseopt+0xe4>)
 800b7ca:	881a      	ldrh	r2, [r3, #0]
 800b7cc:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <tcp_parseopt+0xe0>)
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d3b5      	bcc.n	800b740 <tcp_parseopt+0x2c>
 800b7d4:	e004      	b.n	800b7e0 <tcp_parseopt+0xcc>
          return;
 800b7d6:	bf00      	nop
 800b7d8:	e002      	b.n	800b7e0 <tcp_parseopt+0xcc>
            return;
 800b7da:	bf00      	nop
 800b7dc:	e000      	b.n	800b7e0 <tcp_parseopt+0xcc>
            return;
 800b7de:	bf00      	nop
      }
    }
  }
}
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0801489c 	.word	0x0801489c
 800b7ec:	08014d00 	.word	0x08014d00
 800b7f0:	080148e8 	.word	0x080148e8
 800b7f4:	20000530 	.word	0x20000530
 800b7f8:	20000538 	.word	0x20000538

0800b7fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b800:	4b05      	ldr	r3, [pc, #20]	; (800b818 <tcp_trigger_input_pcb_close+0x1c>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f043 0310 	orr.w	r3, r3, #16
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	4b03      	ldr	r3, [pc, #12]	; (800b818 <tcp_trigger_input_pcb_close+0x1c>)
 800b80c:	701a      	strb	r2, [r3, #0]
}
 800b80e:	bf00      	nop
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	20000549 	.word	0x20000549

0800b81c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <tcp_route+0x28>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	7a1b      	ldrb	r3, [r3, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d006      	beq.n	800b844 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	7a1b      	ldrb	r3, [r3, #8]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fb f8ba 	bl	80069b4 <netif_get_by_index>
 800b840:	4603      	mov	r3, r0
 800b842:	e003      	b.n	800b84c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f005 fc43 	bl	80110d0 <ip4_route>
 800b84a:	4603      	mov	r3, r0
  }
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b854:	b590      	push	{r4, r7, lr}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d105      	bne.n	800b876 <tcp_create_segment+0x22>
 800b86a:	4b44      	ldr	r3, [pc, #272]	; (800b97c <tcp_create_segment+0x128>)
 800b86c:	22a3      	movs	r2, #163	; 0xa3
 800b86e:	4944      	ldr	r1, [pc, #272]	; (800b980 <tcp_create_segment+0x12c>)
 800b870:	4844      	ldr	r0, [pc, #272]	; (800b984 <tcp_create_segment+0x130>)
 800b872:	f006 fe71 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d105      	bne.n	800b888 <tcp_create_segment+0x34>
 800b87c:	4b3f      	ldr	r3, [pc, #252]	; (800b97c <tcp_create_segment+0x128>)
 800b87e:	22a4      	movs	r2, #164	; 0xa4
 800b880:	4941      	ldr	r1, [pc, #260]	; (800b988 <tcp_create_segment+0x134>)
 800b882:	4840      	ldr	r0, [pc, #256]	; (800b984 <tcp_create_segment+0x130>)
 800b884:	f006 fe68 	bl	8012558 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b888:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b896:	2003      	movs	r0, #3
 800b898:	f7fa fd9c 	bl	80063d4 <memp_malloc>
 800b89c:	6138      	str	r0, [r7, #16]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d104      	bne.n	800b8ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b8a4:	68b8      	ldr	r0, [r7, #8]
 800b8a6:	f7fb fbe1 	bl	800706c <pbuf_free>
    return NULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e061      	b.n	800b972 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b8b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	891a      	ldrh	r2, [r3, #8]
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d205      	bcs.n	800b8da <tcp_create_segment+0x86>
 800b8ce:	4b2b      	ldr	r3, [pc, #172]	; (800b97c <tcp_create_segment+0x128>)
 800b8d0:	22b0      	movs	r2, #176	; 0xb0
 800b8d2:	492e      	ldr	r1, [pc, #184]	; (800b98c <tcp_create_segment+0x138>)
 800b8d4:	482b      	ldr	r0, [pc, #172]	; (800b984 <tcp_create_segment+0x130>)
 800b8d6:	f006 fe3f 	bl	8012558 <iprintf>
  seg->len = p->tot_len - optlen;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	891a      	ldrh	r2, [r3, #8]
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b8ea:	2114      	movs	r1, #20
 800b8ec:	68b8      	ldr	r0, [r7, #8]
 800b8ee:	f7fb fb27 	bl	8006f40 <pbuf_add_header>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b8f8:	6938      	ldr	r0, [r7, #16]
 800b8fa:	f7fc ffe9 	bl	80088d0 <tcp_seg_free>
    return NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e037      	b.n	800b972 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	8ada      	ldrh	r2, [r3, #22]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	68dc      	ldr	r4, [r3, #12]
 800b914:	4610      	mov	r0, r2
 800b916:	f7fa f8d1 	bl	8005abc <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8b1a      	ldrh	r2, [r3, #24]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	68dc      	ldr	r4, [r3, #12]
 800b926:	4610      	mov	r0, r2
 800b928:	f7fa f8c8 	bl	8005abc <lwip_htons>
 800b92c:	4603      	mov	r3, r0
 800b92e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	68dc      	ldr	r4, [r3, #12]
 800b934:	6838      	ldr	r0, [r7, #0]
 800b936:	f7fa f8d6 	bl	8005ae6 <lwip_htonl>
 800b93a:	4603      	mov	r3, r0
 800b93c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	089b      	lsrs	r3, r3, #2
 800b942:	b2db      	uxtb	r3, r3
 800b944:	b29b      	uxth	r3, r3
 800b946:	3305      	adds	r3, #5
 800b948:	b29b      	uxth	r3, r3
 800b94a:	031b      	lsls	r3, r3, #12
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	79fb      	ldrb	r3, [r7, #7]
 800b950:	b29b      	uxth	r3, r3
 800b952:	4313      	orrs	r3, r2
 800b954:	b29a      	uxth	r2, r3
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	68dc      	ldr	r4, [r3, #12]
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7fa f8ae 	bl	8005abc <lwip_htons>
 800b960:	4603      	mov	r3, r0
 800b962:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	749a      	strb	r2, [r3, #18]
 800b96c:	2200      	movs	r2, #0
 800b96e:	74da      	strb	r2, [r3, #19]
  return seg;
 800b970:	693b      	ldr	r3, [r7, #16]
}
 800b972:	4618      	mov	r0, r3
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	bd90      	pop	{r4, r7, pc}
 800b97a:	bf00      	nop
 800b97c:	08014d1c 	.word	0x08014d1c
 800b980:	08014d50 	.word	0x08014d50
 800b984:	08014d70 	.word	0x08014d70
 800b988:	08014d98 	.word	0x08014d98
 800b98c:	08014dbc 	.word	0x08014dbc

0800b990 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	607b      	str	r3, [r7, #4]
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	460b      	mov	r3, r1
 800b99e:	81bb      	strh	r3, [r7, #12]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b9a4:	89bb      	ldrh	r3, [r7, #12]
 800b9a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d105      	bne.n	800b9ba <tcp_pbuf_prealloc+0x2a>
 800b9ae:	4b30      	ldr	r3, [pc, #192]	; (800ba70 <tcp_pbuf_prealloc+0xe0>)
 800b9b0:	22e8      	movs	r2, #232	; 0xe8
 800b9b2:	4930      	ldr	r1, [pc, #192]	; (800ba74 <tcp_pbuf_prealloc+0xe4>)
 800b9b4:	4830      	ldr	r0, [pc, #192]	; (800ba78 <tcp_pbuf_prealloc+0xe8>)
 800b9b6:	f006 fdcf 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d105      	bne.n	800b9cc <tcp_pbuf_prealloc+0x3c>
 800b9c0:	4b2b      	ldr	r3, [pc, #172]	; (800ba70 <tcp_pbuf_prealloc+0xe0>)
 800b9c2:	22e9      	movs	r2, #233	; 0xe9
 800b9c4:	492d      	ldr	r1, [pc, #180]	; (800ba7c <tcp_pbuf_prealloc+0xec>)
 800b9c6:	482c      	ldr	r0, [pc, #176]	; (800ba78 <tcp_pbuf_prealloc+0xe8>)
 800b9c8:	f006 fdc6 	bl	8012558 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b9cc:	89ba      	ldrh	r2, [r7, #12]
 800b9ce:	897b      	ldrh	r3, [r7, #10]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d221      	bcs.n	800ba18 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b9d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d111      	bne.n	800ba04 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	8b5b      	ldrh	r3, [r3, #26]
 800b9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d115      	bne.n	800ba18 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b9ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d103      	bne.n	800ba04 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d009      	beq.n	800ba18 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ba04:	89bb      	ldrh	r3, [r7, #12]
 800ba06:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ba0a:	f023 0203 	bic.w	r2, r3, #3
 800ba0e:	897b      	ldrh	r3, [r7, #10]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	bf28      	it	cs
 800ba14:	4613      	movcs	r3, r2
 800ba16:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ba18:	8af9      	ldrh	r1, [r7, #22]
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
 800ba1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fb f843 	bl	8006aac <pbuf_alloc>
 800ba26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e019      	b.n	800ba66 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d006      	beq.n	800ba48 <tcp_pbuf_prealloc+0xb8>
 800ba3a:	4b0d      	ldr	r3, [pc, #52]	; (800ba70 <tcp_pbuf_prealloc+0xe0>)
 800ba3c:	f240 120b 	movw	r2, #267	; 0x10b
 800ba40:	490f      	ldr	r1, [pc, #60]	; (800ba80 <tcp_pbuf_prealloc+0xf0>)
 800ba42:	480d      	ldr	r0, [pc, #52]	; (800ba78 <tcp_pbuf_prealloc+0xe8>)
 800ba44:	f006 fd88 	bl	8012558 <iprintf>
  *oversize = p->len - length;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	895a      	ldrh	r2, [r3, #10]
 800ba4c:	89bb      	ldrh	r3, [r7, #12]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	89ba      	ldrh	r2, [r7, #12]
 800ba5a:	811a      	strh	r2, [r3, #8]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	891a      	ldrh	r2, [r3, #8]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	815a      	strh	r2, [r3, #10]
  return p;
 800ba64:	693b      	ldr	r3, [r7, #16]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	08014d1c 	.word	0x08014d1c
 800ba74:	08014dd4 	.word	0x08014dd4
 800ba78:	08014d70 	.word	0x08014d70
 800ba7c:	08014df8 	.word	0x08014df8
 800ba80:	08014e18 	.word	0x08014e18

0800ba84 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <tcp_write_checks+0x20>
 800ba96:	4b33      	ldr	r3, [pc, #204]	; (800bb64 <tcp_write_checks+0xe0>)
 800ba98:	f240 1233 	movw	r2, #307	; 0x133
 800ba9c:	4932      	ldr	r1, [pc, #200]	; (800bb68 <tcp_write_checks+0xe4>)
 800ba9e:	4833      	ldr	r0, [pc, #204]	; (800bb6c <tcp_write_checks+0xe8>)
 800baa0:	f006 fd5a 	bl	8012558 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	7d1b      	ldrb	r3, [r3, #20]
 800baa8:	2b04      	cmp	r3, #4
 800baaa:	d00e      	beq.n	800baca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800bab0:	2b07      	cmp	r3, #7
 800bab2:	d00a      	beq.n	800baca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d006      	beq.n	800baca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d002      	beq.n	800baca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800bac4:	f06f 030a 	mvn.w	r3, #10
 800bac8:	e048      	b.n	800bb5c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800baca:	887b      	ldrh	r3, [r7, #2]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <tcp_write_checks+0x50>
    return ERR_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	e043      	b.n	800bb5c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bada:	887a      	ldrh	r2, [r7, #2]
 800badc:	429a      	cmp	r2, r3
 800bade:	d909      	bls.n	800baf4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	8b5b      	ldrh	r3, [r3, #26]
 800bae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae8:	b29a      	uxth	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800baee:	f04f 33ff 	mov.w	r3, #4294967295
 800baf2:	e033      	b.n	800bb5c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bafa:	2b08      	cmp	r3, #8
 800bafc:	d909      	bls.n	800bb12 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	8b5b      	ldrh	r3, [r3, #26]
 800bb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb10:	e024      	b.n	800bb5c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00f      	beq.n	800bb3c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d11a      	bne.n	800bb5a <tcp_write_checks+0xd6>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d116      	bne.n	800bb5a <tcp_write_checks+0xd6>
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	; (800bb64 <tcp_write_checks+0xe0>)
 800bb2e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800bb32:	490f      	ldr	r1, [pc, #60]	; (800bb70 <tcp_write_checks+0xec>)
 800bb34:	480d      	ldr	r0, [pc, #52]	; (800bb6c <tcp_write_checks+0xe8>)
 800bb36:	f006 fd0f 	bl	8012558 <iprintf>
 800bb3a:	e00e      	b.n	800bb5a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <tcp_write_checks+0xc8>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d006      	beq.n	800bb5a <tcp_write_checks+0xd6>
 800bb4c:	4b05      	ldr	r3, [pc, #20]	; (800bb64 <tcp_write_checks+0xe0>)
 800bb4e:	f240 1259 	movw	r2, #345	; 0x159
 800bb52:	4908      	ldr	r1, [pc, #32]	; (800bb74 <tcp_write_checks+0xf0>)
 800bb54:	4805      	ldr	r0, [pc, #20]	; (800bb6c <tcp_write_checks+0xe8>)
 800bb56:	f006 fcff 	bl	8012558 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	08014d1c 	.word	0x08014d1c
 800bb68:	08014e2c 	.word	0x08014e2c
 800bb6c:	08014d70 	.word	0x08014d70
 800bb70:	08014e4c 	.word	0x08014e4c
 800bb74:	08014e88 	.word	0x08014e88

0800bb78 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b09b      	sub	sp, #108	; 0x6c
 800bb7c:	af04      	add	r7, sp, #16
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4611      	mov	r1, r2
 800bb84:	461a      	mov	r2, r3
 800bb86:	460b      	mov	r3, r1
 800bb88:	80fb      	strh	r3, [r7, #6]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bb92:	2300      	movs	r3, #0
 800bb94:	653b      	str	r3, [r7, #80]	; 0x50
 800bb96:	2300      	movs	r3, #0
 800bb98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb9e:	2300      	movs	r3, #0
 800bba0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bba2:	2300      	movs	r3, #0
 800bba4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d109      	bne.n	800bbd4 <tcp_write+0x5c>
 800bbc0:	4ba5      	ldr	r3, [pc, #660]	; (800be58 <tcp_write+0x2e0>)
 800bbc2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bbc6:	49a5      	ldr	r1, [pc, #660]	; (800be5c <tcp_write+0x2e4>)
 800bbc8:	48a5      	ldr	r0, [pc, #660]	; (800be60 <tcp_write+0x2e8>)
 800bbca:	f006 fcc5 	bl	8012558 <iprintf>
 800bbce:	f06f 030f 	mvn.w	r3, #15
 800bbd2:	e32c      	b.n	800c22e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbda:	085b      	lsrs	r3, r3, #1
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	bf28      	it	cs
 800bbe6:	4613      	movcs	r3, r2
 800bbe8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bbea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <tcp_write+0x7e>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbf4:	e000      	b.n	800bbf8 <tcp_write+0x80>
 800bbf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbf8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d109      	bne.n	800bc14 <tcp_write+0x9c>
 800bc00:	4b95      	ldr	r3, [pc, #596]	; (800be58 <tcp_write+0x2e0>)
 800bc02:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800bc06:	4997      	ldr	r1, [pc, #604]	; (800be64 <tcp_write+0x2ec>)
 800bc08:	4895      	ldr	r0, [pc, #596]	; (800be60 <tcp_write+0x2e8>)
 800bc0a:	f006 fca5 	bl	8012558 <iprintf>
 800bc0e:	f06f 030f 	mvn.w	r3, #15
 800bc12:	e30c      	b.n	800c22e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bc14:	88fb      	ldrh	r3, [r7, #6]
 800bc16:	4619      	mov	r1, r3
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f7ff ff33 	bl	800ba84 <tcp_write_checks>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800bc24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <tcp_write+0xba>
    return err;
 800bc2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bc30:	e2fd      	b.n	800c22e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 80f7 	beq.w	800be3a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc50:	653b      	str	r3, [r7, #80]	; 0x50
 800bc52:	e002      	b.n	800bc5a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bc54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1f8      	bne.n	800bc54 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc64:	7a9b      	ldrb	r3, [r3, #10]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bc70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc74:	891b      	ldrh	r3, [r3, #8]
 800bc76:	4619      	mov	r1, r3
 800bc78:	8c3b      	ldrh	r3, [r7, #32]
 800bc7a:	440b      	add	r3, r1
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	da06      	bge.n	800bc8e <tcp_write+0x116>
 800bc80:	4b75      	ldr	r3, [pc, #468]	; (800be58 <tcp_write+0x2e0>)
 800bc82:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bc86:	4978      	ldr	r1, [pc, #480]	; (800be68 <tcp_write+0x2f0>)
 800bc88:	4875      	ldr	r0, [pc, #468]	; (800be60 <tcp_write+0x2e8>)
 800bc8a:	f006 fc65 	bl	8012558 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc90:	891a      	ldrh	r2, [r3, #8]
 800bc92:	8c3b      	ldrh	r3, [r7, #32]
 800bc94:	4413      	add	r3, r2
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bca4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bca6:	8a7b      	ldrh	r3, [r7, #18]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d027      	beq.n	800bcfc <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bcac:	8a7b      	ldrh	r3, [r7, #18]
 800bcae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d206      	bcs.n	800bcc2 <tcp_write+0x14a>
 800bcb4:	4b68      	ldr	r3, [pc, #416]	; (800be58 <tcp_write+0x2e0>)
 800bcb6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bcba:	496c      	ldr	r1, [pc, #432]	; (800be6c <tcp_write+0x2f4>)
 800bcbc:	4868      	ldr	r0, [pc, #416]	; (800be60 <tcp_write+0x2e8>)
 800bcbe:	f006 fc4b 	bl	8012558 <iprintf>
      seg = last_unsent;
 800bcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bcc6:	8a7b      	ldrh	r3, [r7, #18]
 800bcc8:	88fa      	ldrh	r2, [r7, #6]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d901      	bls.n	800bcd2 <tcp_write+0x15a>
 800bcce:	8a7b      	ldrh	r3, [r7, #18]
 800bcd0:	e000      	b.n	800bcd4 <tcp_write+0x15c>
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	bfa8      	it	ge
 800bcda:	4613      	movge	r3, r2
 800bcdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800bcde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bce4:	4413      	add	r3, r2
 800bce6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800bcea:	8a7a      	ldrh	r2, [r7, #18]
 800bcec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bcf4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bcf6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bcfc:	8a7b      	ldrh	r3, [r7, #18]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00b      	beq.n	800bd1a <tcp_write+0x1a2>
 800bd02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd06:	88fb      	ldrh	r3, [r7, #6]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d006      	beq.n	800bd1a <tcp_write+0x1a2>
 800bd0c:	4b52      	ldr	r3, [pc, #328]	; (800be58 <tcp_write+0x2e0>)
 800bd0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd12:	4957      	ldr	r1, [pc, #348]	; (800be70 <tcp_write+0x2f8>)
 800bd14:	4852      	ldr	r0, [pc, #328]	; (800be60 <tcp_write+0x2e8>)
 800bd16:	f006 fc1f 	bl	8012558 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bd1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd1e:	88fb      	ldrh	r3, [r7, #6]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	f080 8168 	bcs.w	800bff6 <tcp_write+0x47e>
 800bd26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 8164 	beq.w	800bff6 <tcp_write+0x47e>
 800bd2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd30:	891b      	ldrh	r3, [r3, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 815f 	beq.w	800bff6 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bd38:	88fa      	ldrh	r2, [r7, #6]
 800bd3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd3e:	1ad2      	subs	r2, r2, r3
 800bd40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd42:	4293      	cmp	r3, r2
 800bd44:	bfa8      	it	ge
 800bd46:	4613      	movge	r3, r2
 800bd48:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd4c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd4e:	797b      	ldrb	r3, [r7, #5]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d027      	beq.n	800bda8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bd58:	f107 0012 	add.w	r0, r7, #18
 800bd5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd5e:	8bf9      	ldrh	r1, [r7, #30]
 800bd60:	2301      	movs	r3, #1
 800bd62:	9302      	str	r3, [sp, #8]
 800bd64:	797b      	ldrb	r3, [r7, #5]
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2000      	movs	r0, #0
 800bd70:	f7ff fe0e 	bl	800b990 <tcp_pbuf_prealloc>
 800bd74:	6578      	str	r0, [r7, #84]	; 0x54
 800bd76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 8226 	beq.w	800c1ca <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bd7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd80:	6858      	ldr	r0, [r3, #4]
 800bd82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	4413      	add	r3, r2
 800bd8a:	8bfa      	ldrh	r2, [r7, #30]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	f006 fbd0 	bl	8012532 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bd92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bd94:	f7fb f9f2 	bl	800717c <pbuf_clen>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bda0:	4413      	add	r3, r2
 800bda2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bda6:	e041      	b.n	800be2c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
 800bdae:	e002      	b.n	800bdb6 <tcp_write+0x23e>
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1f8      	bne.n	800bdb0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	7b1b      	ldrb	r3, [r3, #12]
 800bdc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d115      	bne.n	800bdf6 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd0:	8952      	ldrh	r2, [r2, #10]
 800bdd2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d10d      	bne.n	800bdf6 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bdda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d006      	beq.n	800bdf0 <tcp_write+0x278>
 800bde2:	4b1d      	ldr	r3, [pc, #116]	; (800be58 <tcp_write+0x2e0>)
 800bde4:	f240 2231 	movw	r2, #561	; 0x231
 800bde8:	4922      	ldr	r1, [pc, #136]	; (800be74 <tcp_write+0x2fc>)
 800bdea:	481d      	ldr	r0, [pc, #116]	; (800be60 <tcp_write+0x2e8>)
 800bdec:	f006 fbb4 	bl	8012558 <iprintf>
          extendlen = seglen;
 800bdf0:	8bfb      	ldrh	r3, [r7, #30]
 800bdf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bdf4:	e01a      	b.n	800be2c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bdf6:	8bfb      	ldrh	r3, [r7, #30]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	f7fa fe55 	bl	8006aac <pbuf_alloc>
 800be02:	6578      	str	r0, [r7, #84]	; 0x54
 800be04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 81e1 	beq.w	800c1ce <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800be0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	441a      	add	r2, r3
 800be14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be16:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800be18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800be1a:	f7fb f9af 	bl	800717c <pbuf_clen>
 800be1e:	4603      	mov	r3, r0
 800be20:	461a      	mov	r2, r3
 800be22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800be26:	4413      	add	r3, r2
 800be28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800be2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be30:	8bfb      	ldrh	r3, [r7, #30]
 800be32:	4413      	add	r3, r2
 800be34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800be38:	e0dd      	b.n	800bff6 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80d8 	beq.w	800bff6 <tcp_write+0x47e>
 800be46:	4b04      	ldr	r3, [pc, #16]	; (800be58 <tcp_write+0x2e0>)
 800be48:	f240 224b 	movw	r2, #587	; 0x24b
 800be4c:	490a      	ldr	r1, [pc, #40]	; (800be78 <tcp_write+0x300>)
 800be4e:	4804      	ldr	r0, [pc, #16]	; (800be60 <tcp_write+0x2e8>)
 800be50:	f006 fb82 	bl	8012558 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800be54:	e0cf      	b.n	800bff6 <tcp_write+0x47e>
 800be56:	bf00      	nop
 800be58:	08014d1c 	.word	0x08014d1c
 800be5c:	08014ebc 	.word	0x08014ebc
 800be60:	08014d70 	.word	0x08014d70
 800be64:	08014ed4 	.word	0x08014ed4
 800be68:	08014f08 	.word	0x08014f08
 800be6c:	08014f20 	.word	0x08014f20
 800be70:	08014f40 	.word	0x08014f40
 800be74:	08014f60 	.word	0x08014f60
 800be78:	08014f8c 	.word	0x08014f8c
    struct pbuf *p;
    u16_t left = len - pos;
 800be7c:	88fa      	ldrh	r2, [r7, #6]
 800be7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800be86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800be92:	8b7a      	ldrh	r2, [r7, #26]
 800be94:	8bbb      	ldrh	r3, [r7, #28]
 800be96:	4293      	cmp	r3, r2
 800be98:	bf28      	it	cs
 800be9a:	4613      	movcs	r3, r2
 800be9c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800be9e:	797b      	ldrb	r3, [r7, #5]
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d036      	beq.n	800bf16 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bea8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800beac:	b29a      	uxth	r2, r3
 800beae:	8b3b      	ldrh	r3, [r7, #24]
 800beb0:	4413      	add	r3, r2
 800beb2:	b299      	uxth	r1, r3
 800beb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bf0c      	ite	eq
 800beba:	2301      	moveq	r3, #1
 800bebc:	2300      	movne	r3, #0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f107 0012 	add.w	r0, r7, #18
 800bec4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bec6:	9302      	str	r3, [sp, #8]
 800bec8:	797b      	ldrb	r3, [r7, #5]
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	4603      	mov	r3, r0
 800bed2:	2036      	movs	r0, #54	; 0x36
 800bed4:	f7ff fd5c 	bl	800b990 <tcp_pbuf_prealloc>
 800bed8:	6338      	str	r0, [r7, #48]	; 0x30
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 8178 	beq.w	800c1d2 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	895b      	ldrh	r3, [r3, #10]
 800bee6:	8b3a      	ldrh	r2, [r7, #24]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d906      	bls.n	800befa <tcp_write+0x382>
 800beec:	4b8c      	ldr	r3, [pc, #560]	; (800c120 <tcp_write+0x5a8>)
 800beee:	f240 2267 	movw	r2, #615	; 0x267
 800bef2:	498c      	ldr	r1, [pc, #560]	; (800c124 <tcp_write+0x5ac>)
 800bef4:	488c      	ldr	r0, [pc, #560]	; (800c128 <tcp_write+0x5b0>)
 800bef6:	f006 fb2f 	bl	8012558 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf02:	18d0      	adds	r0, r2, r3
 800bf04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	8b3a      	ldrh	r2, [r7, #24]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	f006 fb0f 	bl	8012532 <memcpy>
 800bf14:	e02f      	b.n	800bf76 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bf16:	8a7b      	ldrh	r3, [r7, #18]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d006      	beq.n	800bf2a <tcp_write+0x3b2>
 800bf1c:	4b80      	ldr	r3, [pc, #512]	; (800c120 <tcp_write+0x5a8>)
 800bf1e:	f240 2271 	movw	r2, #625	; 0x271
 800bf22:	4982      	ldr	r1, [pc, #520]	; (800c12c <tcp_write+0x5b4>)
 800bf24:	4880      	ldr	r0, [pc, #512]	; (800c128 <tcp_write+0x5b0>)
 800bf26:	f006 fb17 	bl	8012558 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bf2a:	8b3b      	ldrh	r3, [r7, #24]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	4619      	mov	r1, r3
 800bf30:	2036      	movs	r0, #54	; 0x36
 800bf32:	f7fa fdbb 	bl	8006aac <pbuf_alloc>
 800bf36:	6178      	str	r0, [r7, #20]
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 814b 	beq.w	800c1d6 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bf40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	441a      	add	r2, r3
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf56:	4619      	mov	r1, r3
 800bf58:	2036      	movs	r0, #54	; 0x36
 800bf5a:	f7fa fda7 	bl	8006aac <pbuf_alloc>
 800bf5e:	6338      	str	r0, [r7, #48]	; 0x30
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d103      	bne.n	800bf6e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bf66:	6978      	ldr	r0, [r7, #20]
 800bf68:	f7fb f880 	bl	800706c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bf6c:	e136      	b.n	800c1dc <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bf6e:	6979      	ldr	r1, [r7, #20]
 800bf70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf72:	f7fb f93d 	bl	80071f0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bf76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf78:	f7fb f900 	bl	800717c <pbuf_clen>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf84:	4413      	add	r3, r2
 800bf86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bf8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf8e:	2b09      	cmp	r3, #9
 800bf90:	d903      	bls.n	800bf9a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bf92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf94:	f7fb f86a 	bl	800706c <pbuf_free>
      goto memerr;
 800bf98:	e120      	b.n	800c1dc <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfa2:	441a      	add	r2, r3
 800bfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	2200      	movs	r2, #0
 800bfae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7ff fc4f 	bl	800b854 <tcp_create_segment>
 800bfb6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 810d 	beq.w	800c1da <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bfc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <tcp_write+0x454>
      queue = seg;
 800bfc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc8:	647b      	str	r3, [r7, #68]	; 0x44
 800bfca:	e00c      	b.n	800bfe6 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bfcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <tcp_write+0x468>
 800bfd2:	4b53      	ldr	r3, [pc, #332]	; (800c120 <tcp_write+0x5a8>)
 800bfd4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bfd8:	4955      	ldr	r1, [pc, #340]	; (800c130 <tcp_write+0x5b8>)
 800bfda:	4853      	ldr	r0, [pc, #332]	; (800c128 <tcp_write+0x5b0>)
 800bfdc:	f006 fabc 	bl	8012558 <iprintf>
      prev_seg->next = seg;
 800bfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfe4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bfea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bfee:	8b3b      	ldrh	r3, [r7, #24]
 800bff0:	4413      	add	r3, r2
 800bff2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800bff6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	f4ff af3d 	bcc.w	800be7c <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c002:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c004:	2b00      	cmp	r3, #0
 800c006:	d02c      	beq.n	800c062 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c00e:	e01e      	b.n	800c04e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	891a      	ldrh	r2, [r3, #8]
 800c014:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c016:	4413      	add	r3, r2
 800c018:	b29a      	uxth	r2, r3
 800c01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d110      	bne.n	800c048 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c02c:	8952      	ldrh	r2, [r2, #10]
 800c02e:	4413      	add	r3, r2
 800c030:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	4618      	mov	r0, r3
 800c036:	f006 fa7c 	bl	8012532 <memcpy>
        p->len += oversize_used;
 800c03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03c:	895a      	ldrh	r2, [r3, #10]
 800c03e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c040:	4413      	add	r3, r2
 800c042:	b29a      	uxth	r2, r3
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1dd      	bne.n	800c010 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800c054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c056:	891a      	ldrh	r2, [r3, #8]
 800c058:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c05a:	4413      	add	r3, r2
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c060:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c062:	8a7a      	ldrh	r2, [r7, #18]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d018      	beq.n	800c0a2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <tcp_write+0x50c>
 800c076:	4b2a      	ldr	r3, [pc, #168]	; (800c120 <tcp_write+0x5a8>)
 800c078:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c07c:	492d      	ldr	r1, [pc, #180]	; (800c134 <tcp_write+0x5bc>)
 800c07e:	482a      	ldr	r0, [pc, #168]	; (800c128 <tcp_write+0x5b0>)
 800c080:	f006 fa6a 	bl	8012558 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fb f8b0 	bl	80071f0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c092:	891a      	ldrh	r2, [r3, #8]
 800c094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c096:	891b      	ldrh	r3, [r3, #8]
 800c098:	4413      	add	r3, r2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c09e:	811a      	strh	r2, [r3, #8]
 800c0a0:	e037      	b.n	800c112 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800c0a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d034      	beq.n	800c112 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <tcp_write+0x53e>
 800c0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <tcp_write+0x54c>
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <tcp_write+0x5a8>)
 800c0b8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c0bc:	491e      	ldr	r1, [pc, #120]	; (800c138 <tcp_write+0x5c0>)
 800c0be:	481a      	ldr	r0, [pc, #104]	; (800c128 <tcp_write+0x5b0>)
 800c0c0:	f006 fa4a 	bl	8012558 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ca:	e009      	b.n	800c0e0 <tcp_write+0x568>
      p->tot_len += extendlen;
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	891a      	ldrh	r2, [r3, #8]
 800c0d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0d2:	4413      	add	r3, r2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f1      	bne.n	800c0cc <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800c0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ea:	891a      	ldrh	r2, [r3, #8]
 800c0ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0ee:	4413      	add	r3, r2
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	895a      	ldrh	r2, [r3, #10]
 800c0fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0fc:	4413      	add	r3, r2
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c106:	891a      	ldrh	r2, [r3, #8]
 800c108:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c10a:	4413      	add	r3, r2
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c110:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c114:	2b00      	cmp	r3, #0
 800c116:	d111      	bne.n	800c13c <tcp_write+0x5c4>
    pcb->unsent = queue;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c11c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c11e:	e010      	b.n	800c142 <tcp_write+0x5ca>
 800c120:	08014d1c 	.word	0x08014d1c
 800c124:	08014fbc 	.word	0x08014fbc
 800c128:	08014d70 	.word	0x08014d70
 800c12c:	08014ffc 	.word	0x08014ffc
 800c130:	0801500c 	.word	0x0801500c
 800c134:	08015020 	.word	0x08015020
 800c138:	08015058 	.word	0x08015058
  } else {
    last_unsent->next = queue;
 800c13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c13e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c140:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c146:	88fb      	ldrh	r3, [r7, #6]
 800c148:	441a      	add	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c166:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <tcp_write+0x61a>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <tcp_write+0x61a>
 800c184:	4b2c      	ldr	r3, [pc, #176]	; (800c238 <tcp_write+0x6c0>)
 800c186:	f240 3213 	movw	r2, #787	; 0x313
 800c18a:	492c      	ldr	r1, [pc, #176]	; (800c23c <tcp_write+0x6c4>)
 800c18c:	482c      	ldr	r0, [pc, #176]	; (800c240 <tcp_write+0x6c8>)
 800c18e:	f006 f9e3 	bl	8012558 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d016      	beq.n	800c1c6 <tcp_write+0x64e>
 800c198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d012      	beq.n	800c1c6 <tcp_write+0x64e>
 800c1a0:	797b      	ldrb	r3, [r7, #5]
 800c1a2:	f003 0302 	and.w	r3, r3, #2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10d      	bne.n	800c1c6 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	899b      	ldrh	r3, [r3, #12]
 800c1b0:	b29c      	uxth	r4, r3
 800c1b2:	2008      	movs	r0, #8
 800c1b4:	f7f9 fc82 	bl	8005abc <lwip_htons>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	4322      	orrs	r2, r4
 800c1c2:	b292      	uxth	r2, r2
 800c1c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	e031      	b.n	800c22e <tcp_write+0x6b6>
          goto memerr;
 800c1ca:	bf00      	nop
 800c1cc:	e006      	b.n	800c1dc <tcp_write+0x664>
            goto memerr;
 800c1ce:	bf00      	nop
 800c1d0:	e004      	b.n	800c1dc <tcp_write+0x664>
        goto memerr;
 800c1d2:	bf00      	nop
 800c1d4:	e002      	b.n	800c1dc <tcp_write+0x664>
        goto memerr;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <tcp_write+0x664>
      goto memerr;
 800c1da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	8b5b      	ldrh	r3, [r3, #26]
 800c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <tcp_write+0x67e>
    pbuf_free(concat_p);
 800c1f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c1f2:	f7fa ff3b 	bl	800706c <pbuf_free>
  }
  if (queue != NULL) {
 800c1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800c1fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c1fe:	f7fc fb53 	bl	80088a8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00e      	beq.n	800c22a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <tcp_write+0x6b2>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d106      	bne.n	800c22a <tcp_write+0x6b2>
 800c21c:	4b06      	ldr	r3, [pc, #24]	; (800c238 <tcp_write+0x6c0>)
 800c21e:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c222:	4906      	ldr	r1, [pc, #24]	; (800c23c <tcp_write+0x6c4>)
 800c224:	4806      	ldr	r0, [pc, #24]	; (800c240 <tcp_write+0x6c8>)
 800c226:	f006 f997 	bl	8012558 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c22a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c22e:	4618      	mov	r0, r3
 800c230:	375c      	adds	r7, #92	; 0x5c
 800c232:	46bd      	mov	sp, r7
 800c234:	bd90      	pop	{r4, r7, pc}
 800c236:	bf00      	nop
 800c238:	08014d1c 	.word	0x08014d1c
 800c23c:	08015090 	.word	0x08015090
 800c240:	08014d70 	.word	0x08014d70

0800c244 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c244:	b590      	push	{r4, r7, lr}
 800c246:	b08b      	sub	sp, #44	; 0x2c
 800c248:	af02      	add	r7, sp, #8
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	2300      	movs	r3, #0
 800c256:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <tcp_split_unsent_seg+0x2c>
 800c262:	4b95      	ldr	r3, [pc, #596]	; (800c4b8 <tcp_split_unsent_seg+0x274>)
 800c264:	f240 324b 	movw	r2, #843	; 0x34b
 800c268:	4994      	ldr	r1, [pc, #592]	; (800c4bc <tcp_split_unsent_seg+0x278>)
 800c26a:	4895      	ldr	r0, [pc, #596]	; (800c4c0 <tcp_split_unsent_seg+0x27c>)
 800c26c:	f006 f974 	bl	8012558 <iprintf>

  useg = pcb->unsent;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c274:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d102      	bne.n	800c282 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c27c:	f04f 33ff 	mov.w	r3, #4294967295
 800c280:	e116      	b.n	800c4b0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c282:	887b      	ldrh	r3, [r7, #2]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d109      	bne.n	800c29c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c288:	4b8b      	ldr	r3, [pc, #556]	; (800c4b8 <tcp_split_unsent_seg+0x274>)
 800c28a:	f240 3253 	movw	r2, #851	; 0x353
 800c28e:	498d      	ldr	r1, [pc, #564]	; (800c4c4 <tcp_split_unsent_seg+0x280>)
 800c290:	488b      	ldr	r0, [pc, #556]	; (800c4c0 <tcp_split_unsent_seg+0x27c>)
 800c292:	f006 f961 	bl	8012558 <iprintf>
    return ERR_VAL;
 800c296:	f06f 0305 	mvn.w	r3, #5
 800c29a:	e109      	b.n	800c4b0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	891b      	ldrh	r3, [r3, #8]
 800c2a0:	887a      	ldrh	r2, [r7, #2]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d301      	bcc.n	800c2aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e102      	b.n	800c4b0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2ae:	887a      	ldrh	r2, [r7, #2]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d906      	bls.n	800c2c2 <tcp_split_unsent_seg+0x7e>
 800c2b4:	4b80      	ldr	r3, [pc, #512]	; (800c4b8 <tcp_split_unsent_seg+0x274>)
 800c2b6:	f240 325b 	movw	r2, #859	; 0x35b
 800c2ba:	4983      	ldr	r1, [pc, #524]	; (800c4c8 <tcp_split_unsent_seg+0x284>)
 800c2bc:	4880      	ldr	r0, [pc, #512]	; (800c4c0 <tcp_split_unsent_seg+0x27c>)
 800c2be:	f006 f94b 	bl	8012558 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	891b      	ldrh	r3, [r3, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d106      	bne.n	800c2d8 <tcp_split_unsent_seg+0x94>
 800c2ca:	4b7b      	ldr	r3, [pc, #492]	; (800c4b8 <tcp_split_unsent_seg+0x274>)
 800c2cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c2d0:	497e      	ldr	r1, [pc, #504]	; (800c4cc <tcp_split_unsent_seg+0x288>)
 800c2d2:	487b      	ldr	r0, [pc, #492]	; (800c4c0 <tcp_split_unsent_seg+0x27c>)
 800c2d4:	f006 f940 	bl	8012558 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	7a9b      	ldrb	r3, [r3, #10]
 800c2dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	f003 0304 	and.w	r3, r3, #4
 800c2e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	891a      	ldrh	r2, [r3, #8]
 800c2ee:	887b      	ldrh	r3, [r7, #2]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	89bb      	ldrh	r3, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c302:	4619      	mov	r1, r3
 800c304:	2036      	movs	r0, #54	; 0x36
 800c306:	f7fa fbd1 	bl	8006aac <pbuf_alloc>
 800c30a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f000 80b7 	beq.w	800c482 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	891a      	ldrh	r2, [r3, #8]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	891b      	ldrh	r3, [r3, #8]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	b29a      	uxth	r2, r3
 800c322:	887b      	ldrh	r3, [r7, #2]
 800c324:	4413      	add	r3, r2
 800c326:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	6858      	ldr	r0, [r3, #4]
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	18d1      	adds	r1, r2, r3
 800c334:	897b      	ldrh	r3, [r7, #10]
 800c336:	89ba      	ldrh	r2, [r7, #12]
 800c338:	f7fb f892 	bl	8007460 <pbuf_copy_partial>
 800c33c:	4603      	mov	r3, r0
 800c33e:	461a      	mov	r2, r3
 800c340:	89bb      	ldrh	r3, [r7, #12]
 800c342:	4293      	cmp	r3, r2
 800c344:	f040 809f 	bne.w	800c486 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	899b      	ldrh	r3, [r3, #12]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4618      	mov	r0, r3
 800c352:	f7f9 fbb3 	bl	8005abc <lwip_htons>
 800c356:	4603      	mov	r3, r0
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c35e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c360:	2300      	movs	r3, #0
 800c362:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c364:	7efb      	ldrb	r3, [r7, #27]
 800c366:	f003 0308 	and.w	r3, r3, #8
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d007      	beq.n	800c37e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c36e:	7efb      	ldrb	r3, [r7, #27]
 800c370:	f023 0308 	bic.w	r3, r3, #8
 800c374:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c376:	7ebb      	ldrb	r3, [r7, #26]
 800c378:	f043 0308 	orr.w	r3, r3, #8
 800c37c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c37e:	7efb      	ldrb	r3, [r7, #27]
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d007      	beq.n	800c398 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c388:	7efb      	ldrb	r3, [r7, #27]
 800c38a:	f023 0301 	bic.w	r3, r3, #1
 800c38e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c390:	7ebb      	ldrb	r3, [r7, #26]
 800c392:	f043 0301 	orr.w	r3, r3, #1
 800c396:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7f9 fba1 	bl	8005ae6 <lwip_htonl>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	887b      	ldrh	r3, [r7, #2]
 800c3a8:	18d1      	adds	r1, r2, r3
 800c3aa:	7eba      	ldrb	r2, [r7, #26]
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	6939      	ldr	r1, [r7, #16]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff fa4d 	bl	800b854 <tcp_create_segment>
 800c3ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d063      	beq.n	800c48a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fa fed8 	bl	800717c <pbuf_clen>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3d6:	1a9b      	subs	r3, r3, r2
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	6858      	ldr	r0, [r3, #4]
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	891a      	ldrh	r2, [r3, #8]
 800c3ea:	89bb      	ldrh	r3, [r7, #12]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	f7fa fcb5 	bl	8006d60 <pbuf_realloc>
  useg->len -= remainder;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	891a      	ldrh	r2, [r3, #8]
 800c3fa:	89bb      	ldrh	r3, [r7, #12]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	899b      	ldrh	r3, [r3, #12]
 800c40a:	b29c      	uxth	r4, r3
 800c40c:	7efb      	ldrb	r3, [r7, #27]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	4618      	mov	r0, r3
 800c412:	f7f9 fb53 	bl	8005abc <lwip_htons>
 800c416:	4603      	mov	r3, r0
 800c418:	461a      	mov	r2, r3
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	4322      	orrs	r2, r4
 800c420:	b292      	uxth	r2, r2
 800c422:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fa fea7 	bl	800717c <pbuf_clen>
 800c42e:	4603      	mov	r3, r0
 800c430:	461a      	mov	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c438:	4413      	add	r3, r2
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	4618      	mov	r0, r3
 800c448:	f7fa fe98 	bl	800717c <pbuf_clen>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c456:	4413      	add	r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	69fa      	ldr	r2, [r7, #28]
 800c46c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d103      	bne.n	800c47e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	e016      	b.n	800c4b0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c482:	bf00      	nop
 800c484:	e002      	b.n	800c48c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c486:	bf00      	nop
 800c488:	e000      	b.n	800c48c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c48a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d006      	beq.n	800c4a0 <tcp_split_unsent_seg+0x25c>
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <tcp_split_unsent_seg+0x274>)
 800c494:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c498:	490d      	ldr	r1, [pc, #52]	; (800c4d0 <tcp_split_unsent_seg+0x28c>)
 800c49a:	4809      	ldr	r0, [pc, #36]	; (800c4c0 <tcp_split_unsent_seg+0x27c>)
 800c49c:	f006 f85c 	bl	8012558 <iprintf>
  if (p != NULL) {
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c4a6:	6938      	ldr	r0, [r7, #16]
 800c4a8:	f7fa fde0 	bl	800706c <pbuf_free>
  }

  return ERR_MEM;
 800c4ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3724      	adds	r7, #36	; 0x24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd90      	pop	{r4, r7, pc}
 800c4b8:	08014d1c 	.word	0x08014d1c
 800c4bc:	080150b0 	.word	0x080150b0
 800c4c0:	08014d70 	.word	0x08014d70
 800c4c4:	080150d4 	.word	0x080150d4
 800c4c8:	080150f8 	.word	0x080150f8
 800c4cc:	08015108 	.word	0x08015108
 800c4d0:	08015118 	.word	0x08015118

0800c4d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c4d4:	b590      	push	{r4, r7, lr}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <tcp_send_fin+0x1c>
 800c4e2:	4b21      	ldr	r3, [pc, #132]	; (800c568 <tcp_send_fin+0x94>)
 800c4e4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c4e8:	4920      	ldr	r1, [pc, #128]	; (800c56c <tcp_send_fin+0x98>)
 800c4ea:	4821      	ldr	r0, [pc, #132]	; (800c570 <tcp_send_fin+0x9c>)
 800c4ec:	f006 f834 	bl	8012558 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d02e      	beq.n	800c556 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e002      	b.n	800c506 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1f8      	bne.n	800c500 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	899b      	ldrh	r3, [r3, #12]
 800c514:	b29b      	uxth	r3, r3
 800c516:	4618      	mov	r0, r3
 800c518:	f7f9 fad0 	bl	8005abc <lwip_htons>
 800c51c:	4603      	mov	r3, r0
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	f003 0307 	and.w	r3, r3, #7
 800c524:	2b00      	cmp	r3, #0
 800c526:	d116      	bne.n	800c556 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	899b      	ldrh	r3, [r3, #12]
 800c52e:	b29c      	uxth	r4, r3
 800c530:	2001      	movs	r0, #1
 800c532:	f7f9 fac3 	bl	8005abc <lwip_htons>
 800c536:	4603      	mov	r3, r0
 800c538:	461a      	mov	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	4322      	orrs	r2, r4
 800c540:	b292      	uxth	r2, r2
 800c542:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	8b5b      	ldrh	r3, [r3, #26]
 800c548:	f043 0320 	orr.w	r3, r3, #32
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	e004      	b.n	800c560 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c556:	2101      	movs	r1, #1
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f80b 	bl	800c574 <tcp_enqueue_flags>
 800c55e:	4603      	mov	r3, r0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	bd90      	pop	{r4, r7, pc}
 800c568:	08014d1c 	.word	0x08014d1c
 800c56c:	08015124 	.word	0x08015124
 800c570:	08014d70 	.word	0x08014d70

0800c574 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	; 0x28
 800c578:	af02      	add	r7, sp, #8
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c584:	2300      	movs	r3, #0
 800c586:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c588:	78fb      	ldrb	r3, [r7, #3]
 800c58a:	f003 0303 	and.w	r3, r3, #3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <tcp_enqueue_flags+0x2c>
 800c592:	4b67      	ldr	r3, [pc, #412]	; (800c730 <tcp_enqueue_flags+0x1bc>)
 800c594:	f240 4212 	movw	r2, #1042	; 0x412
 800c598:	4966      	ldr	r1, [pc, #408]	; (800c734 <tcp_enqueue_flags+0x1c0>)
 800c59a:	4867      	ldr	r0, [pc, #412]	; (800c738 <tcp_enqueue_flags+0x1c4>)
 800c59c:	f005 ffdc 	bl	8012558 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <tcp_enqueue_flags+0x40>
 800c5a6:	4b62      	ldr	r3, [pc, #392]	; (800c730 <tcp_enqueue_flags+0x1bc>)
 800c5a8:	f240 4213 	movw	r2, #1043	; 0x413
 800c5ac:	4963      	ldr	r1, [pc, #396]	; (800c73c <tcp_enqueue_flags+0x1c8>)
 800c5ae:	4862      	ldr	r0, [pc, #392]	; (800c738 <tcp_enqueue_flags+0x1c4>)
 800c5b0:	f005 ffd2 	bl	8012558 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c5b4:	78fb      	ldrb	r3, [r7, #3]
 800c5b6:	f003 0302 	and.w	r3, r3, #2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c5c2:	7ffb      	ldrb	r3, [r7, #31]
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	f003 0304 	and.w	r3, r3, #4
 800c5cc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	2036      	movs	r0, #54	; 0x36
 800c5da:	f7fa fa67 	bl	8006aac <pbuf_alloc>
 800c5de:	6138      	str	r0, [r7, #16]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d109      	bne.n	800c5fa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	8b5b      	ldrh	r3, [r3, #26]
 800c5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f8:	e095      	b.n	800c726 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	895a      	ldrh	r2, [r3, #10]
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	b29b      	uxth	r3, r3
 800c602:	429a      	cmp	r2, r3
 800c604:	d206      	bcs.n	800c614 <tcp_enqueue_flags+0xa0>
 800c606:	4b4a      	ldr	r3, [pc, #296]	; (800c730 <tcp_enqueue_flags+0x1bc>)
 800c608:	f240 423a 	movw	r2, #1082	; 0x43a
 800c60c:	494c      	ldr	r1, [pc, #304]	; (800c740 <tcp_enqueue_flags+0x1cc>)
 800c60e:	484a      	ldr	r0, [pc, #296]	; (800c738 <tcp_enqueue_flags+0x1c4>)
 800c610:	f005 ffa2 	bl	8012558 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c618:	78fa      	ldrb	r2, [r7, #3]
 800c61a:	7ffb      	ldrb	r3, [r7, #31]
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	460b      	mov	r3, r1
 800c620:	6939      	ldr	r1, [r7, #16]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7ff f916 	bl	800b854 <tcp_create_segment>
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8b5b      	ldrh	r3, [r3, #26]
 800c634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c63e:	f04f 33ff 	mov.w	r3, #4294967295
 800c642:	e070      	b.n	800c726 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	f003 0303 	and.w	r3, r3, #3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <tcp_enqueue_flags+0xea>
 800c650:	4b37      	ldr	r3, [pc, #220]	; (800c730 <tcp_enqueue_flags+0x1bc>)
 800c652:	f240 4242 	movw	r2, #1090	; 0x442
 800c656:	493b      	ldr	r1, [pc, #236]	; (800c744 <tcp_enqueue_flags+0x1d0>)
 800c658:	4837      	ldr	r0, [pc, #220]	; (800c738 <tcp_enqueue_flags+0x1c4>)
 800c65a:	f005 ff7d 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	891b      	ldrh	r3, [r3, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d006      	beq.n	800c674 <tcp_enqueue_flags+0x100>
 800c666:	4b32      	ldr	r3, [pc, #200]	; (800c730 <tcp_enqueue_flags+0x1bc>)
 800c668:	f240 4243 	movw	r2, #1091	; 0x443
 800c66c:	4936      	ldr	r1, [pc, #216]	; (800c748 <tcp_enqueue_flags+0x1d4>)
 800c66e:	4832      	ldr	r0, [pc, #200]	; (800c738 <tcp_enqueue_flags+0x1c4>)
 800c670:	f005 ff72 	bl	8012558 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d103      	bne.n	800c684 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	66da      	str	r2, [r3, #108]	; 0x6c
 800c682:	e00d      	b.n	800c6a0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	e002      	b.n	800c692 <tcp_enqueue_flags+0x11e>
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	61bb      	str	r3, [r7, #24]
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1f8      	bne.n	800c68c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	f003 0302 	and.w	r3, r3, #2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d104      	bne.n	800c6bc <tcp_enqueue_flags+0x148>
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c6c6:	78fb      	ldrb	r3, [r7, #3]
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d006      	beq.n	800c6de <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8b5b      	ldrh	r3, [r3, #26]
 800c6d4:	f043 0320 	orr.w	r3, r3, #32
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fa fd4a 	bl	800717c <pbuf_clen>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c6f2:	4413      	add	r3, r2
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00e      	beq.n	800c724 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10a      	bne.n	800c724 <tcp_enqueue_flags+0x1b0>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c712:	2b00      	cmp	r3, #0
 800c714:	d106      	bne.n	800c724 <tcp_enqueue_flags+0x1b0>
 800c716:	4b06      	ldr	r3, [pc, #24]	; (800c730 <tcp_enqueue_flags+0x1bc>)
 800c718:	f240 4266 	movw	r2, #1126	; 0x466
 800c71c:	490b      	ldr	r1, [pc, #44]	; (800c74c <tcp_enqueue_flags+0x1d8>)
 800c71e:	4806      	ldr	r0, [pc, #24]	; (800c738 <tcp_enqueue_flags+0x1c4>)
 800c720:	f005 ff1a 	bl	8012558 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3720      	adds	r7, #32
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	08014d1c 	.word	0x08014d1c
 800c734:	08015140 	.word	0x08015140
 800c738:	08014d70 	.word	0x08014d70
 800c73c:	08015198 	.word	0x08015198
 800c740:	080151b8 	.word	0x080151b8
 800c744:	080151f4 	.word	0x080151f4
 800c748:	0801520c 	.word	0x0801520c
 800c74c:	08015238 	.word	0x08015238

0800c750 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c750:	b5b0      	push	{r4, r5, r7, lr}
 800c752:	b08a      	sub	sp, #40	; 0x28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d106      	bne.n	800c76c <tcp_output+0x1c>
 800c75e:	4ba0      	ldr	r3, [pc, #640]	; (800c9e0 <tcp_output+0x290>)
 800c760:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c764:	499f      	ldr	r1, [pc, #636]	; (800c9e4 <tcp_output+0x294>)
 800c766:	48a0      	ldr	r0, [pc, #640]	; (800c9e8 <tcp_output+0x298>)
 800c768:	f005 fef6 	bl	8012558 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7d1b      	ldrb	r3, [r3, #20]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d106      	bne.n	800c782 <tcp_output+0x32>
 800c774:	4b9a      	ldr	r3, [pc, #616]	; (800c9e0 <tcp_output+0x290>)
 800c776:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800c77a:	499c      	ldr	r1, [pc, #624]	; (800c9ec <tcp_output+0x29c>)
 800c77c:	489a      	ldr	r0, [pc, #616]	; (800c9e8 <tcp_output+0x298>)
 800c77e:	f005 feeb 	bl	8012558 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c782:	4b9b      	ldr	r3, [pc, #620]	; (800c9f0 <tcp_output+0x2a0>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d101      	bne.n	800c790 <tcp_output+0x40>
    return ERR_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	e1d2      	b.n	800cb36 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d203      	bcs.n	800c7a8 <tcp_output+0x58>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7a6:	e002      	b.n	800c7ae <tcp_output+0x5e>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7ae:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10b      	bne.n	800c7d4 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	8b5b      	ldrh	r3, [r3, #26]
 800c7c0:	f003 0302 	and.w	r3, r3, #2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 81a9 	beq.w	800cb1c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fdd8 	bl	800d380 <tcp_send_empty_ack>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	e1b0      	b.n	800cb36 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c7d4:	6879      	ldr	r1, [r7, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	461a      	mov	r2, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7ff f81d 	bl	800b81c <tcp_route>
 800c7e2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <tcp_output+0xa0>
    return ERR_RTE;
 800c7ea:	f06f 0303 	mvn.w	r3, #3
 800c7ee:	e1a2      	b.n	800cb36 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <tcp_output+0xae>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d111      	bne.n	800c822 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <tcp_output+0xba>
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	3304      	adds	r3, #4
 800c808:	e000      	b.n	800c80c <tcp_output+0xbc>
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <tcp_output+0xca>
      return ERR_RTE;
 800c814:	f06f 0303 	mvn.w	r3, #3
 800c818:	e18d      	b.n	800cb36 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	f7f9 f95c 	bl	8005ae6 <lwip_htonl>
 800c82e:	4602      	mov	r2, r0
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c838:	8912      	ldrh	r2, [r2, #8]
 800c83a:	4413      	add	r3, r2
 800c83c:	69ba      	ldr	r2, [r7, #24]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d227      	bcs.n	800c892 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c848:	461a      	mov	r2, r3
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d114      	bne.n	800c87a <tcp_output+0x12a>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c854:	2b00      	cmp	r3, #0
 800c856:	d110      	bne.n	800c87a <tcp_output+0x12a>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10b      	bne.n	800c87a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	8b5b      	ldrh	r3, [r3, #26]
 800c87e:	f003 0302 	and.w	r3, r3, #2
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 814c 	beq.w	800cb20 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fd79 	bl	800d380 <tcp_send_empty_ack>
 800c88e:	4603      	mov	r3, r0
 800c890:	e151      	b.n	800cb36 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c89e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 811b 	beq.w	800cade <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800c8a8:	e002      	b.n	800c8b0 <tcp_output+0x160>
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	623b      	str	r3, [r7, #32]
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1f8      	bne.n	800c8aa <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c8b8:	e111      	b.n	800cade <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	899b      	ldrh	r3, [r3, #12]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7f9 f8fa 	bl	8005abc <lwip_htons>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0304 	and.w	r3, r3, #4
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d006      	beq.n	800c8e2 <tcp_output+0x192>
 800c8d4:	4b42      	ldr	r3, [pc, #264]	; (800c9e0 <tcp_output+0x290>)
 800c8d6:	f240 5237 	movw	r2, #1335	; 0x537
 800c8da:	4946      	ldr	r1, [pc, #280]	; (800c9f4 <tcp_output+0x2a4>)
 800c8dc:	4842      	ldr	r0, [pc, #264]	; (800c9e8 <tcp_output+0x298>)
 800c8de:	f005 fe3b 	bl	8012558 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d01f      	beq.n	800c92a <tcp_output+0x1da>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	8b5b      	ldrh	r3, [r3, #26]
 800c8ee:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d119      	bne.n	800c92a <tcp_output+0x1da>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <tcp_output+0x1c6>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d110      	bne.n	800c92a <tcp_output+0x1da>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c90c:	891a      	ldrh	r2, [r3, #8]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c912:	429a      	cmp	r2, r3
 800c914:	d209      	bcs.n	800c92a <tcp_output+0x1da>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <tcp_output+0x1da>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c926:	2b08      	cmp	r3, #8
 800c928:	d901      	bls.n	800c92e <tcp_output+0x1de>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e000      	b.n	800c930 <tcp_output+0x1e0>
 800c92e:	2300      	movs	r3, #0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8b5b      	ldrh	r3, [r3, #26]
 800c938:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 80e3 	beq.w	800cb08 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	7d1b      	ldrb	r3, [r3, #20]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d00d      	beq.n	800c966 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	899b      	ldrh	r3, [r3, #12]
 800c950:	b29c      	uxth	r4, r3
 800c952:	2010      	movs	r0, #16
 800c954:	f7f9 f8b2 	bl	8005abc <lwip_htons>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	4322      	orrs	r2, r4
 800c962:	b292      	uxth	r2, r2
 800c964:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c96c:	f000 f908 	bl	800cb80 <tcp_output_segment>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d009      	beq.n	800c990 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	8b5b      	ldrh	r3, [r3, #26]
 800c980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c984:	b29a      	uxth	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	835a      	strh	r2, [r3, #26]
      return err;
 800c98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c98e:	e0d2      	b.n	800cb36 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7d1b      	ldrb	r3, [r3, #20]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d006      	beq.n	800c9ae <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8b5b      	ldrh	r3, [r3, #26]
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f9 f896 	bl	8005ae6 <lwip_htonl>
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	891b      	ldrh	r3, [r3, #8]
 800c9c0:	461d      	mov	r5, r3
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	899b      	ldrh	r3, [r3, #12]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7f9 f876 	bl	8005abc <lwip_htons>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	f003 0303 	and.w	r3, r3, #3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00d      	beq.n	800c9f8 <tcp_output+0x2a8>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e00c      	b.n	800c9fa <tcp_output+0x2aa>
 800c9e0:	08014d1c 	.word	0x08014d1c
 800c9e4:	08015260 	.word	0x08015260
 800c9e8:	08014d70 	.word	0x08014d70
 800c9ec:	08015278 	.word	0x08015278
 800c9f0:	2000719c 	.word	0x2000719c
 800c9f4:	080152a0 	.word	0x080152a0
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	442b      	add	r3, r5
 800c9fc:	4423      	add	r3, r4
 800c9fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	da02      	bge.n	800ca12 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	891b      	ldrh	r3, [r3, #8]
 800ca16:	461c      	mov	r4, r3
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	899b      	ldrh	r3, [r3, #12]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7f9 f84b 	bl	8005abc <lwip_htons>
 800ca26:	4603      	mov	r3, r0
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <tcp_output+0x2e6>
 800ca32:	2301      	movs	r3, #1
 800ca34:	e000      	b.n	800ca38 <tcp_output+0x2e8>
 800ca36:	2300      	movs	r3, #0
 800ca38:	4423      	add	r3, r4
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d049      	beq.n	800cad2 <tcp_output+0x382>
      seg->next = NULL;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	2200      	movs	r2, #0
 800ca42:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <tcp_output+0x308>
        pcb->unacked = seg;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca50:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca54:	623b      	str	r3, [r7, #32]
 800ca56:	e03f      	b.n	800cad8 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f9 f841 	bl	8005ae6 <lwip_htonl>
 800ca64:	4604      	mov	r4, r0
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7f9 f83a 	bl	8005ae6 <lwip_htonl>
 800ca72:	4603      	mov	r3, r0
 800ca74:	1ae3      	subs	r3, r4, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	da24      	bge.n	800cac4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3370      	adds	r3, #112	; 0x70
 800ca7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ca80:	e002      	b.n	800ca88 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d011      	beq.n	800cab4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f9 f824 	bl	8005ae6 <lwip_htonl>
 800ca9e:	4604      	mov	r4, r0
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f9 f81d 	bl	8005ae6 <lwip_htonl>
 800caac:	4603      	mov	r3, r0
 800caae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dbe6      	blt.n	800ca82 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	e009      	b.n	800cad8 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cac4:	6a3b      	ldr	r3, [r7, #32]
 800cac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	623b      	str	r3, [r7, #32]
 800cad0:	e002      	b.n	800cad8 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cad4:	f7fb fefc 	bl	80088d0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d012      	beq.n	800cb0a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	4618      	mov	r0, r3
 800caec:	f7f8 fffb 	bl	8005ae6 <lwip_htonl>
 800caf0:	4602      	mov	r2, r0
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafa:	8912      	ldrh	r2, [r2, #8]
 800cafc:	4413      	add	r3, r2
  while (seg != NULL &&
 800cafe:	69ba      	ldr	r2, [r7, #24]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	f4bf aeda 	bcs.w	800c8ba <tcp_output+0x16a>
 800cb06:	e000      	b.n	800cb0a <tcp_output+0x3ba>
      break;
 800cb08:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d108      	bne.n	800cb24 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cb1a:	e004      	b.n	800cb26 <tcp_output+0x3d6>
    goto output_done;
 800cb1c:	bf00      	nop
 800cb1e:	e002      	b.n	800cb26 <tcp_output+0x3d6>
    goto output_done;
 800cb20:	bf00      	nop
 800cb22:	e000      	b.n	800cb26 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cb24:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	8b5b      	ldrh	r3, [r3, #26]
 800cb2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3728      	adds	r7, #40	; 0x28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb3e:	bf00      	nop

0800cb40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d106      	bne.n	800cb5c <tcp_output_segment_busy+0x1c>
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <tcp_output_segment_busy+0x34>)
 800cb50:	f240 529a 	movw	r2, #1434	; 0x59a
 800cb54:	4908      	ldr	r1, [pc, #32]	; (800cb78 <tcp_output_segment_busy+0x38>)
 800cb56:	4809      	ldr	r0, [pc, #36]	; (800cb7c <tcp_output_segment_busy+0x3c>)
 800cb58:	f005 fcfe 	bl	8012558 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	7b9b      	ldrb	r3, [r3, #14]
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d001      	beq.n	800cb6a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e000      	b.n	800cb6c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	08014d1c 	.word	0x08014d1c
 800cb78:	080152b8 	.word	0x080152b8
 800cb7c:	08014d70 	.word	0x08014d70

0800cb80 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cb80:	b5b0      	push	{r4, r5, r7, lr}
 800cb82:	b08c      	sub	sp, #48	; 0x30
 800cb84:	af04      	add	r7, sp, #16
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <tcp_output_segment+0x20>
 800cb92:	4b64      	ldr	r3, [pc, #400]	; (800cd24 <tcp_output_segment+0x1a4>)
 800cb94:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cb98:	4963      	ldr	r1, [pc, #396]	; (800cd28 <tcp_output_segment+0x1a8>)
 800cb9a:	4864      	ldr	r0, [pc, #400]	; (800cd2c <tcp_output_segment+0x1ac>)
 800cb9c:	f005 fcdc 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d106      	bne.n	800cbb4 <tcp_output_segment+0x34>
 800cba6:	4b5f      	ldr	r3, [pc, #380]	; (800cd24 <tcp_output_segment+0x1a4>)
 800cba8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cbac:	4960      	ldr	r1, [pc, #384]	; (800cd30 <tcp_output_segment+0x1b0>)
 800cbae:	485f      	ldr	r0, [pc, #380]	; (800cd2c <tcp_output_segment+0x1ac>)
 800cbb0:	f005 fcd2 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d106      	bne.n	800cbc8 <tcp_output_segment+0x48>
 800cbba:	4b5a      	ldr	r3, [pc, #360]	; (800cd24 <tcp_output_segment+0x1a4>)
 800cbbc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cbc0:	495c      	ldr	r1, [pc, #368]	; (800cd34 <tcp_output_segment+0x1b4>)
 800cbc2:	485a      	ldr	r0, [pc, #360]	; (800cd2c <tcp_output_segment+0x1ac>)
 800cbc4:	f005 fcc8 	bl	8012558 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff ffb9 	bl	800cb40 <tcp_output_segment_busy>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e0a0      	b.n	800cd1a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	68dc      	ldr	r4, [r3, #12]
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	f7f8 ff80 	bl	8005ae6 <lwip_htonl>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	68dc      	ldr	r4, [r3, #12]
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7f8 ff62 	bl	8005abc <lwip_htons>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cc04:	441a      	add	r2, r3
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	3314      	adds	r3, #20
 800cc10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	7a9b      	ldrb	r3, [r3, #10]
 800cc16:	f003 0301 	and.w	r3, r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d015      	beq.n	800cc4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	3304      	adds	r3, #4
 800cc22:	461a      	mov	r2, r3
 800cc24:	6879      	ldr	r1, [r7, #4]
 800cc26:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cc2a:	f7fc fa33 	bl	8009094 <tcp_eff_send_mss_netif>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cc32:	8b7b      	ldrh	r3, [r7, #26]
 800cc34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7f8 ff54 	bl	8005ae6 <lwip_htonl>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	3304      	adds	r3, #4
 800cc48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	da02      	bge.n	800cc5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	2200      	movs	r2, #0
 800cc58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10c      	bne.n	800cc7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cc62:	4b35      	ldr	r3, [pc, #212]	; (800cd38 <tcp_output_segment+0x1b8>)
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f8 ff38 	bl	8005ae6 <lwip_htonl>
 800cc76:	4602      	mov	r2, r0
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	461a      	mov	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	8959      	ldrh	r1, [r3, #10]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	8b3a      	ldrh	r2, [r7, #24]
 800cc98:	1a8a      	subs	r2, r1, r2
 800cc9a:	b292      	uxth	r2, r2
 800cc9c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	8919      	ldrh	r1, [r3, #8]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	8b3a      	ldrh	r2, [r7, #24]
 800ccaa:	1a8a      	subs	r2, r1, r2
 800ccac:	b292      	uxth	r2, r2
 800ccae:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	68d2      	ldr	r2, [r2, #12]
 800ccb8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	741a      	strb	r2, [r3, #16]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	f103 0214 	add.w	r2, r3, #20
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	7a9b      	ldrb	r3, [r3, #10]
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	4413      	add	r3, r2
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d006      	beq.n	800ccee <tcp_output_segment+0x16e>
 800cce0:	4b10      	ldr	r3, [pc, #64]	; (800cd24 <tcp_output_segment+0x1a4>)
 800cce2:	f240 621c 	movw	r2, #1564	; 0x61c
 800cce6:	4915      	ldr	r1, [pc, #84]	; (800cd3c <tcp_output_segment+0x1bc>)
 800cce8:	4810      	ldr	r0, [pc, #64]	; (800cd2c <tcp_output_segment+0x1ac>)
 800ccea:	f005 fc35 	bl	8012558 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6858      	ldr	r0, [r3, #4]
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	1d1c      	adds	r4, r3, #4
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	7add      	ldrb	r5, [r3, #11]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	7a9b      	ldrb	r3, [r3, #10]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	9202      	str	r2, [sp, #8]
 800cd04:	2206      	movs	r2, #6
 800cd06:	9201      	str	r2, [sp, #4]
 800cd08:	9300      	str	r3, [sp, #0]
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	f004 fbb9 	bl	8011484 <ip4_output_if>
 800cd12:	4603      	mov	r3, r0
 800cd14:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cd16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bdb0      	pop	{r4, r5, r7, pc}
 800cd22:	bf00      	nop
 800cd24:	08014d1c 	.word	0x08014d1c
 800cd28:	080152e0 	.word	0x080152e0
 800cd2c:	08014d70 	.word	0x08014d70
 800cd30:	08015300 	.word	0x08015300
 800cd34:	08015320 	.word	0x08015320
 800cd38:	2000718c 	.word	0x2000718c
 800cd3c:	08015344 	.word	0x08015344

0800cd40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cd40:	b5b0      	push	{r4, r5, r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <tcp_rexmit_rto_prepare+0x1c>
 800cd4e:	4b31      	ldr	r3, [pc, #196]	; (800ce14 <tcp_rexmit_rto_prepare+0xd4>)
 800cd50:	f240 6263 	movw	r2, #1635	; 0x663
 800cd54:	4930      	ldr	r1, [pc, #192]	; (800ce18 <tcp_rexmit_rto_prepare+0xd8>)
 800cd56:	4831      	ldr	r0, [pc, #196]	; (800ce1c <tcp_rexmit_rto_prepare+0xdc>)
 800cd58:	f005 fbfe 	bl	8012558 <iprintf>

  if (pcb->unacked == NULL) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cd64:	f06f 0305 	mvn.w	r3, #5
 800cd68:	e050      	b.n	800ce0c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	e00b      	b.n	800cd8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f7ff fee4 	bl	800cb40 <tcp_output_segment_busy>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cd7e:	f06f 0305 	mvn.w	r3, #5
 800cd82:	e043      	b.n	800ce0c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60fb      	str	r3, [r7, #12]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1ef      	bne.n	800cd72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f7ff fed4 	bl	800cb40 <tcp_output_segment_busy>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cd9e:	f06f 0305 	mvn.w	r3, #5
 800cda2:	e033      	b.n	800ce0c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	8b5b      	ldrh	r3, [r3, #26]
 800cdbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f8 fe89 	bl	8005ae6 <lwip_htonl>
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	891b      	ldrh	r3, [r3, #8]
 800cdda:	461d      	mov	r5, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	899b      	ldrh	r3, [r3, #12]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f8 fe69 	bl	8005abc <lwip_htons>
 800cdea:	4603      	mov	r3, r0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <tcp_rexmit_rto_prepare+0xba>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e000      	b.n	800cdfc <tcp_rexmit_rto_prepare+0xbc>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	442b      	add	r3, r5
 800cdfe:	18e2      	adds	r2, r4, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bdb0      	pop	{r4, r5, r7, pc}
 800ce14:	08014d1c 	.word	0x08014d1c
 800ce18:	08015358 	.word	0x08015358
 800ce1c:	08014d70 	.word	0x08014d70

0800ce20 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d106      	bne.n	800ce3c <tcp_rexmit_rto_commit+0x1c>
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <tcp_rexmit_rto_commit+0x44>)
 800ce30:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ce34:	490c      	ldr	r1, [pc, #48]	; (800ce68 <tcp_rexmit_rto_commit+0x48>)
 800ce36:	480d      	ldr	r0, [pc, #52]	; (800ce6c <tcp_rexmit_rto_commit+0x4c>)
 800ce38:	f005 fb8e 	bl	8012558 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce42:	2bff      	cmp	r3, #255	; 0xff
 800ce44:	d007      	beq.n	800ce56 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7ff fc7a 	bl	800c750 <tcp_output>
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	08014d1c 	.word	0x08014d1c
 800ce68:	0801537c 	.word	0x0801537c
 800ce6c:	08014d70 	.word	0x08014d70

0800ce70 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <tcp_rexmit_rto+0x1c>
 800ce7e:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <tcp_rexmit_rto+0x38>)
 800ce80:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ce84:	4909      	ldr	r1, [pc, #36]	; (800ceac <tcp_rexmit_rto+0x3c>)
 800ce86:	480a      	ldr	r0, [pc, #40]	; (800ceb0 <tcp_rexmit_rto+0x40>)
 800ce88:	f005 fb66 	bl	8012558 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7ff ff57 	bl	800cd40 <tcp_rexmit_rto_prepare>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d102      	bne.n	800ce9e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff ffc1 	bl	800ce20 <tcp_rexmit_rto_commit>
  }
}
 800ce9e:	bf00      	nop
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08014d1c 	.word	0x08014d1c
 800ceac:	080153a0 	.word	0x080153a0
 800ceb0:	08014d70 	.word	0x08014d70

0800ceb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <tcp_rexmit+0x1c>
 800cec2:	4b2f      	ldr	r3, [pc, #188]	; (800cf80 <tcp_rexmit+0xcc>)
 800cec4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cec8:	492e      	ldr	r1, [pc, #184]	; (800cf84 <tcp_rexmit+0xd0>)
 800ceca:	482f      	ldr	r0, [pc, #188]	; (800cf88 <tcp_rexmit+0xd4>)
 800cecc:	f005 fb44 	bl	8012558 <iprintf>

  if (pcb->unacked == NULL) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ced8:	f06f 0305 	mvn.w	r3, #5
 800cedc:	e04c      	b.n	800cf78 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cee4:	68b8      	ldr	r0, [r7, #8]
 800cee6:	f7ff fe2b 	bl	800cb40 <tcp_output_segment_busy>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cef0:	f06f 0305 	mvn.w	r3, #5
 800cef4:	e040      	b.n	800cf78 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	336c      	adds	r3, #108	; 0x6c
 800cf02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf04:	e002      	b.n	800cf0c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d011      	beq.n	800cf38 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f8 fde2 	bl	8005ae6 <lwip_htonl>
 800cf22:	4604      	mov	r4, r0
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7f8 fddb 	bl	8005ae6 <lwip_htonl>
 800cf30:	4603      	mov	r3, r0
 800cf32:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	dbe6      	blt.n	800cf06 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d103      	bne.n	800cf56 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf5c:	2bff      	cmp	r3, #255	; 0xff
 800cf5e:	d007      	beq.n	800cf70 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf66:	3301      	adds	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd90      	pop	{r4, r7, pc}
 800cf80:	08014d1c 	.word	0x08014d1c
 800cf84:	080153bc 	.word	0x080153bc
 800cf88:	08014d70 	.word	0x08014d70

0800cf8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d106      	bne.n	800cfa8 <tcp_rexmit_fast+0x1c>
 800cf9a:	4b2f      	ldr	r3, [pc, #188]	; (800d058 <tcp_rexmit_fast+0xcc>)
 800cf9c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cfa0:	492e      	ldr	r1, [pc, #184]	; (800d05c <tcp_rexmit_fast+0xd0>)
 800cfa2:	482f      	ldr	r0, [pc, #188]	; (800d060 <tcp_rexmit_fast+0xd4>)
 800cfa4:	f005 fad8 	bl	8012558 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d04f      	beq.n	800d050 <tcp_rexmit_fast+0xc4>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	8b5b      	ldrh	r3, [r3, #26]
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d149      	bne.n	800d050 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff ff79 	bl	800ceb4 <tcp_rexmit>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d143      	bne.n	800d050 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d208      	bcs.n	800cfea <tcp_rexmit_fast+0x5e>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	da00      	bge.n	800cfe4 <tcp_rexmit_fast+0x58>
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	105b      	asrs	r3, r3, #1
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	e007      	b.n	800cffa <tcp_rexmit_fast+0x6e>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da00      	bge.n	800cff6 <tcp_rexmit_fast+0x6a>
 800cff4:	3301      	adds	r3, #1
 800cff6:	105b      	asrs	r3, r3, #1
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d006:	461a      	mov	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d00c:	005b      	lsls	r3, r3, #1
 800d00e:	429a      	cmp	r2, r3
 800d010:	d206      	bcs.n	800d020 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	b29a      	uxth	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d02a:	4619      	mov	r1, r3
 800d02c:	0049      	lsls	r1, r1, #1
 800d02e:	440b      	add	r3, r1
 800d030:	b29b      	uxth	r3, r3
 800d032:	4413      	add	r3, r2
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	8b5b      	ldrh	r3, [r3, #26]
 800d040:	f043 0304 	orr.w	r3, r3, #4
 800d044:	b29a      	uxth	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08014d1c 	.word	0x08014d1c
 800d05c:	080153d4 	.word	0x080153d4
 800d060:	08014d70 	.word	0x08014d70

0800d064 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	607b      	str	r3, [r7, #4]
 800d06e:	460b      	mov	r3, r1
 800d070:	817b      	strh	r3, [r7, #10]
 800d072:	4613      	mov	r3, r2
 800d074:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d076:	897a      	ldrh	r2, [r7, #10]
 800d078:	893b      	ldrh	r3, [r7, #8]
 800d07a:	4413      	add	r3, r2
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	3314      	adds	r3, #20
 800d080:	b29b      	uxth	r3, r3
 800d082:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d086:	4619      	mov	r1, r3
 800d088:	2022      	movs	r0, #34	; 0x22
 800d08a:	f7f9 fd0f 	bl	8006aac <pbuf_alloc>
 800d08e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d04e      	beq.n	800d134 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	895b      	ldrh	r3, [r3, #10]
 800d09a:	461a      	mov	r2, r3
 800d09c:	897b      	ldrh	r3, [r7, #10]
 800d09e:	3314      	adds	r3, #20
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	da06      	bge.n	800d0b2 <tcp_output_alloc_header_common+0x4e>
 800d0a4:	4b26      	ldr	r3, [pc, #152]	; (800d140 <tcp_output_alloc_header_common+0xdc>)
 800d0a6:	f240 7224 	movw	r2, #1828	; 0x724
 800d0aa:	4926      	ldr	r1, [pc, #152]	; (800d144 <tcp_output_alloc_header_common+0xe0>)
 800d0ac:	4826      	ldr	r0, [pc, #152]	; (800d148 <tcp_output_alloc_header_common+0xe4>)
 800d0ae:	f005 fa53 	bl	8012558 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d0b8:	8c3b      	ldrh	r3, [r7, #32]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f8 fcfe 	bl	8005abc <lwip_htons>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7f8 fcf6 	bl	8005abc <lwip_htons>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7f8 fd01 	bl	8005ae6 <lwip_htonl>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d0ea:	897b      	ldrh	r3, [r7, #10]
 800d0ec:	089b      	lsrs	r3, r3, #2
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	3305      	adds	r3, #5
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	031b      	lsls	r3, r3, #12
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	4313      	orrs	r3, r2
 800d100:	b29b      	uxth	r3, r3
 800d102:	4618      	mov	r0, r3
 800d104:	f7f8 fcda 	bl	8005abc <lwip_htons>
 800d108:	4603      	mov	r3, r0
 800d10a:	461a      	mov	r2, r3
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d112:	4618      	mov	r0, r3
 800d114:	f7f8 fcd2 	bl	8005abc <lwip_htons>
 800d118:	4603      	mov	r3, r0
 800d11a:	461a      	mov	r2, r3
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2200      	movs	r2, #0
 800d124:	741a      	strb	r2, [r3, #16]
 800d126:	2200      	movs	r2, #0
 800d128:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2200      	movs	r2, #0
 800d12e:	749a      	strb	r2, [r3, #18]
 800d130:	2200      	movs	r2, #0
 800d132:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d134:	697b      	ldr	r3, [r7, #20]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	08014d1c 	.word	0x08014d1c
 800d144:	080153f4 	.word	0x080153f4
 800d148:	08014d70 	.word	0x08014d70

0800d14c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d14c:	b5b0      	push	{r4, r5, r7, lr}
 800d14e:	b08a      	sub	sp, #40	; 0x28
 800d150:	af04      	add	r7, sp, #16
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	607b      	str	r3, [r7, #4]
 800d156:	460b      	mov	r3, r1
 800d158:	817b      	strh	r3, [r7, #10]
 800d15a:	4613      	mov	r3, r2
 800d15c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <tcp_output_alloc_header+0x26>
 800d164:	4b15      	ldr	r3, [pc, #84]	; (800d1bc <tcp_output_alloc_header+0x70>)
 800d166:	f240 7242 	movw	r2, #1858	; 0x742
 800d16a:	4915      	ldr	r1, [pc, #84]	; (800d1c0 <tcp_output_alloc_header+0x74>)
 800d16c:	4815      	ldr	r0, [pc, #84]	; (800d1c4 <tcp_output_alloc_header+0x78>)
 800d16e:	f005 f9f3 	bl	8012558 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	8adb      	ldrh	r3, [r3, #22]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	8b12      	ldrh	r2, [r2, #24]
 800d17e:	68f9      	ldr	r1, [r7, #12]
 800d180:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d182:	893d      	ldrh	r5, [r7, #8]
 800d184:	897c      	ldrh	r4, [r7, #10]
 800d186:	9103      	str	r1, [sp, #12]
 800d188:	2110      	movs	r1, #16
 800d18a:	9102      	str	r1, [sp, #8]
 800d18c:	9201      	str	r2, [sp, #4]
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	462a      	mov	r2, r5
 800d194:	4621      	mov	r1, r4
 800d196:	f7ff ff65 	bl	800d064 <tcp_output_alloc_header_common>
 800d19a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d006      	beq.n	800d1b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d1aa:	441a      	add	r2, r3
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d1b0:	697b      	ldr	r3, [r7, #20]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	08014d1c 	.word	0x08014d1c
 800d1c0:	08015424 	.word	0x08015424
 800d1c4:	08014d70 	.word	0x08014d70

0800d1c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	71fb      	strb	r3, [r7, #7]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d106      	bne.n	800d1f6 <tcp_output_fill_options+0x2e>
 800d1e8:	4b13      	ldr	r3, [pc, #76]	; (800d238 <tcp_output_fill_options+0x70>)
 800d1ea:	f240 7256 	movw	r2, #1878	; 0x756
 800d1ee:	4913      	ldr	r1, [pc, #76]	; (800d23c <tcp_output_fill_options+0x74>)
 800d1f0:	4813      	ldr	r0, [pc, #76]	; (800d240 <tcp_output_fill_options+0x78>)
 800d1f2:	f005 f9b1 	bl	8012558 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	3314      	adds	r3, #20
 800d200:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	f103 0214 	add.w	r2, r3, #20
 800d208:	8bfb      	ldrh	r3, [r7, #30]
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4619      	mov	r1, r3
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	f003 0304 	and.w	r3, r3, #4
 800d216:	440b      	add	r3, r1
 800d218:	4413      	add	r3, r2
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d006      	beq.n	800d22e <tcp_output_fill_options+0x66>
 800d220:	4b05      	ldr	r3, [pc, #20]	; (800d238 <tcp_output_fill_options+0x70>)
 800d222:	f240 7275 	movw	r2, #1909	; 0x775
 800d226:	4907      	ldr	r1, [pc, #28]	; (800d244 <tcp_output_fill_options+0x7c>)
 800d228:	4805      	ldr	r0, [pc, #20]	; (800d240 <tcp_output_fill_options+0x78>)
 800d22a:	f005 f995 	bl	8012558 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d22e:	bf00      	nop
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	08014d1c 	.word	0x08014d1c
 800d23c:	0801544c 	.word	0x0801544c
 800d240:	08014d70 	.word	0x08014d70
 800d244:	08015344 	.word	0x08015344

0800d248 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08a      	sub	sp, #40	; 0x28
 800d24c:	af04      	add	r7, sp, #16
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d106      	bne.n	800d26a <tcp_output_control_segment+0x22>
 800d25c:	4b1c      	ldr	r3, [pc, #112]	; (800d2d0 <tcp_output_control_segment+0x88>)
 800d25e:	f240 7287 	movw	r2, #1927	; 0x787
 800d262:	491c      	ldr	r1, [pc, #112]	; (800d2d4 <tcp_output_control_segment+0x8c>)
 800d264:	481c      	ldr	r0, [pc, #112]	; (800d2d8 <tcp_output_control_segment+0x90>)
 800d266:	f005 f977 	bl	8012558 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	6879      	ldr	r1, [r7, #4]
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7fe fad4 	bl	800b81c <tcp_route>
 800d274:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d27c:	23fc      	movs	r3, #252	; 0xfc
 800d27e:	75fb      	strb	r3, [r7, #23]
 800d280:	e01c      	b.n	800d2bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d006      	beq.n	800d296 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	7adb      	ldrb	r3, [r3, #11]
 800d28c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	7a9b      	ldrb	r3, [r3, #10]
 800d292:	757b      	strb	r3, [r7, #21]
 800d294:	e003      	b.n	800d29e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d296:	23ff      	movs	r3, #255	; 0xff
 800d298:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d29e:	7dba      	ldrb	r2, [r7, #22]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	9302      	str	r3, [sp, #8]
 800d2a4:	2306      	movs	r3, #6
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	7d7b      	ldrb	r3, [r7, #21]
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	6879      	ldr	r1, [r7, #4]
 800d2b2:	68b8      	ldr	r0, [r7, #8]
 800d2b4:	f004 f8e6 	bl	8011484 <ip4_output_if>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f7f9 fed5 	bl	800706c <pbuf_free>
  return err;
 800d2c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	08014d1c 	.word	0x08014d1c
 800d2d4:	08015474 	.word	0x08015474
 800d2d8:	08014d70 	.word	0x08014d70

0800d2dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d2dc:	b590      	push	{r4, r7, lr}
 800d2de:	b08b      	sub	sp, #44	; 0x2c
 800d2e0:	af04      	add	r7, sp, #16
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d106      	bne.n	800d2fe <tcp_rst+0x22>
 800d2f0:	4b1f      	ldr	r3, [pc, #124]	; (800d370 <tcp_rst+0x94>)
 800d2f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d2f6:	491f      	ldr	r1, [pc, #124]	; (800d374 <tcp_rst+0x98>)
 800d2f8:	481f      	ldr	r0, [pc, #124]	; (800d378 <tcp_rst+0x9c>)
 800d2fa:	f005 f92d 	bl	8012558 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <tcp_rst+0x36>
 800d304:	4b1a      	ldr	r3, [pc, #104]	; (800d370 <tcp_rst+0x94>)
 800d306:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d30a:	491c      	ldr	r1, [pc, #112]	; (800d37c <tcp_rst+0xa0>)
 800d30c:	481a      	ldr	r0, [pc, #104]	; (800d378 <tcp_rst+0x9c>)
 800d30e:	f005 f923 	bl	8012558 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d312:	2300      	movs	r3, #0
 800d314:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d316:	f246 0308 	movw	r3, #24584	; 0x6008
 800d31a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d31c:	7dfb      	ldrb	r3, [r7, #23]
 800d31e:	b29c      	uxth	r4, r3
 800d320:	68b8      	ldr	r0, [r7, #8]
 800d322:	f7f8 fbe0 	bl	8005ae6 <lwip_htonl>
 800d326:	4602      	mov	r2, r0
 800d328:	8abb      	ldrh	r3, [r7, #20]
 800d32a:	9303      	str	r3, [sp, #12]
 800d32c:	2314      	movs	r3, #20
 800d32e:	9302      	str	r3, [sp, #8]
 800d330:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d332:	9301      	str	r3, [sp, #4]
 800d334:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	4613      	mov	r3, r2
 800d33a:	2200      	movs	r2, #0
 800d33c:	4621      	mov	r1, r4
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fe90 	bl	800d064 <tcp_output_alloc_header_common>
 800d344:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00c      	beq.n	800d366 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2200      	movs	r2, #0
 800d350:	6939      	ldr	r1, [r7, #16]
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f7ff ff38 	bl	800d1c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	6939      	ldr	r1, [r7, #16]
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f7ff ff72 	bl	800d248 <tcp_output_control_segment>
 800d364:	e000      	b.n	800d368 <tcp_rst+0x8c>
    return;
 800d366:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d368:	371c      	adds	r7, #28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd90      	pop	{r4, r7, pc}
 800d36e:	bf00      	nop
 800d370:	08014d1c 	.word	0x08014d1c
 800d374:	080154a0 	.word	0x080154a0
 800d378:	08014d70 	.word	0x08014d70
 800d37c:	080154bc 	.word	0x080154bc

0800d380 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <tcp_send_empty_ack+0x24>
 800d396:	4b28      	ldr	r3, [pc, #160]	; (800d438 <tcp_send_empty_ack+0xb8>)
 800d398:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d39c:	4927      	ldr	r1, [pc, #156]	; (800d43c <tcp_send_empty_ack+0xbc>)
 800d39e:	4828      	ldr	r0, [pc, #160]	; (800d440 <tcp_send_empty_ack+0xc0>)
 800d3a0:	f005 f8da 	bl	8012558 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d3a4:	7dfb      	ldrb	r3, [r7, #23]
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	f003 0304 	and.w	r3, r3, #4
 800d3ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d3b0:	7d7b      	ldrb	r3, [r7, #21]
 800d3b2:	b29c      	uxth	r4, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f8 fb94 	bl	8005ae6 <lwip_htonl>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	4621      	mov	r1, r4
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff fec1 	bl	800d14c <tcp_output_alloc_header>
 800d3ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d109      	bne.n	800d3e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	8b5b      	ldrh	r3, [r3, #26]
 800d3d6:	f043 0303 	orr.w	r3, r3, #3
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d3e0:	f06f 0301 	mvn.w	r3, #1
 800d3e4:	e023      	b.n	800d42e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d3e6:	7dbb      	ldrb	r3, [r7, #22]
 800d3e8:	7dfa      	ldrb	r2, [r7, #23]
 800d3ea:	6939      	ldr	r1, [r7, #16]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7ff feeb 	bl	800d1c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	6939      	ldr	r1, [r7, #16]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff ff24 	bl	800d248 <tcp_output_control_segment>
 800d400:	4603      	mov	r3, r0
 800d402:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8b5b      	ldrh	r3, [r3, #26]
 800d410:	f043 0303 	orr.w	r3, r3, #3
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	835a      	strh	r2, [r3, #26]
 800d41a:	e006      	b.n	800d42a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	8b5b      	ldrh	r3, [r3, #26]
 800d420:	f023 0303 	bic.w	r3, r3, #3
 800d424:	b29a      	uxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	371c      	adds	r7, #28
 800d432:	46bd      	mov	sp, r7
 800d434:	bd90      	pop	{r4, r7, pc}
 800d436:	bf00      	nop
 800d438:	08014d1c 	.word	0x08014d1c
 800d43c:	080154d8 	.word	0x080154d8
 800d440:	08014d70 	.word	0x08014d70

0800d444 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d444:	b590      	push	{r4, r7, lr}
 800d446:	b087      	sub	sp, #28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d44c:	2300      	movs	r3, #0
 800d44e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d106      	bne.n	800d464 <tcp_keepalive+0x20>
 800d456:	4b18      	ldr	r3, [pc, #96]	; (800d4b8 <tcp_keepalive+0x74>)
 800d458:	f640 0224 	movw	r2, #2084	; 0x824
 800d45c:	4917      	ldr	r1, [pc, #92]	; (800d4bc <tcp_keepalive+0x78>)
 800d45e:	4818      	ldr	r0, [pc, #96]	; (800d4c0 <tcp_keepalive+0x7c>)
 800d460:	f005 f87a 	bl	8012558 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	b29c      	uxth	r4, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46c:	3b01      	subs	r3, #1
 800d46e:	4618      	mov	r0, r3
 800d470:	f7f8 fb39 	bl	8005ae6 <lwip_htonl>
 800d474:	4603      	mov	r3, r0
 800d476:	2200      	movs	r2, #0
 800d478:	4621      	mov	r1, r4
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff fe66 	bl	800d14c <tcp_output_alloc_header>
 800d480:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d488:	f04f 33ff 	mov.w	r3, #4294967295
 800d48c:	e010      	b.n	800d4b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2200      	movs	r2, #0
 800d492:	6939      	ldr	r1, [r7, #16]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff fe97 	bl	800d1c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	6939      	ldr	r1, [r7, #16]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fed0 	bl	800d248 <tcp_output_control_segment>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	371c      	adds	r7, #28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd90      	pop	{r4, r7, pc}
 800d4b8:	08014d1c 	.word	0x08014d1c
 800d4bc:	080154f8 	.word	0x080154f8
 800d4c0:	08014d70 	.word	0x08014d70

0800d4c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d4c4:	b590      	push	{r4, r7, lr}
 800d4c6:	b08b      	sub	sp, #44	; 0x2c
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d106      	bne.n	800d4e6 <tcp_zero_window_probe+0x22>
 800d4d8:	4b4c      	ldr	r3, [pc, #304]	; (800d60c <tcp_zero_window_probe+0x148>)
 800d4da:	f640 024f 	movw	r2, #2127	; 0x84f
 800d4de:	494c      	ldr	r1, [pc, #304]	; (800d610 <tcp_zero_window_probe+0x14c>)
 800d4e0:	484c      	ldr	r0, [pc, #304]	; (800d614 <tcp_zero_window_probe+0x150>)
 800d4e2:	f005 f839 	bl	8012558 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e086      	b.n	800d604 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d4fc:	2bff      	cmp	r3, #255	; 0xff
 800d4fe:	d007      	beq.n	800d510 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d506:	3301      	adds	r3, #1
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	899b      	ldrh	r3, [r3, #12]
 800d516:	b29b      	uxth	r3, r3
 800d518:	4618      	mov	r0, r3
 800d51a:	f7f8 facf 	bl	8005abc <lwip_htons>
 800d51e:	4603      	mov	r3, r0
 800d520:	b2db      	uxtb	r3, r3
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <tcp_zero_window_probe+0x72>
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	891b      	ldrh	r3, [r3, #8]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d101      	bne.n	800d536 <tcp_zero_window_probe+0x72>
 800d532:	2301      	movs	r3, #1
 800d534:	e000      	b.n	800d538 <tcp_zero_window_probe+0x74>
 800d536:	2300      	movs	r3, #0
 800d538:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d53a:	7ffb      	ldrb	r3, [r7, #31]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bf0c      	ite	eq
 800d540:	2301      	moveq	r3, #1
 800d542:	2300      	movne	r3, #0
 800d544:	b2db      	uxtb	r3, r3
 800d546:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d54c:	b299      	uxth	r1, r3
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	8bba      	ldrh	r2, [r7, #28]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7ff fdf8 	bl	800d14c <tcp_output_alloc_header>
 800d55c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d102      	bne.n	800d56a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d564:	f04f 33ff 	mov.w	r3, #4294967295
 800d568:	e04c      	b.n	800d604 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d570:	7ffb      	ldrb	r3, [r7, #31]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d011      	beq.n	800d59a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	b21b      	sxth	r3, r3
 800d57e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d582:	b21c      	sxth	r4, r3
 800d584:	2011      	movs	r0, #17
 800d586:	f7f8 fa99 	bl	8005abc <lwip_htons>
 800d58a:	4603      	mov	r3, r0
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	4323      	orrs	r3, r4
 800d590:	b21b      	sxth	r3, r3
 800d592:	b29a      	uxth	r2, r3
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	819a      	strh	r2, [r3, #12]
 800d598:	e010      	b.n	800d5bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	3314      	adds	r3, #20
 800d5a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	6858      	ldr	r0, [r3, #4]
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	891a      	ldrh	r2, [r3, #8]
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	891b      	ldrh	r3, [r3, #8]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	6939      	ldr	r1, [r7, #16]
 800d5b8:	f7f9 ff52 	bl	8007460 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7f8 fa8f 	bl	8005ae6 <lwip_htonl>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	da02      	bge.n	800d5e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	69b9      	ldr	r1, [r7, #24]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff fded 	bl	800d1c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	69b9      	ldr	r1, [r7, #24]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff fe26 	bl	800d248 <tcp_output_control_segment>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d600:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d604:	4618      	mov	r0, r3
 800d606:	372c      	adds	r7, #44	; 0x2c
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd90      	pop	{r4, r7, pc}
 800d60c:	08014d1c 	.word	0x08014d1c
 800d610:	08015514 	.word	0x08015514
 800d614:	08014d70 	.word	0x08014d70

0800d618 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d620:	f7fa f80c 	bl	800763c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d624:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <tcpip_tcp_timer+0x38>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d103      	bne.n	800d634 <tcpip_tcp_timer+0x1c>
 800d62c:	4b09      	ldr	r3, [pc, #36]	; (800d654 <tcpip_tcp_timer+0x3c>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d634:	2200      	movs	r2, #0
 800d636:	4908      	ldr	r1, [pc, #32]	; (800d658 <tcpip_tcp_timer+0x40>)
 800d638:	20fa      	movs	r0, #250	; 0xfa
 800d63a:	f000 f8f1 	bl	800d820 <sys_timeout>
 800d63e:	e002      	b.n	800d646 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d640:	4b06      	ldr	r3, [pc, #24]	; (800d65c <tcpip_tcp_timer+0x44>)
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
  }
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20007188 	.word	0x20007188
 800d654:	20007198 	.word	0x20007198
 800d658:	0800d619 	.word	0x0800d619
 800d65c:	20000558 	.word	0x20000558

0800d660 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d664:	4b0a      	ldr	r3, [pc, #40]	; (800d690 <tcp_timer_needed+0x30>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10f      	bne.n	800d68c <tcp_timer_needed+0x2c>
 800d66c:	4b09      	ldr	r3, [pc, #36]	; (800d694 <tcp_timer_needed+0x34>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d103      	bne.n	800d67c <tcp_timer_needed+0x1c>
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <tcp_timer_needed+0x38>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d007      	beq.n	800d68c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d67c:	4b04      	ldr	r3, [pc, #16]	; (800d690 <tcp_timer_needed+0x30>)
 800d67e:	2201      	movs	r2, #1
 800d680:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d682:	2200      	movs	r2, #0
 800d684:	4905      	ldr	r1, [pc, #20]	; (800d69c <tcp_timer_needed+0x3c>)
 800d686:	20fa      	movs	r0, #250	; 0xfa
 800d688:	f000 f8ca 	bl	800d820 <sys_timeout>
  }
}
 800d68c:	bf00      	nop
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	20000558 	.word	0x20000558
 800d694:	20007188 	.word	0x20007188
 800d698:	20007198 	.word	0x20007198
 800d69c:	0800d619 	.word	0x0800d619

0800d6a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d6ac:	2006      	movs	r0, #6
 800d6ae:	f7f8 fe91 	bl	80063d4 <memp_malloc>
 800d6b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d109      	bne.n	800d6ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d151      	bne.n	800d764 <sys_timeout_abs+0xc4>
 800d6c0:	4b2a      	ldr	r3, [pc, #168]	; (800d76c <sys_timeout_abs+0xcc>)
 800d6c2:	22be      	movs	r2, #190	; 0xbe
 800d6c4:	492a      	ldr	r1, [pc, #168]	; (800d770 <sys_timeout_abs+0xd0>)
 800d6c6:	482b      	ldr	r0, [pc, #172]	; (800d774 <sys_timeout_abs+0xd4>)
 800d6c8:	f004 ff46 	bl	8012558 <iprintf>
    return;
 800d6cc:	e04a      	b.n	800d764 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d6e6:	4b24      	ldr	r3, [pc, #144]	; (800d778 <sys_timeout_abs+0xd8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d103      	bne.n	800d6f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d6ee:	4a22      	ldr	r2, [pc, #136]	; (800d778 <sys_timeout_abs+0xd8>)
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	6013      	str	r3, [r2, #0]
    return;
 800d6f4:	e037      	b.n	800d766 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	685a      	ldr	r2, [r3, #4]
 800d6fa:	4b1f      	ldr	r3, [pc, #124]	; (800d778 <sys_timeout_abs+0xd8>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	0fdb      	lsrs	r3, r3, #31
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d007      	beq.n	800d71e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d70e:	4b1a      	ldr	r3, [pc, #104]	; (800d778 <sys_timeout_abs+0xd8>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d716:	4a18      	ldr	r2, [pc, #96]	; (800d778 <sys_timeout_abs+0xd8>)
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6013      	str	r3, [r2, #0]
 800d71c:	e023      	b.n	800d766 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d71e:	4b16      	ldr	r3, [pc, #88]	; (800d778 <sys_timeout_abs+0xd8>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	617b      	str	r3, [r7, #20]
 800d724:	e01a      	b.n	800d75c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00b      	beq.n	800d746 <sys_timeout_abs+0xa6>
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	0fdb      	lsrs	r3, r3, #31
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d007      	beq.n	800d756 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	601a      	str	r2, [r3, #0]
        break;
 800d754:	e007      	b.n	800d766 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1e1      	bne.n	800d726 <sys_timeout_abs+0x86>
 800d762:	e000      	b.n	800d766 <sys_timeout_abs+0xc6>
    return;
 800d764:	bf00      	nop
      }
    }
  }
}
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	08015538 	.word	0x08015538
 800d770:	0801556c 	.word	0x0801556c
 800d774:	080155ac 	.word	0x080155ac
 800d778:	20000550 	.word	0x20000550

0800d77c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	4798      	blx	r3

  now = sys_now();
 800d78e:	f7f7 fa9d 	bl	8004ccc <sys_now>
 800d792:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	4b0f      	ldr	r3, [pc, #60]	; (800d7d8 <lwip_cyclic_timer+0x5c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4413      	add	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	0fdb      	lsrs	r3, r3, #31
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d009      	beq.n	800d7c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	4907      	ldr	r1, [pc, #28]	; (800d7dc <lwip_cyclic_timer+0x60>)
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff ff6e 	bl	800d6a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d7c4:	e004      	b.n	800d7d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	4904      	ldr	r1, [pc, #16]	; (800d7dc <lwip_cyclic_timer+0x60>)
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f7ff ff68 	bl	800d6a0 <sys_timeout_abs>
}
 800d7d0:	bf00      	nop
 800d7d2:	3718      	adds	r7, #24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	20000554 	.word	0x20000554
 800d7dc:	0800d77d 	.word	0x0800d77d

0800d7e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	607b      	str	r3, [r7, #4]
 800d7ea:	e00e      	b.n	800d80a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d7ec:	4a0a      	ldr	r2, [pc, #40]	; (800d818 <sys_timeouts_init+0x38>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	4a07      	ldr	r2, [pc, #28]	; (800d818 <sys_timeouts_init+0x38>)
 800d7fa:	4413      	add	r3, r2
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	4907      	ldr	r1, [pc, #28]	; (800d81c <sys_timeouts_init+0x3c>)
 800d800:	f000 f80e 	bl	800d820 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3301      	adds	r3, #1
 800d808:	607b      	str	r3, [r7, #4]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b04      	cmp	r3, #4
 800d80e:	d9ed      	bls.n	800d7ec <sys_timeouts_init+0xc>
  }
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	080168e4 	.word	0x080168e4
 800d81c:	0800d77d 	.word	0x0800d77d

0800d820 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d832:	d306      	bcc.n	800d842 <sys_timeout+0x22>
 800d834:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <sys_timeout+0x40>)
 800d836:	f240 1229 	movw	r2, #297	; 0x129
 800d83a:	490a      	ldr	r1, [pc, #40]	; (800d864 <sys_timeout+0x44>)
 800d83c:	480a      	ldr	r0, [pc, #40]	; (800d868 <sys_timeout+0x48>)
 800d83e:	f004 fe8b 	bl	8012558 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d842:	f7f7 fa43 	bl	8004ccc <sys_now>
 800d846:	4602      	mov	r2, r0
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4413      	add	r3, r2
 800d84c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	6978      	ldr	r0, [r7, #20]
 800d854:	f7ff ff24 	bl	800d6a0 <sys_timeout_abs>
#endif
}
 800d858:	bf00      	nop
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	08015538 	.word	0x08015538
 800d864:	080155d4 	.word	0x080155d4
 800d868:	080155ac 	.word	0x080155ac

0800d86c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d872:	f7f7 fa2b 	bl	8004ccc <sys_now>
 800d876:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d878:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <sys_check_timeouts+0x78>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <sys_check_timeouts+0x1a>
 800d882:	f7f9 f8bd 	bl	8006a00 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d886:	4b18      	ldr	r3, [pc, #96]	; (800d8e8 <sys_check_timeouts+0x7c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d022      	beq.n	800d8d8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	0fdb      	lsrs	r3, r3, #31
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d11a      	bne.n	800d8dc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a0f      	ldr	r2, [pc, #60]	; (800d8e8 <sys_check_timeouts+0x7c>)
 800d8ac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	4a0b      	ldr	r2, [pc, #44]	; (800d8ec <sys_check_timeouts+0x80>)
 800d8c0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	2006      	movs	r0, #6
 800d8c6:	f7f8 fdd1 	bl	800646c <memp_free>
    if (handler != NULL) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d0d3      	beq.n	800d878 <sys_check_timeouts+0xc>
      handler(arg);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6838      	ldr	r0, [r7, #0]
 800d8d4:	4798      	blx	r3
  do {
 800d8d6:	e7cf      	b.n	800d878 <sys_check_timeouts+0xc>
      return;
 800d8d8:	bf00      	nop
 800d8da:	e000      	b.n	800d8de <sys_check_timeouts+0x72>
      return;
 800d8dc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20007180 	.word	0x20007180
 800d8e8:	20000550 	.word	0x20000550
 800d8ec:	20000554 	.word	0x20000554

0800d8f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d8f4:	f004 fe48 	bl	8012588 <rand>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d900:	b29b      	uxth	r3, r3
 800d902:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d906:	b29a      	uxth	r2, r3
 800d908:	4b01      	ldr	r3, [pc, #4]	; (800d910 <udp_init+0x20>)
 800d90a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d90c:	bf00      	nop
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	20000010 	.word	0x20000010

0800d914 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d91e:	4b17      	ldr	r3, [pc, #92]	; (800d97c <udp_new_port+0x68>)
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	1c5a      	adds	r2, r3, #1
 800d924:	b291      	uxth	r1, r2
 800d926:	4a15      	ldr	r2, [pc, #84]	; (800d97c <udp_new_port+0x68>)
 800d928:	8011      	strh	r1, [r2, #0]
 800d92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d92e:	4293      	cmp	r3, r2
 800d930:	d103      	bne.n	800d93a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d932:	4b12      	ldr	r3, [pc, #72]	; (800d97c <udp_new_port+0x68>)
 800d934:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d938:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <udp_new_port+0x6c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	e011      	b.n	800d966 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	8a5a      	ldrh	r2, [r3, #18]
 800d946:	4b0d      	ldr	r3, [pc, #52]	; (800d97c <udp_new_port+0x68>)
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d108      	bne.n	800d960 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d94e:	88fb      	ldrh	r3, [r7, #6]
 800d950:	3301      	adds	r3, #1
 800d952:	80fb      	strh	r3, [r7, #6]
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d95a:	d3e0      	bcc.n	800d91e <udp_new_port+0xa>
        return 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e007      	b.n	800d970 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	603b      	str	r3, [r7, #0]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1ea      	bne.n	800d942 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d96c:	4b03      	ldr	r3, [pc, #12]	; (800d97c <udp_new_port+0x68>)
 800d96e:	881b      	ldrh	r3, [r3, #0]
}
 800d970:	4618      	mov	r0, r3
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	20000010 	.word	0x20000010
 800d980:	200071a0 	.word	0x200071a0

0800d984 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	4613      	mov	r3, r2
 800d990:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d105      	bne.n	800d9a4 <udp_input_local_match+0x20>
 800d998:	4b27      	ldr	r3, [pc, #156]	; (800da38 <udp_input_local_match+0xb4>)
 800d99a:	2287      	movs	r2, #135	; 0x87
 800d99c:	4927      	ldr	r1, [pc, #156]	; (800da3c <udp_input_local_match+0xb8>)
 800d99e:	4828      	ldr	r0, [pc, #160]	; (800da40 <udp_input_local_match+0xbc>)
 800d9a0:	f004 fdda 	bl	8012558 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d105      	bne.n	800d9b6 <udp_input_local_match+0x32>
 800d9aa:	4b23      	ldr	r3, [pc, #140]	; (800da38 <udp_input_local_match+0xb4>)
 800d9ac:	2288      	movs	r2, #136	; 0x88
 800d9ae:	4925      	ldr	r1, [pc, #148]	; (800da44 <udp_input_local_match+0xc0>)
 800d9b0:	4823      	ldr	r0, [pc, #140]	; (800da40 <udp_input_local_match+0xbc>)
 800d9b2:	f004 fdd1 	bl	8012558 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	7a1b      	ldrb	r3, [r3, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00b      	beq.n	800d9d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	7a1a      	ldrb	r2, [r3, #8]
 800d9c2:	4b21      	ldr	r3, [pc, #132]	; (800da48 <udp_input_local_match+0xc4>)
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d001      	beq.n	800d9d6 <udp_input_local_match+0x52>
    return 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e02b      	b.n	800da2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d018      	beq.n	800da0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d013      	beq.n	800da0a <udp_input_local_match+0x86>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00f      	beq.n	800da0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d9ea:	4b17      	ldr	r3, [pc, #92]	; (800da48 <udp_input_local_match+0xc4>)
 800d9ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f2:	d00a      	beq.n	800da0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	4b13      	ldr	r3, [pc, #76]	; (800da48 <udp_input_local_match+0xc4>)
 800d9fa:	695b      	ldr	r3, [r3, #20]
 800d9fc:	405a      	eors	r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	3308      	adds	r3, #8
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da06:	2b00      	cmp	r3, #0
 800da08:	d110      	bne.n	800da2c <udp_input_local_match+0xa8>
          return 1;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e00f      	b.n	800da2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d009      	beq.n	800da28 <udp_input_local_match+0xa4>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d005      	beq.n	800da28 <udp_input_local_match+0xa4>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	4b09      	ldr	r3, [pc, #36]	; (800da48 <udp_input_local_match+0xc4>)
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	429a      	cmp	r2, r3
 800da26:	d101      	bne.n	800da2c <udp_input_local_match+0xa8>
        return 1;
 800da28:	2301      	movs	r3, #1
 800da2a:	e000      	b.n	800da2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	08015620 	.word	0x08015620
 800da3c:	08015650 	.word	0x08015650
 800da40:	08015674 	.word	0x08015674
 800da44:	0801569c 	.word	0x0801569c
 800da48:	20003c24 	.word	0x20003c24

0800da4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800da4c:	b590      	push	{r4, r7, lr}
 800da4e:	b08d      	sub	sp, #52	; 0x34
 800da50:	af02      	add	r7, sp, #8
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d105      	bne.n	800da6c <udp_input+0x20>
 800da60:	4b7c      	ldr	r3, [pc, #496]	; (800dc54 <udp_input+0x208>)
 800da62:	22cf      	movs	r2, #207	; 0xcf
 800da64:	497c      	ldr	r1, [pc, #496]	; (800dc58 <udp_input+0x20c>)
 800da66:	487d      	ldr	r0, [pc, #500]	; (800dc5c <udp_input+0x210>)
 800da68:	f004 fd76 	bl	8012558 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d105      	bne.n	800da7e <udp_input+0x32>
 800da72:	4b78      	ldr	r3, [pc, #480]	; (800dc54 <udp_input+0x208>)
 800da74:	22d0      	movs	r2, #208	; 0xd0
 800da76:	497a      	ldr	r1, [pc, #488]	; (800dc60 <udp_input+0x214>)
 800da78:	4878      	ldr	r0, [pc, #480]	; (800dc5c <udp_input+0x210>)
 800da7a:	f004 fd6d 	bl	8012558 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	895b      	ldrh	r3, [r3, #10]
 800da82:	2b07      	cmp	r3, #7
 800da84:	d803      	bhi.n	800da8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7f9 faf0 	bl	800706c <pbuf_free>
    goto end;
 800da8c:	e0de      	b.n	800dc4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800da94:	4b73      	ldr	r3, [pc, #460]	; (800dc64 <udp_input+0x218>)
 800da96:	695a      	ldr	r2, [r3, #20]
 800da98:	4b72      	ldr	r3, [pc, #456]	; (800dc64 <udp_input+0x218>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f003 fdc8 	bl	8011634 <ip4_addr_isbroadcast_u32>
 800daa4:	4603      	mov	r3, r0
 800daa6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	b29b      	uxth	r3, r3
 800daae:	4618      	mov	r0, r3
 800dab0:	f7f8 f804 	bl	8005abc <lwip_htons>
 800dab4:	4603      	mov	r3, r0
 800dab6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	885b      	ldrh	r3, [r3, #2]
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f7 fffc 	bl	8005abc <lwip_htons>
 800dac4:	4603      	mov	r3, r0
 800dac6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dac8:	2300      	movs	r3, #0
 800daca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dad0:	2300      	movs	r3, #0
 800dad2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dad4:	4b64      	ldr	r3, [pc, #400]	; (800dc68 <udp_input+0x21c>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	627b      	str	r3, [r7, #36]	; 0x24
 800dada:	e054      	b.n	800db86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	8a5b      	ldrh	r3, [r3, #18]
 800dae0:	89fa      	ldrh	r2, [r7, #14]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d14a      	bne.n	800db7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dae6:	7cfb      	ldrb	r3, [r7, #19]
 800dae8:	461a      	mov	r2, r3
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daee:	f7ff ff49 	bl	800d984 <udp_input_local_match>
 800daf2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d041      	beq.n	800db7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	7c1b      	ldrb	r3, [r3, #16]
 800dafc:	f003 0304 	and.w	r3, r3, #4
 800db00:	2b00      	cmp	r3, #0
 800db02:	d11d      	bne.n	800db40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d102      	bne.n	800db10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	61fb      	str	r3, [r7, #28]
 800db0e:	e017      	b.n	800db40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800db10:	7cfb      	ldrb	r3, [r7, #19]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d014      	beq.n	800db40 <udp_input+0xf4>
 800db16:	4b53      	ldr	r3, [pc, #332]	; (800dc64 <udp_input+0x218>)
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1e:	d10f      	bne.n	800db40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	3304      	adds	r3, #4
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d008      	beq.n	800db40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	3304      	adds	r3, #4
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d101      	bne.n	800db40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	8a9b      	ldrh	r3, [r3, #20]
 800db44:	8a3a      	ldrh	r2, [r7, #16]
 800db46:	429a      	cmp	r2, r3
 800db48:	d118      	bne.n	800db7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d005      	beq.n	800db5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	685a      	ldr	r2, [r3, #4]
 800db56:	4b43      	ldr	r3, [pc, #268]	; (800dc64 <udp_input+0x218>)
 800db58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d10e      	bne.n	800db7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800db5e:	6a3b      	ldr	r3, [r7, #32]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d014      	beq.n	800db8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	68da      	ldr	r2, [r3, #12]
 800db68:	6a3b      	ldr	r3, [r7, #32]
 800db6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800db6c:	4b3e      	ldr	r3, [pc, #248]	; (800dc68 <udp_input+0x21c>)
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800db74:	4a3c      	ldr	r2, [pc, #240]	; (800dc68 <udp_input+0x21c>)
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800db7a:	e008      	b.n	800db8e <udp_input+0x142>
      }
    }

    prev = pcb;
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	627b      	str	r3, [r7, #36]	; 0x24
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1a7      	bne.n	800dadc <udp_input+0x90>
 800db8c:	e000      	b.n	800db90 <udp_input+0x144>
        break;
 800db8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <udp_input+0x14e>
    pcb = uncon_pcb;
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d002      	beq.n	800dba6 <udp_input+0x15a>
    for_us = 1;
 800dba0:	2301      	movs	r3, #1
 800dba2:	76fb      	strb	r3, [r7, #27]
 800dba4:	e00a      	b.n	800dbbc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	4b2d      	ldr	r3, [pc, #180]	; (800dc64 <udp_input+0x218>)
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	bf0c      	ite	eq
 800dbb4:	2301      	moveq	r3, #1
 800dbb6:	2300      	movne	r3, #0
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dbbc:	7efb      	ldrb	r3, [r7, #27]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d041      	beq.n	800dc46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dbc2:	2108      	movs	r1, #8
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7f9 f9cb 	bl	8006f60 <pbuf_remove_header>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00a      	beq.n	800dbe6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dbd0:	4b20      	ldr	r3, [pc, #128]	; (800dc54 <udp_input+0x208>)
 800dbd2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dbd6:	4925      	ldr	r1, [pc, #148]	; (800dc6c <udp_input+0x220>)
 800dbd8:	4820      	ldr	r0, [pc, #128]	; (800dc5c <udp_input+0x210>)
 800dbda:	f004 fcbd 	bl	8012558 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7f9 fa44 	bl	800706c <pbuf_free>
      goto end;
 800dbe4:	e032      	b.n	800dc4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d012      	beq.n	800dc12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00a      	beq.n	800dc0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	699c      	ldr	r4, [r3, #24]
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	69d8      	ldr	r0, [r3, #28]
 800dbfc:	8a3b      	ldrh	r3, [r7, #16]
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	4b1b      	ldr	r3, [pc, #108]	; (800dc70 <udp_input+0x224>)
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dc08:	e021      	b.n	800dc4e <udp_input+0x202>
        pbuf_free(p);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7f9 fa2e 	bl	800706c <pbuf_free>
        goto end;
 800dc10:	e01c      	b.n	800dc4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc12:	7cfb      	ldrb	r3, [r7, #19]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d112      	bne.n	800dc3e <udp_input+0x1f2>
 800dc18:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <udp_input+0x218>)
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc20:	2be0      	cmp	r3, #224	; 0xe0
 800dc22:	d00c      	beq.n	800dc3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dc24:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <udp_input+0x218>)
 800dc26:	899b      	ldrh	r3, [r3, #12]
 800dc28:	3308      	adds	r3, #8
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	b21b      	sxth	r3, r3
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7f9 fa08 	bl	8007046 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dc36:	2103      	movs	r1, #3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f003 f9bf 	bl	8010fbc <icmp_dest_unreach>
      pbuf_free(p);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7f9 fa14 	bl	800706c <pbuf_free>
  return;
 800dc44:	e003      	b.n	800dc4e <udp_input+0x202>
    pbuf_free(p);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7f9 fa10 	bl	800706c <pbuf_free>
  return;
 800dc4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dc4e:	372c      	adds	r7, #44	; 0x2c
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd90      	pop	{r4, r7, pc}
 800dc54:	08015620 	.word	0x08015620
 800dc58:	080156c4 	.word	0x080156c4
 800dc5c:	08015674 	.word	0x08015674
 800dc60:	080156dc 	.word	0x080156dc
 800dc64:	20003c24 	.word	0x20003c24
 800dc68:	200071a0 	.word	0x200071a0
 800dc6c:	080156f8 	.word	0x080156f8
 800dc70:	20003c34 	.word	0x20003c34

0800dc74 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d109      	bne.n	800dc9c <udp_sendto_if+0x28>
 800dc88:	4b2e      	ldr	r3, [pc, #184]	; (800dd44 <udp_sendto_if+0xd0>)
 800dc8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc8e:	492e      	ldr	r1, [pc, #184]	; (800dd48 <udp_sendto_if+0xd4>)
 800dc90:	482e      	ldr	r0, [pc, #184]	; (800dd4c <udp_sendto_if+0xd8>)
 800dc92:	f004 fc61 	bl	8012558 <iprintf>
 800dc96:	f06f 030f 	mvn.w	r3, #15
 800dc9a:	e04f      	b.n	800dd3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d109      	bne.n	800dcb6 <udp_sendto_if+0x42>
 800dca2:	4b28      	ldr	r3, [pc, #160]	; (800dd44 <udp_sendto_if+0xd0>)
 800dca4:	f240 2281 	movw	r2, #641	; 0x281
 800dca8:	4929      	ldr	r1, [pc, #164]	; (800dd50 <udp_sendto_if+0xdc>)
 800dcaa:	4828      	ldr	r0, [pc, #160]	; (800dd4c <udp_sendto_if+0xd8>)
 800dcac:	f004 fc54 	bl	8012558 <iprintf>
 800dcb0:	f06f 030f 	mvn.w	r3, #15
 800dcb4:	e042      	b.n	800dd3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d109      	bne.n	800dcd0 <udp_sendto_if+0x5c>
 800dcbc:	4b21      	ldr	r3, [pc, #132]	; (800dd44 <udp_sendto_if+0xd0>)
 800dcbe:	f240 2282 	movw	r2, #642	; 0x282
 800dcc2:	4924      	ldr	r1, [pc, #144]	; (800dd54 <udp_sendto_if+0xe0>)
 800dcc4:	4821      	ldr	r0, [pc, #132]	; (800dd4c <udp_sendto_if+0xd8>)
 800dcc6:	f004 fc47 	bl	8012558 <iprintf>
 800dcca:	f06f 030f 	mvn.w	r3, #15
 800dcce:	e035      	b.n	800dd3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800dcd0:	6a3b      	ldr	r3, [r7, #32]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d109      	bne.n	800dcea <udp_sendto_if+0x76>
 800dcd6:	4b1b      	ldr	r3, [pc, #108]	; (800dd44 <udp_sendto_if+0xd0>)
 800dcd8:	f240 2283 	movw	r2, #643	; 0x283
 800dcdc:	491e      	ldr	r1, [pc, #120]	; (800dd58 <udp_sendto_if+0xe4>)
 800dcde:	481b      	ldr	r0, [pc, #108]	; (800dd4c <udp_sendto_if+0xd8>)
 800dce0:	f004 fc3a 	bl	8012558 <iprintf>
 800dce4:	f06f 030f 	mvn.w	r3, #15
 800dce8:	e028      	b.n	800dd3c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d009      	beq.n	800dd04 <udp_sendto_if+0x90>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd00:	2be0      	cmp	r3, #224	; 0xe0
 800dd02:	d103      	bne.n	800dd0c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	3304      	adds	r3, #4
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	e00b      	b.n	800dd24 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	3304      	adds	r3, #4
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d002      	beq.n	800dd20 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800dd1a:	f06f 0303 	mvn.w	r3, #3
 800dd1e:	e00d      	b.n	800dd3c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800dd24:	887a      	ldrh	r2, [r7, #2]
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	68b9      	ldr	r1, [r7, #8]
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f000 f811 	bl	800dd5c <udp_sendto_if_src>
 800dd3a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	08015620 	.word	0x08015620
 800dd48:	08015794 	.word	0x08015794
 800dd4c:	08015674 	.word	0x08015674
 800dd50:	080157b0 	.word	0x080157b0
 800dd54:	080157cc 	.word	0x080157cc
 800dd58:	080157ec 	.word	0x080157ec

0800dd5c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08c      	sub	sp, #48	; 0x30
 800dd60:	af04      	add	r7, sp, #16
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d109      	bne.n	800dd84 <udp_sendto_if_src+0x28>
 800dd70:	4b65      	ldr	r3, [pc, #404]	; (800df08 <udp_sendto_if_src+0x1ac>)
 800dd72:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dd76:	4965      	ldr	r1, [pc, #404]	; (800df0c <udp_sendto_if_src+0x1b0>)
 800dd78:	4865      	ldr	r0, [pc, #404]	; (800df10 <udp_sendto_if_src+0x1b4>)
 800dd7a:	f004 fbed 	bl	8012558 <iprintf>
 800dd7e:	f06f 030f 	mvn.w	r3, #15
 800dd82:	e0bc      	b.n	800defe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d109      	bne.n	800dd9e <udp_sendto_if_src+0x42>
 800dd8a:	4b5f      	ldr	r3, [pc, #380]	; (800df08 <udp_sendto_if_src+0x1ac>)
 800dd8c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dd90:	4960      	ldr	r1, [pc, #384]	; (800df14 <udp_sendto_if_src+0x1b8>)
 800dd92:	485f      	ldr	r0, [pc, #380]	; (800df10 <udp_sendto_if_src+0x1b4>)
 800dd94:	f004 fbe0 	bl	8012558 <iprintf>
 800dd98:	f06f 030f 	mvn.w	r3, #15
 800dd9c:	e0af      	b.n	800defe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d109      	bne.n	800ddb8 <udp_sendto_if_src+0x5c>
 800dda4:	4b58      	ldr	r3, [pc, #352]	; (800df08 <udp_sendto_if_src+0x1ac>)
 800dda6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ddaa:	495b      	ldr	r1, [pc, #364]	; (800df18 <udp_sendto_if_src+0x1bc>)
 800ddac:	4858      	ldr	r0, [pc, #352]	; (800df10 <udp_sendto_if_src+0x1b4>)
 800ddae:	f004 fbd3 	bl	8012558 <iprintf>
 800ddb2:	f06f 030f 	mvn.w	r3, #15
 800ddb6:	e0a2      	b.n	800defe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d109      	bne.n	800ddd2 <udp_sendto_if_src+0x76>
 800ddbe:	4b52      	ldr	r3, [pc, #328]	; (800df08 <udp_sendto_if_src+0x1ac>)
 800ddc0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ddc4:	4955      	ldr	r1, [pc, #340]	; (800df1c <udp_sendto_if_src+0x1c0>)
 800ddc6:	4852      	ldr	r0, [pc, #328]	; (800df10 <udp_sendto_if_src+0x1b4>)
 800ddc8:	f004 fbc6 	bl	8012558 <iprintf>
 800ddcc:	f06f 030f 	mvn.w	r3, #15
 800ddd0:	e095      	b.n	800defe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ddd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d109      	bne.n	800ddec <udp_sendto_if_src+0x90>
 800ddd8:	4b4b      	ldr	r3, [pc, #300]	; (800df08 <udp_sendto_if_src+0x1ac>)
 800ddda:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ddde:	4950      	ldr	r1, [pc, #320]	; (800df20 <udp_sendto_if_src+0x1c4>)
 800dde0:	484b      	ldr	r0, [pc, #300]	; (800df10 <udp_sendto_if_src+0x1b4>)
 800dde2:	f004 fbb9 	bl	8012558 <iprintf>
 800dde6:	f06f 030f 	mvn.w	r3, #15
 800ddea:	e088      	b.n	800defe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	8a5b      	ldrh	r3, [r3, #18]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10f      	bne.n	800de14 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ddf4:	68f9      	ldr	r1, [r7, #12]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	8a5b      	ldrh	r3, [r3, #18]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f000 f893 	bl	800df28 <udp_bind>
 800de02:	4603      	mov	r3, r0
 800de04:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800de06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800de0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de12:	e074      	b.n	800defe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	891b      	ldrh	r3, [r3, #8]
 800de18:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d902      	bls.n	800de26 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800de20:	f04f 33ff 	mov.w	r3, #4294967295
 800de24:	e06b      	b.n	800defe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800de26:	2108      	movs	r1, #8
 800de28:	68b8      	ldr	r0, [r7, #8]
 800de2a:	f7f9 f889 	bl	8006f40 <pbuf_add_header>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d015      	beq.n	800de60 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800de34:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de38:	2108      	movs	r1, #8
 800de3a:	2022      	movs	r0, #34	; 0x22
 800de3c:	f7f8 fe36 	bl	8006aac <pbuf_alloc>
 800de40:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d102      	bne.n	800de4e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800de48:	f04f 33ff 	mov.w	r3, #4294967295
 800de4c:	e057      	b.n	800defe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	891b      	ldrh	r3, [r3, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d006      	beq.n	800de64 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800de56:	68b9      	ldr	r1, [r7, #8]
 800de58:	69f8      	ldr	r0, [r7, #28]
 800de5a:	f7f9 fa1f 	bl	800729c <pbuf_chain>
 800de5e:	e001      	b.n	800de64 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	895b      	ldrh	r3, [r3, #10]
 800de68:	2b07      	cmp	r3, #7
 800de6a:	d806      	bhi.n	800de7a <udp_sendto_if_src+0x11e>
 800de6c:	4b26      	ldr	r3, [pc, #152]	; (800df08 <udp_sendto_if_src+0x1ac>)
 800de6e:	f240 320e 	movw	r2, #782	; 0x30e
 800de72:	492c      	ldr	r1, [pc, #176]	; (800df24 <udp_sendto_if_src+0x1c8>)
 800de74:	4826      	ldr	r0, [pc, #152]	; (800df10 <udp_sendto_if_src+0x1b4>)
 800de76:	f004 fb6f 	bl	8012558 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	8a5b      	ldrh	r3, [r3, #18]
 800de84:	4618      	mov	r0, r3
 800de86:	f7f7 fe19 	bl	8005abc <lwip_htons>
 800de8a:	4603      	mov	r3, r0
 800de8c:	461a      	mov	r2, r3
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800de92:	887b      	ldrh	r3, [r7, #2]
 800de94:	4618      	mov	r0, r3
 800de96:	f7f7 fe11 	bl	8005abc <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	461a      	mov	r2, r3
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2200      	movs	r2, #0
 800dea6:	719a      	strb	r2, [r3, #6]
 800dea8:	2200      	movs	r2, #0
 800deaa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	891b      	ldrh	r3, [r3, #8]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7f7 fe03 	bl	8005abc <lwip_htons>
 800deb6:	4603      	mov	r3, r0
 800deb8:	461a      	mov	r2, r3
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800debe:	2311      	movs	r3, #17
 800dec0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	7adb      	ldrb	r3, [r3, #11]
 800dec6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	7a9b      	ldrb	r3, [r3, #10]
 800decc:	7cb9      	ldrb	r1, [r7, #18]
 800dece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ded0:	9202      	str	r2, [sp, #8]
 800ded2:	7cfa      	ldrb	r2, [r7, #19]
 800ded4:	9201      	str	r2, [sp, #4]
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	460b      	mov	r3, r1
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dede:	69f8      	ldr	r0, [r7, #28]
 800dee0:	f003 fafa 	bl	80114d8 <ip4_output_if_src>
 800dee4:	4603      	mov	r3, r0
 800dee6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800dee8:	69fa      	ldr	r2, [r7, #28]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	429a      	cmp	r2, r3
 800deee:	d004      	beq.n	800defa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800def0:	69f8      	ldr	r0, [r7, #28]
 800def2:	f7f9 f8bb 	bl	800706c <pbuf_free>
    q = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800defa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3720      	adds	r7, #32
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	08015620 	.word	0x08015620
 800df0c:	0801580c 	.word	0x0801580c
 800df10:	08015674 	.word	0x08015674
 800df14:	0801582c 	.word	0x0801582c
 800df18:	0801584c 	.word	0x0801584c
 800df1c:	08015870 	.word	0x08015870
 800df20:	08015894 	.word	0x08015894
 800df24:	080158b8 	.word	0x080158b8

0800df28 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800df3c:	4b39      	ldr	r3, [pc, #228]	; (800e024 <udp_bind+0xfc>)
 800df3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d109      	bne.n	800df5a <udp_bind+0x32>
 800df46:	4b38      	ldr	r3, [pc, #224]	; (800e028 <udp_bind+0x100>)
 800df48:	f240 32b7 	movw	r2, #951	; 0x3b7
 800df4c:	4937      	ldr	r1, [pc, #220]	; (800e02c <udp_bind+0x104>)
 800df4e:	4838      	ldr	r0, [pc, #224]	; (800e030 <udp_bind+0x108>)
 800df50:	f004 fb02 	bl	8012558 <iprintf>
 800df54:	f06f 030f 	mvn.w	r3, #15
 800df58:	e060      	b.n	800e01c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df5e:	4b35      	ldr	r3, [pc, #212]	; (800e034 <udp_bind+0x10c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	617b      	str	r3, [r7, #20]
 800df64:	e009      	b.n	800df7a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d102      	bne.n	800df74 <udp_bind+0x4c>
      rebind = 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	74fb      	strb	r3, [r7, #19]
      break;
 800df72:	e005      	b.n	800df80 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1f2      	bne.n	800df66 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800df80:	88fb      	ldrh	r3, [r7, #6]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d109      	bne.n	800df9a <udp_bind+0x72>
    port = udp_new_port();
 800df86:	f7ff fcc5 	bl	800d914 <udp_new_port>
 800df8a:	4603      	mov	r3, r0
 800df8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800df8e:	88fb      	ldrh	r3, [r7, #6]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d12c      	bne.n	800dfee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800df94:	f06f 0307 	mvn.w	r3, #7
 800df98:	e040      	b.n	800e01c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df9a:	4b26      	ldr	r3, [pc, #152]	; (800e034 <udp_bind+0x10c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	e022      	b.n	800dfe8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d01b      	beq.n	800dfe2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	8a5b      	ldrh	r3, [r3, #18]
 800dfae:	88fa      	ldrh	r2, [r7, #6]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d116      	bne.n	800dfe2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d00d      	beq.n	800dfdc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <udp_bind+0xb4>
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d006      	beq.n	800dfdc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dfce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d003      	beq.n	800dfdc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800dfdc:	f06f 0307 	mvn.w	r3, #7
 800dfe0:	e01c      	b.n	800e01c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1d9      	bne.n	800dfa2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <udp_bind+0xd2>
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	e000      	b.n	800dffc <udp_bind+0xd4>
 800dffa:	2300      	movs	r3, #0
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	88fa      	ldrh	r2, [r7, #6]
 800e004:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e006:	7cfb      	ldrb	r3, [r7, #19]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d106      	bne.n	800e01a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e00c:	4b09      	ldr	r3, [pc, #36]	; (800e034 <udp_bind+0x10c>)
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e014:	4a07      	ldr	r2, [pc, #28]	; (800e034 <udp_bind+0x10c>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	0801690c 	.word	0x0801690c
 800e028:	08015620 	.word	0x08015620
 800e02c:	080158e8 	.word	0x080158e8
 800e030:	08015674 	.word	0x08015674
 800e034:	200071a0 	.word	0x200071a0

0800e038 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b086      	sub	sp, #24
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	4613      	mov	r3, r2
 800e044:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d109      	bne.n	800e060 <udp_connect+0x28>
 800e04c:	4b2c      	ldr	r3, [pc, #176]	; (800e100 <udp_connect+0xc8>)
 800e04e:	f240 4235 	movw	r2, #1077	; 0x435
 800e052:	492c      	ldr	r1, [pc, #176]	; (800e104 <udp_connect+0xcc>)
 800e054:	482c      	ldr	r0, [pc, #176]	; (800e108 <udp_connect+0xd0>)
 800e056:	f004 fa7f 	bl	8012558 <iprintf>
 800e05a:	f06f 030f 	mvn.w	r3, #15
 800e05e:	e04b      	b.n	800e0f8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d109      	bne.n	800e07a <udp_connect+0x42>
 800e066:	4b26      	ldr	r3, [pc, #152]	; (800e100 <udp_connect+0xc8>)
 800e068:	f240 4236 	movw	r2, #1078	; 0x436
 800e06c:	4927      	ldr	r1, [pc, #156]	; (800e10c <udp_connect+0xd4>)
 800e06e:	4826      	ldr	r0, [pc, #152]	; (800e108 <udp_connect+0xd0>)
 800e070:	f004 fa72 	bl	8012558 <iprintf>
 800e074:	f06f 030f 	mvn.w	r3, #15
 800e078:	e03e      	b.n	800e0f8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	8a5b      	ldrh	r3, [r3, #18]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10f      	bne.n	800e0a2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e082:	68f9      	ldr	r1, [r7, #12]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	8a5b      	ldrh	r3, [r3, #18]
 800e088:	461a      	mov	r2, r3
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f7ff ff4c 	bl	800df28 <udp_bind>
 800e090:	4603      	mov	r3, r0
 800e092:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e094:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <udp_connect+0x6a>
      return err;
 800e09c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0a0:	e02a      	b.n	800e0f8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <udp_connect+0x76>
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	e000      	b.n	800e0b0 <udp_connect+0x78>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	88fa      	ldrh	r2, [r7, #6]
 800e0b8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	7c1b      	ldrb	r3, [r3, #16]
 800e0be:	f043 0304 	orr.w	r3, r3, #4
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e0c8:	4b11      	ldr	r3, [pc, #68]	; (800e110 <udp_connect+0xd8>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	617b      	str	r3, [r7, #20]
 800e0ce:	e008      	b.n	800e0e2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d101      	bne.n	800e0dc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e00d      	b.n	800e0f8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	617b      	str	r3, [r7, #20]
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1f3      	bne.n	800e0d0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e0e8:	4b09      	ldr	r3, [pc, #36]	; (800e110 <udp_connect+0xd8>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e0f0:	4a07      	ldr	r2, [pc, #28]	; (800e110 <udp_connect+0xd8>)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3718      	adds	r7, #24
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	08015620 	.word	0x08015620
 800e104:	08015900 	.word	0x08015900
 800e108:	08015674 	.word	0x08015674
 800e10c:	0801591c 	.word	0x0801591c
 800e110:	200071a0 	.word	0x200071a0

0800e114 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d107      	bne.n	800e136 <udp_recv+0x22>
 800e126:	4b08      	ldr	r3, [pc, #32]	; (800e148 <udp_recv+0x34>)
 800e128:	f240 428a 	movw	r2, #1162	; 0x48a
 800e12c:	4907      	ldr	r1, [pc, #28]	; (800e14c <udp_recv+0x38>)
 800e12e:	4808      	ldr	r0, [pc, #32]	; (800e150 <udp_recv+0x3c>)
 800e130:	f004 fa12 	bl	8012558 <iprintf>
 800e134:	e005      	b.n	800e142 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	61da      	str	r2, [r3, #28]
}
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	08015620 	.word	0x08015620
 800e14c:	08015954 	.word	0x08015954
 800e150:	08015674 	.word	0x08015674

0800e154 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d107      	bne.n	800e172 <udp_remove+0x1e>
 800e162:	4b19      	ldr	r3, [pc, #100]	; (800e1c8 <udp_remove+0x74>)
 800e164:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e168:	4918      	ldr	r1, [pc, #96]	; (800e1cc <udp_remove+0x78>)
 800e16a:	4819      	ldr	r0, [pc, #100]	; (800e1d0 <udp_remove+0x7c>)
 800e16c:	f004 f9f4 	bl	8012558 <iprintf>
 800e170:	e026      	b.n	800e1c0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e172:	4b18      	ldr	r3, [pc, #96]	; (800e1d4 <udp_remove+0x80>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d105      	bne.n	800e188 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e17c:	4b15      	ldr	r3, [pc, #84]	; (800e1d4 <udp_remove+0x80>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	4a14      	ldr	r2, [pc, #80]	; (800e1d4 <udp_remove+0x80>)
 800e184:	6013      	str	r3, [r2, #0]
 800e186:	e017      	b.n	800e1b8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e188:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <udp_remove+0x80>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	e010      	b.n	800e1b2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d009      	beq.n	800e1ac <udp_remove+0x58>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d104      	bne.n	800e1ac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68da      	ldr	r2, [r3, #12]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	60da      	str	r2, [r3, #12]
        break;
 800e1aa:	e005      	b.n	800e1b8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1eb      	bne.n	800e190 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e1b8:	6879      	ldr	r1, [r7, #4]
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	f7f8 f956 	bl	800646c <memp_free>
}
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	08015620 	.word	0x08015620
 800e1cc:	0801596c 	.word	0x0801596c
 800e1d0:	08015674 	.word	0x08015674
 800e1d4:	200071a0 	.word	0x200071a0

0800e1d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e1de:	2000      	movs	r0, #0
 800e1e0:	f7f8 f8f8 	bl	80063d4 <memp_malloc>
 800e1e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d007      	beq.n	800e1fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e1ec:	2220      	movs	r2, #32
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f004 f9a9 	bl	8012548 <memset>
    pcb->ttl = UDP_TTL;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	22ff      	movs	r2, #255	; 0xff
 800e1fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e1fc:	687b      	ldr	r3, [r7, #4]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d01e      	beq.n	800e256 <udp_netif_ip_addr_changed+0x4e>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d01a      	beq.n	800e256 <udp_netif_ip_addr_changed+0x4e>
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d017      	beq.n	800e256 <udp_netif_ip_addr_changed+0x4e>
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d013      	beq.n	800e256 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e22e:	4b0d      	ldr	r3, [pc, #52]	; (800e264 <udp_netif_ip_addr_changed+0x5c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	e00c      	b.n	800e250 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d103      	bne.n	800e24a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1ef      	bne.n	800e236 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e256:	bf00      	nop
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	200071a0 	.word	0x200071a0

0800e268 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e26c:	4b20      	ldr	r3, [pc, #128]	; (800e2f0 <dhcp_inc_pcb_refcount+0x88>)
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d133      	bne.n	800e2dc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e274:	4b1f      	ldr	r3, [pc, #124]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d005      	beq.n	800e288 <dhcp_inc_pcb_refcount+0x20>
 800e27c:	4b1e      	ldr	r3, [pc, #120]	; (800e2f8 <dhcp_inc_pcb_refcount+0x90>)
 800e27e:	22e5      	movs	r2, #229	; 0xe5
 800e280:	491e      	ldr	r1, [pc, #120]	; (800e2fc <dhcp_inc_pcb_refcount+0x94>)
 800e282:	481f      	ldr	r0, [pc, #124]	; (800e300 <dhcp_inc_pcb_refcount+0x98>)
 800e284:	f004 f968 	bl	8012558 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e288:	f7ff ffa6 	bl	800e1d8 <udp_new>
 800e28c:	4602      	mov	r2, r0
 800e28e:	4b19      	ldr	r3, [pc, #100]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e290:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800e292:	4b18      	ldr	r3, [pc, #96]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d102      	bne.n	800e2a0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e29a:	f04f 33ff 	mov.w	r3, #4294967295
 800e29e:	e024      	b.n	800e2ea <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e2a0:	4b14      	ldr	r3, [pc, #80]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	7a5a      	ldrb	r2, [r3, #9]
 800e2a6:	4b13      	ldr	r3, [pc, #76]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0220 	orr.w	r2, r2, #32
 800e2ae:	b2d2      	uxtb	r2, r2
 800e2b0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2244      	movs	r2, #68	; 0x44
 800e2b8:	4912      	ldr	r1, [pc, #72]	; (800e304 <dhcp_inc_pcb_refcount+0x9c>)
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7ff fe34 	bl	800df28 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e2c0:	4b0c      	ldr	r3, [pc, #48]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2243      	movs	r2, #67	; 0x43
 800e2c6:	490f      	ldr	r1, [pc, #60]	; (800e304 <dhcp_inc_pcb_refcount+0x9c>)
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7ff feb5 	bl	800e038 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e2ce:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <dhcp_inc_pcb_refcount+0x8c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	490c      	ldr	r1, [pc, #48]	; (800e308 <dhcp_inc_pcb_refcount+0xa0>)
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff ff1c 	bl	800e114 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e2dc:	4b04      	ldr	r3, [pc, #16]	; (800e2f0 <dhcp_inc_pcb_refcount+0x88>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	b2da      	uxtb	r2, r3
 800e2e4:	4b02      	ldr	r3, [pc, #8]	; (800e2f0 <dhcp_inc_pcb_refcount+0x88>)
 800e2e6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000560 	.word	0x20000560
 800e2f4:	2000055c 	.word	0x2000055c
 800e2f8:	08015984 	.word	0x08015984
 800e2fc:	080159bc 	.word	0x080159bc
 800e300:	080159e4 	.word	0x080159e4
 800e304:	0801690c 	.word	0x0801690c
 800e308:	0800fb29 	.word	0x0800fb29

0800e30c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e310:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <dhcp_dec_pcb_refcount+0x40>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d105      	bne.n	800e324 <dhcp_dec_pcb_refcount+0x18>
 800e318:	4b0d      	ldr	r3, [pc, #52]	; (800e350 <dhcp_dec_pcb_refcount+0x44>)
 800e31a:	22ff      	movs	r2, #255	; 0xff
 800e31c:	490d      	ldr	r1, [pc, #52]	; (800e354 <dhcp_dec_pcb_refcount+0x48>)
 800e31e:	480e      	ldr	r0, [pc, #56]	; (800e358 <dhcp_dec_pcb_refcount+0x4c>)
 800e320:	f004 f91a 	bl	8012558 <iprintf>
  dhcp_pcb_refcount--;
 800e324:	4b09      	ldr	r3, [pc, #36]	; (800e34c <dhcp_dec_pcb_refcount+0x40>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	3b01      	subs	r3, #1
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	4b07      	ldr	r3, [pc, #28]	; (800e34c <dhcp_dec_pcb_refcount+0x40>)
 800e32e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e330:	4b06      	ldr	r3, [pc, #24]	; (800e34c <dhcp_dec_pcb_refcount+0x40>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d107      	bne.n	800e348 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e338:	4b08      	ldr	r3, [pc, #32]	; (800e35c <dhcp_dec_pcb_refcount+0x50>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff ff09 	bl	800e154 <udp_remove>
    dhcp_pcb = NULL;
 800e342:	4b06      	ldr	r3, [pc, #24]	; (800e35c <dhcp_dec_pcb_refcount+0x50>)
 800e344:	2200      	movs	r2, #0
 800e346:	601a      	str	r2, [r3, #0]
  }
}
 800e348:	bf00      	nop
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20000560 	.word	0x20000560
 800e350:	08015984 	.word	0x08015984
 800e354:	08015a0c 	.word	0x08015a0c
 800e358:	080159e4 	.word	0x080159e4
 800e35c:	2000055c 	.word	0x2000055c

0800e360 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a1b      	ldr	r3, [r3, #32]
 800e36c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e36e:	210c      	movs	r1, #12
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f001 f81b 	bl	800f3ac <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e376:	4b06      	ldr	r3, [pc, #24]	; (800e390 <dhcp_handle_nak+0x30>)
 800e378:	4a05      	ldr	r2, [pc, #20]	; (800e390 <dhcp_handle_nak+0x30>)
 800e37a:	4905      	ldr	r1, [pc, #20]	; (800e390 <dhcp_handle_nak+0x30>)
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f8 fa13 	bl	80067a8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fc0e 	bl	800eba4 <dhcp_discover>
}
 800e388:	bf00      	nop
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	0801690c 	.word	0x0801690c

0800e394 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a1b      	ldr	r3, [r3, #32]
 800e3a0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e3a2:	2108      	movs	r1, #8
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f001 f801 	bl	800f3ac <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	331c      	adds	r3, #28
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f002 fb00 	bl	80109b8 <etharp_query>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	799b      	ldrb	r3, [r3, #6]
 800e3c0:	2bff      	cmp	r3, #255	; 0xff
 800e3c2:	d005      	beq.n	800e3d0 <dhcp_check+0x3c>
    dhcp->tries++;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	799b      	ldrb	r3, [r3, #6]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e3d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e3d4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e3d6:	893b      	ldrh	r3, [r7, #8]
 800e3d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e3dc:	4a06      	ldr	r2, [pc, #24]	; (800e3f8 <dhcp_check+0x64>)
 800e3de:	fb82 1203 	smull	r1, r2, r2, r3
 800e3e2:	1152      	asrs	r2, r2, #5
 800e3e4:	17db      	asrs	r3, r3, #31
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e3ee:	bf00      	nop
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	10624dd3 	.word	0x10624dd3

0800e3fc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a1b      	ldr	r3, [r3, #32]
 800e40a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e40c:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <dhcp_handle_offer+0x44>)
 800e40e:	789b      	ldrb	r3, [r3, #2]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d011      	beq.n	800e438 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e41a:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <dhcp_handle_offer+0x48>)
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f7 fb61 	bl	8005ae6 <lwip_htonl>
 800e424:	4602      	mov	r2, r0
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	691a      	ldr	r2, [r3, #16]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f808 	bl	800e448 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e438:	bf00      	nop
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	200071a4 	.word	0x200071a4
 800e444:	200071ac 	.word	0x200071ac

0800e448 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e448:	b5b0      	push	{r4, r5, r7, lr}
 800e44a:	b08a      	sub	sp, #40	; 0x28
 800e44c:	af02      	add	r7, sp, #8
 800e44e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d109      	bne.n	800e46a <dhcp_select+0x22>
 800e456:	4b71      	ldr	r3, [pc, #452]	; (800e61c <dhcp_select+0x1d4>)
 800e458:	f240 1277 	movw	r2, #375	; 0x177
 800e45c:	4970      	ldr	r1, [pc, #448]	; (800e620 <dhcp_select+0x1d8>)
 800e45e:	4871      	ldr	r0, [pc, #452]	; (800e624 <dhcp_select+0x1dc>)
 800e460:	f004 f87a 	bl	8012558 <iprintf>
 800e464:	f06f 030f 	mvn.w	r3, #15
 800e468:	e0d3      	b.n	800e612 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d109      	bne.n	800e48a <dhcp_select+0x42>
 800e476:	4b69      	ldr	r3, [pc, #420]	; (800e61c <dhcp_select+0x1d4>)
 800e478:	f240 1279 	movw	r2, #377	; 0x179
 800e47c:	496a      	ldr	r1, [pc, #424]	; (800e628 <dhcp_select+0x1e0>)
 800e47e:	4869      	ldr	r0, [pc, #420]	; (800e624 <dhcp_select+0x1dc>)
 800e480:	f004 f86a 	bl	8012558 <iprintf>
 800e484:	f06f 0305 	mvn.w	r3, #5
 800e488:	e0c3      	b.n	800e612 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e48a:	2101      	movs	r1, #1
 800e48c:	69b8      	ldr	r0, [r7, #24]
 800e48e:	f000 ff8d 	bl	800f3ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e492:	f107 030c 	add.w	r3, r7, #12
 800e496:	2203      	movs	r2, #3
 800e498:	69b9      	ldr	r1, [r7, #24]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f001 fc10 	bl	800fcc0 <dhcp_create_msg>
 800e4a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 8085 	beq.w	800e5b4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e4b0:	89b8      	ldrh	r0, [r7, #12]
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4b8:	2302      	movs	r3, #2
 800e4ba:	2239      	movs	r2, #57	; 0x39
 800e4bc:	f000 ff90 	bl	800f3e0 <dhcp_option>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e4c4:	89b8      	ldrh	r0, [r7, #12]
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	f000 ffdf 	bl	800f494 <dhcp_option_short>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e4da:	89b8      	ldrh	r0, [r7, #12]
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4e2:	2304      	movs	r3, #4
 800e4e4:	2232      	movs	r2, #50	; 0x32
 800e4e6:	f000 ff7b 	bl	800f3e0 <dhcp_option>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e4ee:	89bc      	ldrh	r4, [r7, #12]
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	69db      	ldr	r3, [r3, #28]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7f7 faf3 	bl	8005ae6 <lwip_htonl>
 800e500:	4603      	mov	r3, r0
 800e502:	461a      	mov	r2, r3
 800e504:	4629      	mov	r1, r5
 800e506:	4620      	mov	r0, r4
 800e508:	f000 fff6 	bl	800f4f8 <dhcp_option_long>
 800e50c:	4603      	mov	r3, r0
 800e50e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e510:	89b8      	ldrh	r0, [r7, #12]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e518:	2304      	movs	r3, #4
 800e51a:	2236      	movs	r2, #54	; 0x36
 800e51c:	f000 ff60 	bl	800f3e0 <dhcp_option>
 800e520:	4603      	mov	r3, r0
 800e522:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e524:	89bc      	ldrh	r4, [r7, #12]
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	4618      	mov	r0, r3
 800e532:	f7f7 fad8 	bl	8005ae6 <lwip_htonl>
 800e536:	4603      	mov	r3, r0
 800e538:	461a      	mov	r2, r3
 800e53a:	4629      	mov	r1, r5
 800e53c:	4620      	mov	r0, r4
 800e53e:	f000 ffdb 	bl	800f4f8 <dhcp_option_long>
 800e542:	4603      	mov	r3, r0
 800e544:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e546:	89b8      	ldrh	r0, [r7, #12]
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e54e:	2303      	movs	r3, #3
 800e550:	2237      	movs	r2, #55	; 0x37
 800e552:	f000 ff45 	bl	800f3e0 <dhcp_option>
 800e556:	4603      	mov	r3, r0
 800e558:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e55a:	2300      	movs	r3, #0
 800e55c:	77bb      	strb	r3, [r7, #30]
 800e55e:	e00e      	b.n	800e57e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e560:	89b8      	ldrh	r0, [r7, #12]
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e568:	7fbb      	ldrb	r3, [r7, #30]
 800e56a:	4a30      	ldr	r2, [pc, #192]	; (800e62c <dhcp_select+0x1e4>)
 800e56c:	5cd3      	ldrb	r3, [r2, r3]
 800e56e:	461a      	mov	r2, r3
 800e570:	f000 ff6a 	bl	800f448 <dhcp_option_byte>
 800e574:	4603      	mov	r3, r0
 800e576:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e578:	7fbb      	ldrb	r3, [r7, #30]
 800e57a:	3301      	adds	r3, #1
 800e57c:	77bb      	strb	r3, [r7, #30]
 800e57e:	7fbb      	ldrb	r3, [r7, #30]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d9ed      	bls.n	800e560 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e584:	89b8      	ldrh	r0, [r7, #12]
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	33f0      	adds	r3, #240	; 0xf0
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	4619      	mov	r1, r3
 800e58e:	f001 fc6d 	bl	800fe6c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e592:	4b27      	ldr	r3, [pc, #156]	; (800e630 <dhcp_select+0x1e8>)
 800e594:	6818      	ldr	r0, [r3, #0]
 800e596:	4b27      	ldr	r3, [pc, #156]	; (800e634 <dhcp_select+0x1ec>)
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	2343      	movs	r3, #67	; 0x43
 800e5a0:	4a25      	ldr	r2, [pc, #148]	; (800e638 <dhcp_select+0x1f0>)
 800e5a2:	6979      	ldr	r1, [r7, #20]
 800e5a4:	f7ff fbda 	bl	800dd5c <udp_sendto_if_src>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e5ac:	6978      	ldr	r0, [r7, #20]
 800e5ae:	f7f8 fd5d 	bl	800706c <pbuf_free>
 800e5b2:	e001      	b.n	800e5b8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e5b4:	23ff      	movs	r3, #255	; 0xff
 800e5b6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	799b      	ldrb	r3, [r3, #6]
 800e5bc:	2bff      	cmp	r3, #255	; 0xff
 800e5be:	d005      	beq.n	800e5cc <dhcp_select+0x184>
    dhcp->tries++;
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	799b      	ldrb	r3, [r3, #6]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	799b      	ldrb	r3, [r3, #6]
 800e5d0:	2b05      	cmp	r3, #5
 800e5d2:	d80d      	bhi.n	800e5f0 <dhcp_select+0x1a8>
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	799b      	ldrb	r3, [r3, #6]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	2301      	movs	r3, #1
 800e5dc:	4093      	lsls	r3, r2
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	0152      	lsls	r2, r2, #5
 800e5e4:	1ad2      	subs	r2, r2, r3
 800e5e6:	0092      	lsls	r2, r2, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	e001      	b.n	800e5f4 <dhcp_select+0x1ac>
 800e5f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e5f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e5f6:	89fb      	ldrh	r3, [r7, #14]
 800e5f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e5fc:	4a0f      	ldr	r2, [pc, #60]	; (800e63c <dhcp_select+0x1f4>)
 800e5fe:	fb82 1203 	smull	r1, r2, r2, r3
 800e602:	1152      	asrs	r2, r2, #5
 800e604:	17db      	asrs	r3, r3, #31
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	b29a      	uxth	r2, r3
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e60e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3720      	adds	r7, #32
 800e616:	46bd      	mov	sp, r7
 800e618:	bdb0      	pop	{r4, r5, r7, pc}
 800e61a:	bf00      	nop
 800e61c:	08015984 	.word	0x08015984
 800e620:	08015a30 	.word	0x08015a30
 800e624:	080159e4 	.word	0x080159e4
 800e628:	08015a4c 	.word	0x08015a4c
 800e62c:	20000014 	.word	0x20000014
 800e630:	2000055c 	.word	0x2000055c
 800e634:	0801690c 	.word	0x0801690c
 800e638:	08016910 	.word	0x08016910
 800e63c:	10624dd3 	.word	0x10624dd3

0800e640 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e646:	4b27      	ldr	r3, [pc, #156]	; (800e6e4 <dhcp_coarse_tmr+0xa4>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	607b      	str	r3, [r7, #4]
 800e64c:	e042      	b.n	800e6d4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d039      	beq.n	800e6ce <dhcp_coarse_tmr+0x8e>
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	795b      	ldrb	r3, [r3, #5]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d035      	beq.n	800e6ce <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	8a9b      	ldrh	r3, [r3, #20]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d012      	beq.n	800e690 <dhcp_coarse_tmr+0x50>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	8a5b      	ldrh	r3, [r3, #18]
 800e66e:	3301      	adds	r3, #1
 800e670:	b29a      	uxth	r2, r3
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	825a      	strh	r2, [r3, #18]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	8a5a      	ldrh	r2, [r3, #18]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	8a9b      	ldrh	r3, [r3, #20]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d106      	bne.n	800e690 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fdf8 	bl	800f278 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f96b 	bl	800e964 <dhcp_start>
 800e68e:	e01e      	b.n	800e6ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	8a1b      	ldrh	r3, [r3, #16]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00b      	beq.n	800e6b0 <dhcp_coarse_tmr+0x70>
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	8a1b      	ldrh	r3, [r3, #16]
 800e69c:	1e5a      	subs	r2, r3, #1
 800e69e:	b291      	uxth	r1, r2
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	8211      	strh	r1, [r2, #16]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d103      	bne.n	800e6b0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f8c7 	bl	800e83c <dhcp_t2_timeout>
 800e6ae:	e00e      	b.n	800e6ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	89db      	ldrh	r3, [r3, #14]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00a      	beq.n	800e6ce <dhcp_coarse_tmr+0x8e>
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	89db      	ldrh	r3, [r3, #14]
 800e6bc:	1e5a      	subs	r2, r3, #1
 800e6be:	b291      	uxth	r1, r2
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	81d1      	strh	r1, [r2, #14]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d102      	bne.n	800e6ce <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f888 	bl	800e7de <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	607b      	str	r3, [r7, #4]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1b9      	bne.n	800e64e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800e6da:	bf00      	nop
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	20007178 	.word	0x20007178

0800e6e8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e6ee:	4b16      	ldr	r3, [pc, #88]	; (800e748 <dhcp_fine_tmr+0x60>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	607b      	str	r3, [r7, #4]
 800e6f4:	e020      	b.n	800e738 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6a1b      	ldr	r3, [r3, #32]
 800e6fa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d017      	beq.n	800e732 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	891b      	ldrh	r3, [r3, #8]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d906      	bls.n	800e718 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	891b      	ldrh	r3, [r3, #8]
 800e70e:	3b01      	subs	r3, #1
 800e710:	b29a      	uxth	r2, r3
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	811a      	strh	r2, [r3, #8]
 800e716:	e00c      	b.n	800e732 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	891b      	ldrh	r3, [r3, #8]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d108      	bne.n	800e732 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	891b      	ldrh	r3, [r3, #8]
 800e724:	3b01      	subs	r3, #1
 800e726:	b29a      	uxth	r2, r3
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f80d 	bl	800e74c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	607b      	str	r3, [r7, #4]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1db      	bne.n	800e6f6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	20007178 	.word	0x20007178

0800e74c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a1b      	ldr	r3, [r3, #32]
 800e758:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	795b      	ldrb	r3, [r3, #5]
 800e75e:	2b0c      	cmp	r3, #12
 800e760:	d003      	beq.n	800e76a <dhcp_timeout+0x1e>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	795b      	ldrb	r3, [r3, #5]
 800e766:	2b06      	cmp	r3, #6
 800e768:	d103      	bne.n	800e772 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fa1a 	bl	800eba4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e770:	e031      	b.n	800e7d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	795b      	ldrb	r3, [r3, #5]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d10e      	bne.n	800e798 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	799b      	ldrb	r3, [r3, #6]
 800e77e:	2b05      	cmp	r3, #5
 800e780:	d803      	bhi.n	800e78a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7ff fe60 	bl	800e448 <dhcp_select>
}
 800e788:	e025      	b.n	800e7d6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 fd74 	bl	800f278 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f8e7 	bl	800e964 <dhcp_start>
}
 800e796:	e01e      	b.n	800e7d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	795b      	ldrb	r3, [r3, #5]
 800e79c:	2b08      	cmp	r3, #8
 800e79e:	d10b      	bne.n	800e7b8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	799b      	ldrb	r3, [r3, #6]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d803      	bhi.n	800e7b0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7ff fdf3 	bl	800e394 <dhcp_check>
}
 800e7ae:	e012      	b.n	800e7d6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fa99 	bl	800ece8 <dhcp_bind>
}
 800e7b6:	e00e      	b.n	800e7d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	795b      	ldrb	r3, [r3, #5]
 800e7bc:	2b03      	cmp	r3, #3
 800e7be:	d10a      	bne.n	800e7d6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	799b      	ldrb	r3, [r3, #6]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d803      	bhi.n	800e7d0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fc9f 	bl	800f10c <dhcp_reboot>
}
 800e7ce:	e002      	b.n	800e7d6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f9e7 	bl	800eba4 <dhcp_discover>
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b084      	sub	sp, #16
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	795b      	ldrb	r3, [r3, #5]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d007      	beq.n	800e804 <dhcp_t1_timeout+0x26>
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	795b      	ldrb	r3, [r3, #5]
 800e7f8:	2b0a      	cmp	r3, #10
 800e7fa:	d003      	beq.n	800e804 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e800:	2b05      	cmp	r3, #5
 800e802:	d117      	bne.n	800e834 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 fb49 	bl	800ee9c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	899b      	ldrh	r3, [r3, #12]
 800e80e:	461a      	mov	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	8a5b      	ldrh	r3, [r3, #18]
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	2b01      	cmp	r3, #1
 800e818:	dd0c      	ble.n	800e834 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	899b      	ldrh	r3, [r3, #12]
 800e81e:	461a      	mov	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	8a5b      	ldrh	r3, [r3, #18]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	da00      	bge.n	800e82c <dhcp_t1_timeout+0x4e>
 800e82a:	3301      	adds	r3, #1
 800e82c:	105b      	asrs	r3, r3, #1
 800e82e:	b29a      	uxth	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e834:	bf00      	nop
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a1b      	ldr	r3, [r3, #32]
 800e848:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	795b      	ldrb	r3, [r3, #5]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d00b      	beq.n	800e86a <dhcp_t2_timeout+0x2e>
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	795b      	ldrb	r3, [r3, #5]
 800e856:	2b0a      	cmp	r3, #10
 800e858:	d007      	beq.n	800e86a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e85e:	2b05      	cmp	r3, #5
 800e860:	d003      	beq.n	800e86a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	795b      	ldrb	r3, [r3, #5]
 800e866:	2b04      	cmp	r3, #4
 800e868:	d117      	bne.n	800e89a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fbb2 	bl	800efd4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	8a9b      	ldrh	r3, [r3, #20]
 800e874:	461a      	mov	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	8a5b      	ldrh	r3, [r3, #18]
 800e87a:	1ad3      	subs	r3, r2, r3
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	dd0c      	ble.n	800e89a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	8a9b      	ldrh	r3, [r3, #20]
 800e884:	461a      	mov	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	8a5b      	ldrh	r3, [r3, #18]
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	da00      	bge.n	800e892 <dhcp_t2_timeout+0x56>
 800e890:	3301      	adds	r3, #1
 800e892:	105b      	asrs	r3, r3, #1
 800e894:	b29a      	uxth	r2, r3
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
	...

0800e8a4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a1b      	ldr	r3, [r3, #32]
 800e8b2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e8c0:	4b26      	ldr	r3, [pc, #152]	; (800e95c <dhcp_handle_ack+0xb8>)
 800e8c2:	78db      	ldrb	r3, [r3, #3]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d003      	beq.n	800e8d0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e8c8:	4b25      	ldr	r3, [pc, #148]	; (800e960 <dhcp_handle_ack+0xbc>)
 800e8ca:	68da      	ldr	r2, [r3, #12]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e8d0:	4b22      	ldr	r3, [pc, #136]	; (800e95c <dhcp_handle_ack+0xb8>)
 800e8d2:	791b      	ldrb	r3, [r3, #4]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d004      	beq.n	800e8e2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e8d8:	4b21      	ldr	r3, [pc, #132]	; (800e960 <dhcp_handle_ack+0xbc>)
 800e8da:	691a      	ldr	r2, [r3, #16]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	62da      	str	r2, [r3, #44]	; 0x2c
 800e8e0:	e004      	b.n	800e8ec <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e6:	085a      	lsrs	r2, r3, #1
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e8ec:	4b1b      	ldr	r3, [pc, #108]	; (800e95c <dhcp_handle_ack+0xb8>)
 800e8ee:	795b      	ldrb	r3, [r3, #5]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d004      	beq.n	800e8fe <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e8f4:	4b1a      	ldr	r3, [pc, #104]	; (800e960 <dhcp_handle_ack+0xbc>)
 800e8f6:	695a      	ldr	r2, [r3, #20]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	631a      	str	r2, [r3, #48]	; 0x30
 800e8fc:	e007      	b.n	800e90e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e902:	4613      	mov	r3, r2
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	1a9b      	subs	r3, r3, r2
 800e908:	08da      	lsrs	r2, r3, #3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	691a      	ldr	r2, [r3, #16]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e916:	4b11      	ldr	r3, [pc, #68]	; (800e95c <dhcp_handle_ack+0xb8>)
 800e918:	799b      	ldrb	r3, [r3, #6]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00b      	beq.n	800e936 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e91e:	4b10      	ldr	r3, [pc, #64]	; (800e960 <dhcp_handle_ack+0xbc>)
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	4618      	mov	r0, r3
 800e924:	f7f7 f8df 	bl	8005ae6 <lwip_htonl>
 800e928:	4602      	mov	r2, r0
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2201      	movs	r2, #1
 800e932:	71da      	strb	r2, [r3, #7]
 800e934:	e002      	b.n	800e93c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2200      	movs	r2, #0
 800e93a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e93c:	4b07      	ldr	r3, [pc, #28]	; (800e95c <dhcp_handle_ack+0xb8>)
 800e93e:	79db      	ldrb	r3, [r3, #7]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d007      	beq.n	800e954 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e944:	4b06      	ldr	r3, [pc, #24]	; (800e960 <dhcp_handle_ack+0xbc>)
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7f7 f8cc 	bl	8005ae6 <lwip_htonl>
 800e94e:	4602      	mov	r2, r0
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e954:	bf00      	nop
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	200071a4 	.word	0x200071a4
 800e960:	200071ac 	.word	0x200071ac

0800e964 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d109      	bne.n	800e986 <dhcp_start+0x22>
 800e972:	4b37      	ldr	r3, [pc, #220]	; (800ea50 <dhcp_start+0xec>)
 800e974:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e978:	4936      	ldr	r1, [pc, #216]	; (800ea54 <dhcp_start+0xf0>)
 800e97a:	4837      	ldr	r0, [pc, #220]	; (800ea58 <dhcp_start+0xf4>)
 800e97c:	f003 fdec 	bl	8012558 <iprintf>
 800e980:	f06f 030f 	mvn.w	r3, #15
 800e984:	e060      	b.n	800ea48 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	2b00      	cmp	r3, #0
 800e992:	d109      	bne.n	800e9a8 <dhcp_start+0x44>
 800e994:	4b2e      	ldr	r3, [pc, #184]	; (800ea50 <dhcp_start+0xec>)
 800e996:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e99a:	4930      	ldr	r1, [pc, #192]	; (800ea5c <dhcp_start+0xf8>)
 800e99c:	482e      	ldr	r0, [pc, #184]	; (800ea58 <dhcp_start+0xf4>)
 800e99e:	f003 fddb 	bl	8012558 <iprintf>
 800e9a2:	f06f 030f 	mvn.w	r3, #15
 800e9a6:	e04f      	b.n	800ea48 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a1b      	ldr	r3, [r3, #32]
 800e9ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e9b6:	d202      	bcs.n	800e9be <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9bc:	e044      	b.n	800ea48 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10d      	bne.n	800e9e0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e9c4:	2034      	movs	r0, #52	; 0x34
 800e9c6:	f7f7 fb97 	bl	80060f8 <mem_malloc>
 800e9ca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d102      	bne.n	800e9d8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d6:	e037      	b.n	800ea48 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	621a      	str	r2, [r3, #32]
 800e9de:	e005      	b.n	800e9ec <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	791b      	ldrb	r3, [r3, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e9e8:	f7ff fc90 	bl	800e30c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e9ec:	2234      	movs	r2, #52	; 0x34
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f003 fda9 	bl	8012548 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e9f6:	f7ff fc37 	bl	800e268 <dhcp_inc_pcb_refcount>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <dhcp_start+0xa2>
    return ERR_MEM;
 800ea00:	f04f 33ff 	mov.w	r3, #4294967295
 800ea04:	e020      	b.n	800ea48 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea12:	f003 0304 	and.w	r3, r3, #4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d105      	bne.n	800ea26 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ea1a:	2102      	movs	r1, #2
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 fcc5 	bl	800f3ac <dhcp_set_state>
    return ERR_OK;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e010      	b.n	800ea48 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f8bc 	bl	800eba4 <dhcp_discover>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ea30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d005      	beq.n	800ea44 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 fc1d 	bl	800f278 <dhcp_release_and_stop>
    return ERR_MEM;
 800ea3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea42:	e001      	b.n	800ea48 <dhcp_start+0xe4>
  }
  return result;
 800ea44:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	08015984 	.word	0x08015984
 800ea54:	08015a68 	.word	0x08015a68
 800ea58:	080159e4 	.word	0x080159e4
 800ea5c:	08015aac 	.word	0x08015aac

0800ea60 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d107      	bne.n	800ea80 <dhcp_arp_reply+0x20>
 800ea70:	4b0e      	ldr	r3, [pc, #56]	; (800eaac <dhcp_arp_reply+0x4c>)
 800ea72:	f240 328b 	movw	r2, #907	; 0x38b
 800ea76:	490e      	ldr	r1, [pc, #56]	; (800eab0 <dhcp_arp_reply+0x50>)
 800ea78:	480e      	ldr	r0, [pc, #56]	; (800eab4 <dhcp_arp_reply+0x54>)
 800ea7a:	f003 fd6d 	bl	8012558 <iprintf>
 800ea7e:	e012      	b.n	800eaa6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a1b      	ldr	r3, [r3, #32]
 800ea84:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00c      	beq.n	800eaa6 <dhcp_arp_reply+0x46>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	795b      	ldrb	r3, [r3, #5]
 800ea90:	2b08      	cmp	r3, #8
 800ea92:	d108      	bne.n	800eaa6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	69db      	ldr	r3, [r3, #28]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d102      	bne.n	800eaa6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f809 	bl	800eab8 <dhcp_decline>
    }
  }
}
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	08015984 	.word	0x08015984
 800eab0:	08015a68 	.word	0x08015a68
 800eab4:	080159e4 	.word	0x080159e4

0800eab8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800eab8:	b5b0      	push	{r4, r5, r7, lr}
 800eaba:	b08a      	sub	sp, #40	; 0x28
 800eabc:	af02      	add	r7, sp, #8
 800eabe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a1b      	ldr	r3, [r3, #32]
 800eac4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800eac6:	210c      	movs	r1, #12
 800eac8:	69b8      	ldr	r0, [r7, #24]
 800eaca:	f000 fc6f 	bl	800f3ac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800eace:	f107 030c 	add.w	r3, r7, #12
 800ead2:	2204      	movs	r2, #4
 800ead4:	69b9      	ldr	r1, [r7, #24]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f001 f8f2 	bl	800fcc0 <dhcp_create_msg>
 800eadc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d035      	beq.n	800eb50 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800eaea:	89b8      	ldrh	r0, [r7, #12]
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eaf2:	2304      	movs	r3, #4
 800eaf4:	2232      	movs	r2, #50	; 0x32
 800eaf6:	f000 fc73 	bl	800f3e0 <dhcp_option>
 800eafa:	4603      	mov	r3, r0
 800eafc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eafe:	89bc      	ldrh	r4, [r7, #12]
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	69db      	ldr	r3, [r3, #28]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7f6 ffeb 	bl	8005ae6 <lwip_htonl>
 800eb10:	4603      	mov	r3, r0
 800eb12:	461a      	mov	r2, r3
 800eb14:	4629      	mov	r1, r5
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 fcee 	bl	800f4f8 <dhcp_option_long>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eb20:	89b8      	ldrh	r0, [r7, #12]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	33f0      	adds	r3, #240	; 0xf0
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	f001 f99f 	bl	800fe6c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800eb2e:	4b19      	ldr	r3, [pc, #100]	; (800eb94 <dhcp_decline+0xdc>)
 800eb30:	6818      	ldr	r0, [r3, #0]
 800eb32:	4b19      	ldr	r3, [pc, #100]	; (800eb98 <dhcp_decline+0xe0>)
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	2343      	movs	r3, #67	; 0x43
 800eb3c:	4a17      	ldr	r2, [pc, #92]	; (800eb9c <dhcp_decline+0xe4>)
 800eb3e:	6979      	ldr	r1, [r7, #20]
 800eb40:	f7ff f90c 	bl	800dd5c <udp_sendto_if_src>
 800eb44:	4603      	mov	r3, r0
 800eb46:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800eb48:	6978      	ldr	r0, [r7, #20]
 800eb4a:	f7f8 fa8f 	bl	800706c <pbuf_free>
 800eb4e:	e001      	b.n	800eb54 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800eb50:	23ff      	movs	r3, #255	; 0xff
 800eb52:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	799b      	ldrb	r3, [r3, #6]
 800eb58:	2bff      	cmp	r3, #255	; 0xff
 800eb5a:	d005      	beq.n	800eb68 <dhcp_decline+0xb0>
    dhcp->tries++;
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	799b      	ldrb	r3, [r3, #6]
 800eb60:	3301      	adds	r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800eb68:	f242 7310 	movw	r3, #10000	; 0x2710
 800eb6c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb6e:	89fb      	ldrh	r3, [r7, #14]
 800eb70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eb74:	4a0a      	ldr	r2, [pc, #40]	; (800eba0 <dhcp_decline+0xe8>)
 800eb76:	fb82 1203 	smull	r1, r2, r2, r3
 800eb7a:	1152      	asrs	r2, r2, #5
 800eb7c:	17db      	asrs	r3, r3, #31
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eb86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3720      	adds	r7, #32
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bdb0      	pop	{r4, r5, r7, pc}
 800eb92:	bf00      	nop
 800eb94:	2000055c 	.word	0x2000055c
 800eb98:	0801690c 	.word	0x0801690c
 800eb9c:	08016910 	.word	0x08016910
 800eba0:	10624dd3 	.word	0x10624dd3

0800eba4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08a      	sub	sp, #40	; 0x28
 800eba8:	af02      	add	r7, sp, #8
 800ebaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a1b      	ldr	r3, [r3, #32]
 800ebb0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ebbc:	2106      	movs	r1, #6
 800ebbe:	69b8      	ldr	r0, [r7, #24]
 800ebc0:	f000 fbf4 	bl	800f3ac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ebc4:	f107 0308 	add.w	r3, r7, #8
 800ebc8:	2201      	movs	r2, #1
 800ebca:	69b9      	ldr	r1, [r7, #24]
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f001 f877 	bl	800fcc0 <dhcp_create_msg>
 800ebd2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d04b      	beq.n	800ec72 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ebe0:	8938      	ldrh	r0, [r7, #8]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ebe8:	2302      	movs	r3, #2
 800ebea:	2239      	movs	r2, #57	; 0x39
 800ebec:	f000 fbf8 	bl	800f3e0 <dhcp_option>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ebf4:	8938      	ldrh	r0, [r7, #8]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec00:	461a      	mov	r2, r3
 800ec02:	f000 fc47 	bl	800f494 <dhcp_option_short>
 800ec06:	4603      	mov	r3, r0
 800ec08:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec0a:	8938      	ldrh	r0, [r7, #8]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec12:	2303      	movs	r3, #3
 800ec14:	2237      	movs	r2, #55	; 0x37
 800ec16:	f000 fbe3 	bl	800f3e0 <dhcp_option>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec1e:	2300      	movs	r3, #0
 800ec20:	77fb      	strb	r3, [r7, #31]
 800ec22:	e00e      	b.n	800ec42 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec24:	8938      	ldrh	r0, [r7, #8]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec2c:	7ffb      	ldrb	r3, [r7, #31]
 800ec2e:	4a29      	ldr	r2, [pc, #164]	; (800ecd4 <dhcp_discover+0x130>)
 800ec30:	5cd3      	ldrb	r3, [r2, r3]
 800ec32:	461a      	mov	r2, r3
 800ec34:	f000 fc08 	bl	800f448 <dhcp_option_byte>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec3c:	7ffb      	ldrb	r3, [r7, #31]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	77fb      	strb	r3, [r7, #31]
 800ec42:	7ffb      	ldrb	r3, [r7, #31]
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d9ed      	bls.n	800ec24 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec48:	8938      	ldrh	r0, [r7, #8]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	33f0      	adds	r3, #240	; 0xf0
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	4619      	mov	r1, r3
 800ec52:	f001 f90b 	bl	800fe6c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ec56:	4b20      	ldr	r3, [pc, #128]	; (800ecd8 <dhcp_discover+0x134>)
 800ec58:	6818      	ldr	r0, [r3, #0]
 800ec5a:	4b20      	ldr	r3, [pc, #128]	; (800ecdc <dhcp_discover+0x138>)
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	2343      	movs	r3, #67	; 0x43
 800ec64:	4a1e      	ldr	r2, [pc, #120]	; (800ece0 <dhcp_discover+0x13c>)
 800ec66:	6939      	ldr	r1, [r7, #16]
 800ec68:	f7ff f878 	bl	800dd5c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800ec6c:	6938      	ldr	r0, [r7, #16]
 800ec6e:	f7f8 f9fd 	bl	800706c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	799b      	ldrb	r3, [r3, #6]
 800ec76:	2bff      	cmp	r3, #255	; 0xff
 800ec78:	d005      	beq.n	800ec86 <dhcp_discover+0xe2>
    dhcp->tries++;
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	799b      	ldrb	r3, [r3, #6]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	799b      	ldrb	r3, [r3, #6]
 800ec8a:	2b05      	cmp	r3, #5
 800ec8c:	d80d      	bhi.n	800ecaa <dhcp_discover+0x106>
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	799b      	ldrb	r3, [r3, #6]
 800ec92:	461a      	mov	r2, r3
 800ec94:	2301      	movs	r3, #1
 800ec96:	4093      	lsls	r3, r2
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	0152      	lsls	r2, r2, #5
 800ec9e:	1ad2      	subs	r2, r2, r3
 800eca0:	0092      	lsls	r2, r2, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	e001      	b.n	800ecae <dhcp_discover+0x10a>
 800ecaa:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ecae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ecb0:	897b      	ldrh	r3, [r7, #10]
 800ecb2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ecb6:	4a0b      	ldr	r2, [pc, #44]	; (800ece4 <dhcp_discover+0x140>)
 800ecb8:	fb82 1203 	smull	r1, r2, r2, r3
 800ecbc:	1152      	asrs	r2, r2, #5
 800ecbe:	17db      	asrs	r3, r3, #31
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ecc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3720      	adds	r7, #32
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	20000014 	.word	0x20000014
 800ecd8:	2000055c 	.word	0x2000055c
 800ecdc:	0801690c 	.word	0x0801690c
 800ece0:	08016910 	.word	0x08016910
 800ece4:	10624dd3 	.word	0x10624dd3

0800ece8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b088      	sub	sp, #32
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d107      	bne.n	800ed06 <dhcp_bind+0x1e>
 800ecf6:	4b64      	ldr	r3, [pc, #400]	; (800ee88 <dhcp_bind+0x1a0>)
 800ecf8:	f240 4215 	movw	r2, #1045	; 0x415
 800ecfc:	4963      	ldr	r1, [pc, #396]	; (800ee8c <dhcp_bind+0x1a4>)
 800ecfe:	4864      	ldr	r0, [pc, #400]	; (800ee90 <dhcp_bind+0x1a8>)
 800ed00:	f003 fc2a 	bl	8012558 <iprintf>
 800ed04:	e0bc      	b.n	800ee80 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d107      	bne.n	800ed22 <dhcp_bind+0x3a>
 800ed12:	4b5d      	ldr	r3, [pc, #372]	; (800ee88 <dhcp_bind+0x1a0>)
 800ed14:	f240 4217 	movw	r2, #1047	; 0x417
 800ed18:	495e      	ldr	r1, [pc, #376]	; (800ee94 <dhcp_bind+0x1ac>)
 800ed1a:	485d      	ldr	r0, [pc, #372]	; (800ee90 <dhcp_bind+0x1a8>)
 800ed1c:	f003 fc1c 	bl	8012558 <iprintf>
 800ed20:	e0ae      	b.n	800ee80 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	2200      	movs	r2, #0
 800ed26:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed30:	d019      	beq.n	800ed66 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed36:	331e      	adds	r3, #30
 800ed38:	4a57      	ldr	r2, [pc, #348]	; (800ee98 <dhcp_bind+0x1b0>)
 800ed3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed3e:	095b      	lsrs	r3, r3, #5
 800ed40:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed48:	d302      	bcc.n	800ed50 <dhcp_bind+0x68>
      timeout = 0xffff;
 800ed4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed4e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	8a9b      	ldrh	r3, [r3, #20]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d102      	bne.n	800ed66 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	2201      	movs	r2, #1
 800ed64:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed6e:	d01d      	beq.n	800edac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed74:	331e      	adds	r3, #30
 800ed76:	4a48      	ldr	r2, [pc, #288]	; (800ee98 <dhcp_bind+0x1b0>)
 800ed78:	fba2 2303 	umull	r2, r3, r2, r3
 800ed7c:	095b      	lsrs	r3, r3, #5
 800ed7e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed86:	d302      	bcc.n	800ed8e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ed88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed8c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	895b      	ldrh	r3, [r3, #10]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d102      	bne.n	800eda4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	2201      	movs	r2, #1
 800eda2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	895a      	ldrh	r2, [r3, #10]
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb4:	d01d      	beq.n	800edf2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edba:	331e      	adds	r3, #30
 800edbc:	4a36      	ldr	r2, [pc, #216]	; (800ee98 <dhcp_bind+0x1b0>)
 800edbe:	fba2 2303 	umull	r2, r3, r2, r3
 800edc2:	095b      	lsrs	r3, r3, #5
 800edc4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edcc:	d302      	bcc.n	800edd4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800edce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edd2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	899b      	ldrh	r3, [r3, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d102      	bne.n	800edea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	2201      	movs	r2, #1
 800ede8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	899a      	ldrh	r2, [r3, #12]
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	895a      	ldrh	r2, [r3, #10]
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	899b      	ldrh	r3, [r3, #12]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d306      	bcc.n	800ee0c <dhcp_bind+0x124>
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	899b      	ldrh	r3, [r3, #12]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	79db      	ldrb	r3, [r3, #7]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	6a1b      	ldr	r3, [r3, #32]
 800ee18:	613b      	str	r3, [r7, #16]
 800ee1a:	e014      	b.n	800ee46 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	331c      	adds	r3, #28
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ee24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	db02      	blt.n	800ee32 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ee2c:	23ff      	movs	r3, #255	; 0xff
 800ee2e:	613b      	str	r3, [r7, #16]
 800ee30:	e009      	b.n	800ee46 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800ee32:	7dfb      	ldrb	r3, [r7, #23]
 800ee34:	2bbf      	cmp	r3, #191	; 0xbf
 800ee36:	d903      	bls.n	800ee40 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800ee38:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ee3c:	613b      	str	r3, [r7, #16]
 800ee3e:	e002      	b.n	800ee46 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800ee40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee44:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d108      	bne.n	800ee64 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	69da      	ldr	r2, [r3, #28]
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	4013      	ands	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee62:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ee64:	210a      	movs	r1, #10
 800ee66:	69b8      	ldr	r0, [r7, #24]
 800ee68:	f000 faa0 	bl	800f3ac <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	f103 011c 	add.w	r1, r3, #28
 800ee72:	f107 030c 	add.w	r3, r7, #12
 800ee76:	f107 0210 	add.w	r2, r7, #16
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f7f7 fc94 	bl	80067a8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ee80:	3720      	adds	r7, #32
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	08015984 	.word	0x08015984
 800ee8c:	08015ae4 	.word	0x08015ae4
 800ee90:	080159e4 	.word	0x080159e4
 800ee94:	08015b00 	.word	0x08015b00
 800ee98:	88888889 	.word	0x88888889

0800ee9c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b08a      	sub	sp, #40	; 0x28
 800eea0:	af02      	add	r7, sp, #8
 800eea2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800eeaa:	2105      	movs	r1, #5
 800eeac:	69b8      	ldr	r0, [r7, #24]
 800eeae:	f000 fa7d 	bl	800f3ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800eeb2:	f107 030c 	add.w	r3, r7, #12
 800eeb6:	2203      	movs	r2, #3
 800eeb8:	69b9      	ldr	r1, [r7, #24]
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 ff00 	bl	800fcc0 <dhcp_create_msg>
 800eec0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d04e      	beq.n	800ef66 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800eece:	89b8      	ldrh	r0, [r7, #12]
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eed6:	2302      	movs	r3, #2
 800eed8:	2239      	movs	r2, #57	; 0x39
 800eeda:	f000 fa81 	bl	800f3e0 <dhcp_option>
 800eede:	4603      	mov	r3, r0
 800eee0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800eee2:	89b8      	ldrh	r0, [r7, #12]
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eeee:	461a      	mov	r2, r3
 800eef0:	f000 fad0 	bl	800f494 <dhcp_option_short>
 800eef4:	4603      	mov	r3, r0
 800eef6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800eef8:	89b8      	ldrh	r0, [r7, #12]
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef00:	2303      	movs	r3, #3
 800ef02:	2237      	movs	r2, #55	; 0x37
 800ef04:	f000 fa6c 	bl	800f3e0 <dhcp_option>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	77bb      	strb	r3, [r7, #30]
 800ef10:	e00e      	b.n	800ef30 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ef12:	89b8      	ldrh	r0, [r7, #12]
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef1a:	7fbb      	ldrb	r3, [r7, #30]
 800ef1c:	4a2a      	ldr	r2, [pc, #168]	; (800efc8 <dhcp_renew+0x12c>)
 800ef1e:	5cd3      	ldrb	r3, [r2, r3]
 800ef20:	461a      	mov	r2, r3
 800ef22:	f000 fa91 	bl	800f448 <dhcp_option_byte>
 800ef26:	4603      	mov	r3, r0
 800ef28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef2a:	7fbb      	ldrb	r3, [r7, #30]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	77bb      	strb	r3, [r7, #30]
 800ef30:	7fbb      	ldrb	r3, [r7, #30]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d9ed      	bls.n	800ef12 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ef36:	89b8      	ldrh	r0, [r7, #12]
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	33f0      	adds	r3, #240	; 0xf0
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	4619      	mov	r1, r3
 800ef40:	f000 ff94 	bl	800fe6c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ef44:	4b21      	ldr	r3, [pc, #132]	; (800efcc <dhcp_renew+0x130>)
 800ef46:	6818      	ldr	r0, [r3, #0]
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	f103 0218 	add.w	r2, r3, #24
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	2343      	movs	r3, #67	; 0x43
 800ef54:	6979      	ldr	r1, [r7, #20]
 800ef56:	f7fe fe8d 	bl	800dc74 <udp_sendto_if>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ef5e:	6978      	ldr	r0, [r7, #20]
 800ef60:	f7f8 f884 	bl	800706c <pbuf_free>
 800ef64:	e001      	b.n	800ef6a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ef66:	23ff      	movs	r3, #255	; 0xff
 800ef68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	799b      	ldrb	r3, [r3, #6]
 800ef6e:	2bff      	cmp	r3, #255	; 0xff
 800ef70:	d005      	beq.n	800ef7e <dhcp_renew+0xe2>
    dhcp->tries++;
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	799b      	ldrb	r3, [r3, #6]
 800ef76:	3301      	adds	r3, #1
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	799b      	ldrb	r3, [r3, #6]
 800ef82:	2b09      	cmp	r3, #9
 800ef84:	d80a      	bhi.n	800ef9c <dhcp_renew+0x100>
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	799b      	ldrb	r3, [r3, #6]
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	0152      	lsls	r2, r2, #5
 800ef90:	1ad2      	subs	r2, r2, r3
 800ef92:	0092      	lsls	r2, r2, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	011b      	lsls	r3, r3, #4
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	e001      	b.n	800efa0 <dhcp_renew+0x104>
 800ef9c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800efa0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800efa2:	89fb      	ldrh	r3, [r7, #14]
 800efa4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800efa8:	4a09      	ldr	r2, [pc, #36]	; (800efd0 <dhcp_renew+0x134>)
 800efaa:	fb82 1203 	smull	r1, r2, r2, r3
 800efae:	1152      	asrs	r2, r2, #5
 800efb0:	17db      	asrs	r3, r3, #31
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800efba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3720      	adds	r7, #32
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	20000014 	.word	0x20000014
 800efcc:	2000055c 	.word	0x2000055c
 800efd0:	10624dd3 	.word	0x10624dd3

0800efd4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08a      	sub	sp, #40	; 0x28
 800efd8:	af02      	add	r7, sp, #8
 800efda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a1b      	ldr	r3, [r3, #32]
 800efe0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800efe2:	2104      	movs	r1, #4
 800efe4:	69b8      	ldr	r0, [r7, #24]
 800efe6:	f000 f9e1 	bl	800f3ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	2203      	movs	r2, #3
 800eff0:	69b9      	ldr	r1, [r7, #24]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fe64 	bl	800fcc0 <dhcp_create_msg>
 800eff8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d04c      	beq.n	800f09a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f006:	89b8      	ldrh	r0, [r7, #12]
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f00e:	2302      	movs	r3, #2
 800f010:	2239      	movs	r2, #57	; 0x39
 800f012:	f000 f9e5 	bl	800f3e0 <dhcp_option>
 800f016:	4603      	mov	r3, r0
 800f018:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f01a:	89b8      	ldrh	r0, [r7, #12]
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f026:	461a      	mov	r2, r3
 800f028:	f000 fa34 	bl	800f494 <dhcp_option_short>
 800f02c:	4603      	mov	r3, r0
 800f02e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f030:	89b8      	ldrh	r0, [r7, #12]
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f038:	2303      	movs	r3, #3
 800f03a:	2237      	movs	r2, #55	; 0x37
 800f03c:	f000 f9d0 	bl	800f3e0 <dhcp_option>
 800f040:	4603      	mov	r3, r0
 800f042:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f044:	2300      	movs	r3, #0
 800f046:	77bb      	strb	r3, [r7, #30]
 800f048:	e00e      	b.n	800f068 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f04a:	89b8      	ldrh	r0, [r7, #12]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f052:	7fbb      	ldrb	r3, [r7, #30]
 800f054:	4a29      	ldr	r2, [pc, #164]	; (800f0fc <dhcp_rebind+0x128>)
 800f056:	5cd3      	ldrb	r3, [r2, r3]
 800f058:	461a      	mov	r2, r3
 800f05a:	f000 f9f5 	bl	800f448 <dhcp_option_byte>
 800f05e:	4603      	mov	r3, r0
 800f060:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f062:	7fbb      	ldrb	r3, [r7, #30]
 800f064:	3301      	adds	r3, #1
 800f066:	77bb      	strb	r3, [r7, #30]
 800f068:	7fbb      	ldrb	r3, [r7, #30]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d9ed      	bls.n	800f04a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f06e:	89b8      	ldrh	r0, [r7, #12]
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	33f0      	adds	r3, #240	; 0xf0
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	4619      	mov	r1, r3
 800f078:	f000 fef8 	bl	800fe6c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f07c:	4b20      	ldr	r3, [pc, #128]	; (800f100 <dhcp_rebind+0x12c>)
 800f07e:	6818      	ldr	r0, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	9300      	str	r3, [sp, #0]
 800f084:	2343      	movs	r3, #67	; 0x43
 800f086:	4a1f      	ldr	r2, [pc, #124]	; (800f104 <dhcp_rebind+0x130>)
 800f088:	6979      	ldr	r1, [r7, #20]
 800f08a:	f7fe fdf3 	bl	800dc74 <udp_sendto_if>
 800f08e:	4603      	mov	r3, r0
 800f090:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f092:	6978      	ldr	r0, [r7, #20]
 800f094:	f7f7 ffea 	bl	800706c <pbuf_free>
 800f098:	e001      	b.n	800f09e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f09a:	23ff      	movs	r3, #255	; 0xff
 800f09c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	799b      	ldrb	r3, [r3, #6]
 800f0a2:	2bff      	cmp	r3, #255	; 0xff
 800f0a4:	d005      	beq.n	800f0b2 <dhcp_rebind+0xde>
    dhcp->tries++;
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	799b      	ldrb	r3, [r3, #6]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	799b      	ldrb	r3, [r3, #6]
 800f0b6:	2b09      	cmp	r3, #9
 800f0b8:	d80a      	bhi.n	800f0d0 <dhcp_rebind+0xfc>
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	799b      	ldrb	r3, [r3, #6]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	0152      	lsls	r2, r2, #5
 800f0c4:	1ad2      	subs	r2, r2, r3
 800f0c6:	0092      	lsls	r2, r2, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	e001      	b.n	800f0d4 <dhcp_rebind+0x100>
 800f0d0:	f242 7310 	movw	r3, #10000	; 0x2710
 800f0d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f0d6:	89fb      	ldrh	r3, [r7, #14]
 800f0d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0dc:	4a0a      	ldr	r2, [pc, #40]	; (800f108 <dhcp_rebind+0x134>)
 800f0de:	fb82 1203 	smull	r1, r2, r2, r3
 800f0e2:	1152      	asrs	r2, r2, #5
 800f0e4:	17db      	asrs	r3, r3, #31
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20000014 	.word	0x20000014
 800f100:	2000055c 	.word	0x2000055c
 800f104:	08016910 	.word	0x08016910
 800f108:	10624dd3 	.word	0x10624dd3

0800f10c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f10c:	b5b0      	push	{r4, r5, r7, lr}
 800f10e:	b08a      	sub	sp, #40	; 0x28
 800f110:	af02      	add	r7, sp, #8
 800f112:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a1b      	ldr	r3, [r3, #32]
 800f118:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f11a:	2103      	movs	r1, #3
 800f11c:	69b8      	ldr	r0, [r7, #24]
 800f11e:	f000 f945 	bl	800f3ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f122:	f107 030c 	add.w	r3, r7, #12
 800f126:	2203      	movs	r2, #3
 800f128:	69b9      	ldr	r1, [r7, #24]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fdc8 	bl	800fcc0 <dhcp_create_msg>
 800f130:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d066      	beq.n	800f206 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f13e:	89b8      	ldrh	r0, [r7, #12]
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f146:	2302      	movs	r3, #2
 800f148:	2239      	movs	r2, #57	; 0x39
 800f14a:	f000 f949 	bl	800f3e0 <dhcp_option>
 800f14e:	4603      	mov	r3, r0
 800f150:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f152:	89b8      	ldrh	r0, [r7, #12]
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	33f0      	adds	r3, #240	; 0xf0
 800f158:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f15c:	4619      	mov	r1, r3
 800f15e:	f000 f999 	bl	800f494 <dhcp_option_short>
 800f162:	4603      	mov	r3, r0
 800f164:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f166:	89b8      	ldrh	r0, [r7, #12]
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f16e:	2304      	movs	r3, #4
 800f170:	2232      	movs	r2, #50	; 0x32
 800f172:	f000 f935 	bl	800f3e0 <dhcp_option>
 800f176:	4603      	mov	r3, r0
 800f178:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f17a:	89bc      	ldrh	r4, [r7, #12]
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	69db      	ldr	r3, [r3, #28]
 800f186:	4618      	mov	r0, r3
 800f188:	f7f6 fcad 	bl	8005ae6 <lwip_htonl>
 800f18c:	4603      	mov	r3, r0
 800f18e:	461a      	mov	r2, r3
 800f190:	4629      	mov	r1, r5
 800f192:	4620      	mov	r0, r4
 800f194:	f000 f9b0 	bl	800f4f8 <dhcp_option_long>
 800f198:	4603      	mov	r3, r0
 800f19a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f19c:	89b8      	ldrh	r0, [r7, #12]
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	2237      	movs	r2, #55	; 0x37
 800f1a8:	f000 f91a 	bl	800f3e0 <dhcp_option>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	77bb      	strb	r3, [r7, #30]
 800f1b4:	e00e      	b.n	800f1d4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f1b6:	89b8      	ldrh	r0, [r7, #12]
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1be:	7fbb      	ldrb	r3, [r7, #30]
 800f1c0:	4a29      	ldr	r2, [pc, #164]	; (800f268 <dhcp_reboot+0x15c>)
 800f1c2:	5cd3      	ldrb	r3, [r2, r3]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	f000 f93f 	bl	800f448 <dhcp_option_byte>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f1ce:	7fbb      	ldrb	r3, [r7, #30]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	77bb      	strb	r3, [r7, #30]
 800f1d4:	7fbb      	ldrb	r3, [r7, #30]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d9ed      	bls.n	800f1b6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f1da:	89b8      	ldrh	r0, [r7, #12]
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	33f0      	adds	r3, #240	; 0xf0
 800f1e0:	697a      	ldr	r2, [r7, #20]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f000 fe42 	bl	800fe6c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f1e8:	4b20      	ldr	r3, [pc, #128]	; (800f26c <dhcp_reboot+0x160>)
 800f1ea:	6818      	ldr	r0, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	2343      	movs	r3, #67	; 0x43
 800f1f2:	4a1f      	ldr	r2, [pc, #124]	; (800f270 <dhcp_reboot+0x164>)
 800f1f4:	6979      	ldr	r1, [r7, #20]
 800f1f6:	f7fe fd3d 	bl	800dc74 <udp_sendto_if>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f1fe:	6978      	ldr	r0, [r7, #20]
 800f200:	f7f7 ff34 	bl	800706c <pbuf_free>
 800f204:	e001      	b.n	800f20a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f206:	23ff      	movs	r3, #255	; 0xff
 800f208:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	799b      	ldrb	r3, [r3, #6]
 800f20e:	2bff      	cmp	r3, #255	; 0xff
 800f210:	d005      	beq.n	800f21e <dhcp_reboot+0x112>
    dhcp->tries++;
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	799b      	ldrb	r3, [r3, #6]
 800f216:	3301      	adds	r3, #1
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	799b      	ldrb	r3, [r3, #6]
 800f222:	2b09      	cmp	r3, #9
 800f224:	d80a      	bhi.n	800f23c <dhcp_reboot+0x130>
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	799b      	ldrb	r3, [r3, #6]
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	461a      	mov	r2, r3
 800f22e:	0152      	lsls	r2, r2, #5
 800f230:	1ad2      	subs	r2, r2, r3
 800f232:	0092      	lsls	r2, r2, #2
 800f234:	4413      	add	r3, r2
 800f236:	00db      	lsls	r3, r3, #3
 800f238:	b29b      	uxth	r3, r3
 800f23a:	e001      	b.n	800f240 <dhcp_reboot+0x134>
 800f23c:	f242 7310 	movw	r3, #10000	; 0x2710
 800f240:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f242:	89fb      	ldrh	r3, [r7, #14]
 800f244:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f248:	4a0a      	ldr	r2, [pc, #40]	; (800f274 <dhcp_reboot+0x168>)
 800f24a:	fb82 1203 	smull	r1, r2, r2, r3
 800f24e:	1152      	asrs	r2, r2, #5
 800f250:	17db      	asrs	r3, r3, #31
 800f252:	1ad3      	subs	r3, r2, r3
 800f254:	b29a      	uxth	r2, r3
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f25a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3720      	adds	r7, #32
 800f262:	46bd      	mov	sp, r7
 800f264:	bdb0      	pop	{r4, r5, r7, pc}
 800f266:	bf00      	nop
 800f268:	20000014 	.word	0x20000014
 800f26c:	2000055c 	.word	0x2000055c
 800f270:	08016910 	.word	0x08016910
 800f274:	10624dd3 	.word	0x10624dd3

0800f278 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f278:	b5b0      	push	{r4, r5, r7, lr}
 800f27a:	b08a      	sub	sp, #40	; 0x28
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f000 8084 	beq.w	800f396 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	795b      	ldrb	r3, [r3, #5]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 8081 	beq.w	800f39a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	631a      	str	r2, [r3, #48]	; 0x30
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	829a      	strh	r2, [r3, #20]
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	8a9a      	ldrh	r2, [r3, #20]
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	825a      	strh	r2, [r3, #18]
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	8a5a      	ldrh	r2, [r3, #18]
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	821a      	strh	r2, [r3, #16]
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	8a1a      	ldrh	r2, [r3, #16]
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fdec 	bl	800fec8 <dhcp_supplied_address>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d03b      	beq.n	800f36e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f2f6:	f107 030e 	add.w	r3, r7, #14
 800f2fa:	2207      	movs	r2, #7
 800f2fc:	69f9      	ldr	r1, [r7, #28]
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fcde 	bl	800fcc0 <dhcp_create_msg>
 800f304:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d030      	beq.n	800f36e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f312:	89f8      	ldrh	r0, [r7, #14]
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f31a:	2304      	movs	r3, #4
 800f31c:	2236      	movs	r2, #54	; 0x36
 800f31e:	f000 f85f 	bl	800f3e0 <dhcp_option>
 800f322:	4603      	mov	r3, r0
 800f324:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f326:	89fc      	ldrh	r4, [r7, #14]
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	4618      	mov	r0, r3
 800f332:	f7f6 fbd8 	bl	8005ae6 <lwip_htonl>
 800f336:	4603      	mov	r3, r0
 800f338:	461a      	mov	r2, r3
 800f33a:	4629      	mov	r1, r5
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 f8db 	bl	800f4f8 <dhcp_option_long>
 800f342:	4603      	mov	r3, r0
 800f344:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f346:	89f8      	ldrh	r0, [r7, #14]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	33f0      	adds	r3, #240	; 0xf0
 800f34c:	69ba      	ldr	r2, [r7, #24]
 800f34e:	4619      	mov	r1, r3
 800f350:	f000 fd8c 	bl	800fe6c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f354:	4b13      	ldr	r3, [pc, #76]	; (800f3a4 <dhcp_release_and_stop+0x12c>)
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	f107 0210 	add.w	r2, r7, #16
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	2343      	movs	r3, #67	; 0x43
 800f362:	69b9      	ldr	r1, [r7, #24]
 800f364:	f7fe fc86 	bl	800dc74 <udp_sendto_if>
      pbuf_free(p_out);
 800f368:	69b8      	ldr	r0, [r7, #24]
 800f36a:	f7f7 fe7f 	bl	800706c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f36e:	4b0e      	ldr	r3, [pc, #56]	; (800f3a8 <dhcp_release_and_stop+0x130>)
 800f370:	4a0d      	ldr	r2, [pc, #52]	; (800f3a8 <dhcp_release_and_stop+0x130>)
 800f372:	490d      	ldr	r1, [pc, #52]	; (800f3a8 <dhcp_release_and_stop+0x130>)
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7f7 fa17 	bl	80067a8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f37a:	2100      	movs	r1, #0
 800f37c:	69f8      	ldr	r0, [r7, #28]
 800f37e:	f000 f815 	bl	800f3ac <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	791b      	ldrb	r3, [r3, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d008      	beq.n	800f39c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f38a:	f7fe ffbf 	bl	800e30c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	2200      	movs	r2, #0
 800f392:	711a      	strb	r2, [r3, #4]
 800f394:	e002      	b.n	800f39c <dhcp_release_and_stop+0x124>
    return;
 800f396:	bf00      	nop
 800f398:	e000      	b.n	800f39c <dhcp_release_and_stop+0x124>
    return;
 800f39a:	bf00      	nop
  }
}
 800f39c:	3720      	adds	r7, #32
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	2000055c 	.word	0x2000055c
 800f3a8:	0801690c 	.word	0x0801690c

0800f3ac <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	795b      	ldrb	r3, [r3, #5]
 800f3bc:	78fa      	ldrb	r2, [r7, #3]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d008      	beq.n	800f3d4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	78fa      	ldrb	r2, [r7, #3]
 800f3c6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	811a      	strh	r2, [r3, #8]
  }
}
 800f3d4:	bf00      	nop
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6039      	str	r1, [r7, #0]
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	80fb      	strh	r3, [r7, #6]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	717b      	strb	r3, [r7, #5]
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f3f8:	88fa      	ldrh	r2, [r7, #6]
 800f3fa:	793b      	ldrb	r3, [r7, #4]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	3302      	adds	r3, #2
 800f400:	2b44      	cmp	r3, #68	; 0x44
 800f402:	d906      	bls.n	800f412 <dhcp_option+0x32>
 800f404:	4b0d      	ldr	r3, [pc, #52]	; (800f43c <dhcp_option+0x5c>)
 800f406:	f240 529a 	movw	r2, #1434	; 0x59a
 800f40a:	490d      	ldr	r1, [pc, #52]	; (800f440 <dhcp_option+0x60>)
 800f40c:	480d      	ldr	r0, [pc, #52]	; (800f444 <dhcp_option+0x64>)
 800f40e:	f003 f8a3 	bl	8012558 <iprintf>
  options[options_out_len++] = option_type;
 800f412:	88fb      	ldrh	r3, [r7, #6]
 800f414:	1c5a      	adds	r2, r3, #1
 800f416:	80fa      	strh	r2, [r7, #6]
 800f418:	461a      	mov	r2, r3
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	4413      	add	r3, r2
 800f41e:	797a      	ldrb	r2, [r7, #5]
 800f420:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	80fa      	strh	r2, [r7, #6]
 800f428:	461a      	mov	r2, r3
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	4413      	add	r3, r2
 800f42e:	793a      	ldrb	r2, [r7, #4]
 800f430:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f432:	88fb      	ldrh	r3, [r7, #6]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	08015984 	.word	0x08015984
 800f440:	08015b18 	.word	0x08015b18
 800f444:	080159e4 	.word	0x080159e4

0800f448 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	4603      	mov	r3, r0
 800f450:	6039      	str	r1, [r7, #0]
 800f452:	80fb      	strh	r3, [r7, #6]
 800f454:	4613      	mov	r3, r2
 800f456:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f458:	88fb      	ldrh	r3, [r7, #6]
 800f45a:	2b43      	cmp	r3, #67	; 0x43
 800f45c:	d906      	bls.n	800f46c <dhcp_option_byte+0x24>
 800f45e:	4b0a      	ldr	r3, [pc, #40]	; (800f488 <dhcp_option_byte+0x40>)
 800f460:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f464:	4909      	ldr	r1, [pc, #36]	; (800f48c <dhcp_option_byte+0x44>)
 800f466:	480a      	ldr	r0, [pc, #40]	; (800f490 <dhcp_option_byte+0x48>)
 800f468:	f003 f876 	bl	8012558 <iprintf>
  options[options_out_len++] = value;
 800f46c:	88fb      	ldrh	r3, [r7, #6]
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	80fa      	strh	r2, [r7, #6]
 800f472:	461a      	mov	r2, r3
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	4413      	add	r3, r2
 800f478:	797a      	ldrb	r2, [r7, #5]
 800f47a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f47c:	88fb      	ldrh	r3, [r7, #6]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3708      	adds	r7, #8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	08015984 	.word	0x08015984
 800f48c:	08015b5c 	.word	0x08015b5c
 800f490:	080159e4 	.word	0x080159e4

0800f494 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	6039      	str	r1, [r7, #0]
 800f49e:	80fb      	strh	r3, [r7, #6]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	3302      	adds	r3, #2
 800f4a8:	2b44      	cmp	r3, #68	; 0x44
 800f4aa:	d906      	bls.n	800f4ba <dhcp_option_short+0x26>
 800f4ac:	4b0f      	ldr	r3, [pc, #60]	; (800f4ec <dhcp_option_short+0x58>)
 800f4ae:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f4b2:	490f      	ldr	r1, [pc, #60]	; (800f4f0 <dhcp_option_short+0x5c>)
 800f4b4:	480f      	ldr	r0, [pc, #60]	; (800f4f4 <dhcp_option_short+0x60>)
 800f4b6:	f003 f84f 	bl	8012558 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f4ba:	88bb      	ldrh	r3, [r7, #4]
 800f4bc:	0a1b      	lsrs	r3, r3, #8
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	88fb      	ldrh	r3, [r7, #6]
 800f4c2:	1c59      	adds	r1, r3, #1
 800f4c4:	80f9      	strh	r1, [r7, #6]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	440b      	add	r3, r1
 800f4cc:	b2d2      	uxtb	r2, r2
 800f4ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f4d0:	88fb      	ldrh	r3, [r7, #6]
 800f4d2:	1c5a      	adds	r2, r3, #1
 800f4d4:	80fa      	strh	r2, [r7, #6]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	4413      	add	r3, r2
 800f4dc:	88ba      	ldrh	r2, [r7, #4]
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f4e2:	88fb      	ldrh	r3, [r7, #6]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	08015984 	.word	0x08015984
 800f4f0:	08015b94 	.word	0x08015b94
 800f4f4:	080159e4 	.word	0x080159e4

0800f4f8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	4603      	mov	r3, r0
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
 800f504:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f506:	89fb      	ldrh	r3, [r7, #14]
 800f508:	3304      	adds	r3, #4
 800f50a:	2b44      	cmp	r3, #68	; 0x44
 800f50c:	d906      	bls.n	800f51c <dhcp_option_long+0x24>
 800f50e:	4b19      	ldr	r3, [pc, #100]	; (800f574 <dhcp_option_long+0x7c>)
 800f510:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f514:	4918      	ldr	r1, [pc, #96]	; (800f578 <dhcp_option_long+0x80>)
 800f516:	4819      	ldr	r0, [pc, #100]	; (800f57c <dhcp_option_long+0x84>)
 800f518:	f003 f81e 	bl	8012558 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	0e1a      	lsrs	r2, r3, #24
 800f520:	89fb      	ldrh	r3, [r7, #14]
 800f522:	1c59      	adds	r1, r3, #1
 800f524:	81f9      	strh	r1, [r7, #14]
 800f526:	4619      	mov	r1, r3
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	440b      	add	r3, r1
 800f52c:	b2d2      	uxtb	r2, r2
 800f52e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	0c1a      	lsrs	r2, r3, #16
 800f534:	89fb      	ldrh	r3, [r7, #14]
 800f536:	1c59      	adds	r1, r3, #1
 800f538:	81f9      	strh	r1, [r7, #14]
 800f53a:	4619      	mov	r1, r3
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	440b      	add	r3, r1
 800f540:	b2d2      	uxtb	r2, r2
 800f542:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	0a1a      	lsrs	r2, r3, #8
 800f548:	89fb      	ldrh	r3, [r7, #14]
 800f54a:	1c59      	adds	r1, r3, #1
 800f54c:	81f9      	strh	r1, [r7, #14]
 800f54e:	4619      	mov	r1, r3
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	440b      	add	r3, r1
 800f554:	b2d2      	uxtb	r2, r2
 800f556:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f558:	89fb      	ldrh	r3, [r7, #14]
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	81fa      	strh	r2, [r7, #14]
 800f55e:	461a      	mov	r2, r3
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	4413      	add	r3, r2
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	b2d2      	uxtb	r2, r2
 800f568:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f56a:	89fb      	ldrh	r3, [r7, #14]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	08015984 	.word	0x08015984
 800f578:	08015bd0 	.word	0x08015bd0
 800f57c:	080159e4 	.word	0x080159e4

0800f580 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b090      	sub	sp, #64	; 0x40
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f58e:	2300      	movs	r3, #0
 800f590:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f592:	2208      	movs	r2, #8
 800f594:	2100      	movs	r1, #0
 800f596:	48be      	ldr	r0, [pc, #760]	; (800f890 <dhcp_parse_reply+0x310>)
 800f598:	f002 ffd6 	bl	8012548 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	895b      	ldrh	r3, [r3, #10]
 800f5a0:	2b2b      	cmp	r3, #43	; 0x2b
 800f5a2:	d802      	bhi.n	800f5aa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f5a4:	f06f 0301 	mvn.w	r3, #1
 800f5a8:	e2a8      	b.n	800fafc <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f5b0:	23f0      	movs	r3, #240	; 0xf0
 800f5b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	891b      	ldrh	r3, [r3, #8]
 800f5b8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f5be:	e00c      	b.n	800f5da <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c2:	895b      	ldrh	r3, [r3, #10]
 800f5c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	895b      	ldrh	r3, [r3, #10]
 800f5ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d004      	beq.n	800f5ea <dhcp_parse_reply+0x6a>
 800f5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e2:	895b      	ldrh	r3, [r3, #10]
 800f5e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d2ea      	bcs.n	800f5c0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d102      	bne.n	800f5f6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f5f0:	f06f 0301 	mvn.w	r3, #1
 800f5f4:	e282      	b.n	800fafc <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800f5f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f5fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f5fc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f604:	e23a      	b.n	800fa7c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800f606:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f60a:	4413      	add	r3, r2
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f616:	f04f 33ff 	mov.w	r3, #4294967295
 800f61a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f61c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f61e:	3302      	adds	r3, #2
 800f620:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f622:	8bfa      	ldrh	r2, [r7, #30]
 800f624:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f626:	429a      	cmp	r2, r3
 800f628:	d202      	bcs.n	800f630 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f62a:	f06f 0301 	mvn.w	r3, #1
 800f62e:	e265      	b.n	800fafc <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f632:	3301      	adds	r3, #1
 800f634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f636:	8952      	ldrh	r2, [r2, #10]
 800f638:	4293      	cmp	r3, r2
 800f63a:	da07      	bge.n	800f64c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f63c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f63e:	3301      	adds	r3, #1
 800f640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f642:	4413      	add	r3, r2
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f64a:	e00b      	b.n	800f664 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d004      	beq.n	800f65e <dhcp_parse_reply+0xde>
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	e000      	b.n	800f660 <dhcp_parse_reply+0xe0>
 800f65e:	2300      	movs	r3, #0
 800f660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	2b3b      	cmp	r3, #59	; 0x3b
 800f670:	f200 812d 	bhi.w	800f8ce <dhcp_parse_reply+0x34e>
 800f674:	a201      	add	r2, pc, #4	; (adr r2, 800f67c <dhcp_parse_reply+0xfc>)
 800f676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f67a:	bf00      	nop
 800f67c:	0800f76d 	.word	0x0800f76d
 800f680:	0800f77d 	.word	0x0800f77d
 800f684:	0800f8cf 	.word	0x0800f8cf
 800f688:	0800f79f 	.word	0x0800f79f
 800f68c:	0800f8cf 	.word	0x0800f8cf
 800f690:	0800f8cf 	.word	0x0800f8cf
 800f694:	0800f8cf 	.word	0x0800f8cf
 800f698:	0800f8cf 	.word	0x0800f8cf
 800f69c:	0800f8cf 	.word	0x0800f8cf
 800f6a0:	0800f8cf 	.word	0x0800f8cf
 800f6a4:	0800f8cf 	.word	0x0800f8cf
 800f6a8:	0800f8cf 	.word	0x0800f8cf
 800f6ac:	0800f8cf 	.word	0x0800f8cf
 800f6b0:	0800f8cf 	.word	0x0800f8cf
 800f6b4:	0800f8cf 	.word	0x0800f8cf
 800f6b8:	0800f8cf 	.word	0x0800f8cf
 800f6bc:	0800f8cf 	.word	0x0800f8cf
 800f6c0:	0800f8cf 	.word	0x0800f8cf
 800f6c4:	0800f8cf 	.word	0x0800f8cf
 800f6c8:	0800f8cf 	.word	0x0800f8cf
 800f6cc:	0800f8cf 	.word	0x0800f8cf
 800f6d0:	0800f8cf 	.word	0x0800f8cf
 800f6d4:	0800f8cf 	.word	0x0800f8cf
 800f6d8:	0800f8cf 	.word	0x0800f8cf
 800f6dc:	0800f8cf 	.word	0x0800f8cf
 800f6e0:	0800f8cf 	.word	0x0800f8cf
 800f6e4:	0800f8cf 	.word	0x0800f8cf
 800f6e8:	0800f8cf 	.word	0x0800f8cf
 800f6ec:	0800f8cf 	.word	0x0800f8cf
 800f6f0:	0800f8cf 	.word	0x0800f8cf
 800f6f4:	0800f8cf 	.word	0x0800f8cf
 800f6f8:	0800f8cf 	.word	0x0800f8cf
 800f6fc:	0800f8cf 	.word	0x0800f8cf
 800f700:	0800f8cf 	.word	0x0800f8cf
 800f704:	0800f8cf 	.word	0x0800f8cf
 800f708:	0800f8cf 	.word	0x0800f8cf
 800f70c:	0800f8cf 	.word	0x0800f8cf
 800f710:	0800f8cf 	.word	0x0800f8cf
 800f714:	0800f8cf 	.word	0x0800f8cf
 800f718:	0800f8cf 	.word	0x0800f8cf
 800f71c:	0800f8cf 	.word	0x0800f8cf
 800f720:	0800f8cf 	.word	0x0800f8cf
 800f724:	0800f8cf 	.word	0x0800f8cf
 800f728:	0800f8cf 	.word	0x0800f8cf
 800f72c:	0800f8cf 	.word	0x0800f8cf
 800f730:	0800f8cf 	.word	0x0800f8cf
 800f734:	0800f8cf 	.word	0x0800f8cf
 800f738:	0800f8cf 	.word	0x0800f8cf
 800f73c:	0800f8cf 	.word	0x0800f8cf
 800f740:	0800f8cf 	.word	0x0800f8cf
 800f744:	0800f8cf 	.word	0x0800f8cf
 800f748:	0800f7cb 	.word	0x0800f7cb
 800f74c:	0800f7ed 	.word	0x0800f7ed
 800f750:	0800f829 	.word	0x0800f829
 800f754:	0800f84b 	.word	0x0800f84b
 800f758:	0800f8cf 	.word	0x0800f8cf
 800f75c:	0800f8cf 	.word	0x0800f8cf
 800f760:	0800f8cf 	.word	0x0800f8cf
 800f764:	0800f86d 	.word	0x0800f86d
 800f768:	0800f8ad 	.word	0x0800f8ad
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f76c:	2300      	movs	r3, #0
 800f76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f77a:	e0ac      	b.n	800f8d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f780:	2b04      	cmp	r3, #4
 800f782:	d009      	beq.n	800f798 <dhcp_parse_reply+0x218>
 800f784:	4b43      	ldr	r3, [pc, #268]	; (800f894 <dhcp_parse_reply+0x314>)
 800f786:	f240 622e 	movw	r2, #1582	; 0x62e
 800f78a:	4943      	ldr	r1, [pc, #268]	; (800f898 <dhcp_parse_reply+0x318>)
 800f78c:	4843      	ldr	r0, [pc, #268]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f78e:	f002 fee3 	bl	8012558 <iprintf>
 800f792:	f06f 0305 	mvn.w	r3, #5
 800f796:	e1b1      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f798:	2306      	movs	r3, #6
 800f79a:	623b      	str	r3, [r7, #32]
        break;
 800f79c:	e09b      	b.n	800f8d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f79e:	2304      	movs	r3, #4
 800f7a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f7a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f7a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d209      	bcs.n	800f7c4 <dhcp_parse_reply+0x244>
 800f7b0:	4b38      	ldr	r3, [pc, #224]	; (800f894 <dhcp_parse_reply+0x314>)
 800f7b2:	f240 6233 	movw	r2, #1587	; 0x633
 800f7b6:	493a      	ldr	r1, [pc, #232]	; (800f8a0 <dhcp_parse_reply+0x320>)
 800f7b8:	4838      	ldr	r0, [pc, #224]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f7ba:	f002 fecd 	bl	8012558 <iprintf>
 800f7be:	f06f 0305 	mvn.w	r3, #5
 800f7c2:	e19b      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f7c4:	2307      	movs	r3, #7
 800f7c6:	623b      	str	r3, [r7, #32]
        break;
 800f7c8:	e085      	b.n	800f8d6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ce:	2b04      	cmp	r3, #4
 800f7d0:	d009      	beq.n	800f7e6 <dhcp_parse_reply+0x266>
 800f7d2:	4b30      	ldr	r3, [pc, #192]	; (800f894 <dhcp_parse_reply+0x314>)
 800f7d4:	f240 6241 	movw	r2, #1601	; 0x641
 800f7d8:	492f      	ldr	r1, [pc, #188]	; (800f898 <dhcp_parse_reply+0x318>)
 800f7da:	4830      	ldr	r0, [pc, #192]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f7dc:	f002 febc 	bl	8012558 <iprintf>
 800f7e0:	f06f 0305 	mvn.w	r3, #5
 800f7e4:	e18a      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	623b      	str	r3, [r7, #32]
        break;
 800f7ea:	e074      	b.n	800f8d6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d009      	beq.n	800f808 <dhcp_parse_reply+0x288>
 800f7f4:	4b27      	ldr	r3, [pc, #156]	; (800f894 <dhcp_parse_reply+0x314>)
 800f7f6:	f240 624f 	movw	r2, #1615	; 0x64f
 800f7fa:	492a      	ldr	r1, [pc, #168]	; (800f8a4 <dhcp_parse_reply+0x324>)
 800f7fc:	4827      	ldr	r0, [pc, #156]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f7fe:	f002 feab 	bl	8012558 <iprintf>
 800f802:	f06f 0305 	mvn.w	r3, #5
 800f806:	e179      	b.n	800fafc <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f80a:	2bf0      	cmp	r3, #240	; 0xf0
 800f80c:	d009      	beq.n	800f822 <dhcp_parse_reply+0x2a2>
 800f80e:	4b21      	ldr	r3, [pc, #132]	; (800f894 <dhcp_parse_reply+0x314>)
 800f810:	f240 6251 	movw	r2, #1617	; 0x651
 800f814:	4924      	ldr	r1, [pc, #144]	; (800f8a8 <dhcp_parse_reply+0x328>)
 800f816:	4821      	ldr	r0, [pc, #132]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f818:	f002 fe9e 	bl	8012558 <iprintf>
 800f81c:	f06f 0305 	mvn.w	r3, #5
 800f820:	e16c      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f822:	2300      	movs	r3, #0
 800f824:	623b      	str	r3, [r7, #32]
        break;
 800f826:	e056      	b.n	800f8d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d009      	beq.n	800f844 <dhcp_parse_reply+0x2c4>
 800f830:	4b18      	ldr	r3, [pc, #96]	; (800f894 <dhcp_parse_reply+0x314>)
 800f832:	f240 6255 	movw	r2, #1621	; 0x655
 800f836:	491b      	ldr	r1, [pc, #108]	; (800f8a4 <dhcp_parse_reply+0x324>)
 800f838:	4818      	ldr	r0, [pc, #96]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f83a:	f002 fe8d 	bl	8012558 <iprintf>
 800f83e:	f06f 0305 	mvn.w	r3, #5
 800f842:	e15b      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f844:	2301      	movs	r3, #1
 800f846:	623b      	str	r3, [r7, #32]
        break;
 800f848:	e045      	b.n	800f8d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d009      	beq.n	800f866 <dhcp_parse_reply+0x2e6>
 800f852:	4b10      	ldr	r3, [pc, #64]	; (800f894 <dhcp_parse_reply+0x314>)
 800f854:	f240 6259 	movw	r2, #1625	; 0x659
 800f858:	490f      	ldr	r1, [pc, #60]	; (800f898 <dhcp_parse_reply+0x318>)
 800f85a:	4810      	ldr	r0, [pc, #64]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f85c:	f002 fe7c 	bl	8012558 <iprintf>
 800f860:	f06f 0305 	mvn.w	r3, #5
 800f864:	e14a      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f866:	2302      	movs	r3, #2
 800f868:	623b      	str	r3, [r7, #32]
        break;
 800f86a:	e034      	b.n	800f8d6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f870:	2b04      	cmp	r3, #4
 800f872:	d009      	beq.n	800f888 <dhcp_parse_reply+0x308>
 800f874:	4b07      	ldr	r3, [pc, #28]	; (800f894 <dhcp_parse_reply+0x314>)
 800f876:	f240 625d 	movw	r2, #1629	; 0x65d
 800f87a:	4907      	ldr	r1, [pc, #28]	; (800f898 <dhcp_parse_reply+0x318>)
 800f87c:	4807      	ldr	r0, [pc, #28]	; (800f89c <dhcp_parse_reply+0x31c>)
 800f87e:	f002 fe6b 	bl	8012558 <iprintf>
 800f882:	f06f 0305 	mvn.w	r3, #5
 800f886:	e139      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f888:	2304      	movs	r3, #4
 800f88a:	623b      	str	r3, [r7, #32]
        break;
 800f88c:	e023      	b.n	800f8d6 <dhcp_parse_reply+0x356>
 800f88e:	bf00      	nop
 800f890:	200071a4 	.word	0x200071a4
 800f894:	08015984 	.word	0x08015984
 800f898:	08015c0c 	.word	0x08015c0c
 800f89c:	080159e4 	.word	0x080159e4
 800f8a0:	08015c18 	.word	0x08015c18
 800f8a4:	08015c2c 	.word	0x08015c2c
 800f8a8:	08015c38 	.word	0x08015c38
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8b0:	2b04      	cmp	r3, #4
 800f8b2:	d009      	beq.n	800f8c8 <dhcp_parse_reply+0x348>
 800f8b4:	4b93      	ldr	r3, [pc, #588]	; (800fb04 <dhcp_parse_reply+0x584>)
 800f8b6:	f240 6261 	movw	r2, #1633	; 0x661
 800f8ba:	4993      	ldr	r1, [pc, #588]	; (800fb08 <dhcp_parse_reply+0x588>)
 800f8bc:	4893      	ldr	r0, [pc, #588]	; (800fb0c <dhcp_parse_reply+0x58c>)
 800f8be:	f002 fe4b 	bl	8012558 <iprintf>
 800f8c2:	f06f 0305 	mvn.w	r3, #5
 800f8c6:	e119      	b.n	800fafc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f8c8:	2305      	movs	r3, #5
 800f8ca:	623b      	str	r3, [r7, #32]
        break;
 800f8cc:	e003      	b.n	800f8d6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800f8d4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800f8d6:	7dfb      	ldrb	r3, [r7, #23]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d103      	bne.n	800f8e4 <dhcp_parse_reply+0x364>
      offset++;
 800f8dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8de:	3301      	adds	r3, #1
 800f8e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f8e2:	e0a1      	b.n	800fa28 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800f8e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ea:	4413      	add	r3, r2
 800f8ec:	3302      	adds	r3, #2
 800f8ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8f2:	db02      	blt.n	800f8fa <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800f8f4:	f06f 0301 	mvn.w	r3, #1
 800f8f8:	e100      	b.n	800fafc <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800f8fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f902:	4413      	add	r3, r2
 800f904:	b29b      	uxth	r3, r3
 800f906:	3302      	adds	r3, #2
 800f908:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800f90a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f000 808a 	beq.w	800fa28 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f918:	6a3b      	ldr	r3, [r7, #32]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	db02      	blt.n	800f924 <dhcp_parse_reply+0x3a4>
 800f91e:	6a3b      	ldr	r3, [r7, #32]
 800f920:	2b07      	cmp	r3, #7
 800f922:	dd06      	ble.n	800f932 <dhcp_parse_reply+0x3b2>
 800f924:	4b77      	ldr	r3, [pc, #476]	; (800fb04 <dhcp_parse_reply+0x584>)
 800f926:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f92a:	4979      	ldr	r1, [pc, #484]	; (800fb10 <dhcp_parse_reply+0x590>)
 800f92c:	4877      	ldr	r0, [pc, #476]	; (800fb0c <dhcp_parse_reply+0x58c>)
 800f92e:	f002 fe13 	bl	8012558 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f932:	4a78      	ldr	r2, [pc, #480]	; (800fb14 <dhcp_parse_reply+0x594>)
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	4413      	add	r3, r2
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d174      	bne.n	800fa28 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800f93e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f942:	2b04      	cmp	r3, #4
 800f944:	bf28      	it	cs
 800f946:	2304      	movcs	r3, #4
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f94c:	8bfb      	ldrh	r3, [r7, #30]
 800f94e:	8aba      	ldrh	r2, [r7, #20]
 800f950:	f107 0108 	add.w	r1, r7, #8
 800f954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f956:	f7f7 fd83 	bl	8007460 <pbuf_copy_partial>
 800f95a:	4603      	mov	r3, r0
 800f95c:	461a      	mov	r2, r3
 800f95e:	8abb      	ldrh	r3, [r7, #20]
 800f960:	4293      	cmp	r3, r2
 800f962:	d002      	beq.n	800f96a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800f964:	f06f 0301 	mvn.w	r3, #1
 800f968:	e0c8      	b.n	800fafc <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800f96a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d933      	bls.n	800f9da <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f972:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f976:	f003 0303 	and.w	r3, r3, #3
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d009      	beq.n	800f994 <dhcp_parse_reply+0x414>
 800f980:	4b60      	ldr	r3, [pc, #384]	; (800fb04 <dhcp_parse_reply+0x584>)
 800f982:	f240 6281 	movw	r2, #1665	; 0x681
 800f986:	4964      	ldr	r1, [pc, #400]	; (800fb18 <dhcp_parse_reply+0x598>)
 800f988:	4860      	ldr	r0, [pc, #384]	; (800fb0c <dhcp_parse_reply+0x58c>)
 800f98a:	f002 fde5 	bl	8012558 <iprintf>
 800f98e:	f06f 0305 	mvn.w	r3, #5
 800f992:	e0b3      	b.n	800fafc <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800f994:	4a5f      	ldr	r2, [pc, #380]	; (800fb14 <dhcp_parse_reply+0x594>)
 800f996:	6a3b      	ldr	r3, [r7, #32]
 800f998:	4413      	add	r3, r2
 800f99a:	2201      	movs	r2, #1
 800f99c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7f6 f8a0 	bl	8005ae6 <lwip_htonl>
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	4a5c      	ldr	r2, [pc, #368]	; (800fb1c <dhcp_parse_reply+0x59c>)
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800f9b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9b4:	3b04      	subs	r3, #4
 800f9b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800f9ba:	8bfb      	ldrh	r3, [r7, #30]
 800f9bc:	3304      	adds	r3, #4
 800f9be:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800f9c0:	8a7a      	ldrh	r2, [r7, #18]
 800f9c2:	8bfb      	ldrh	r3, [r7, #30]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d202      	bcs.n	800f9ce <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800f9c8:	f06f 0301 	mvn.w	r3, #1
 800f9cc:	e096      	b.n	800fafc <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800f9ce:	8a7b      	ldrh	r3, [r7, #18]
 800f9d0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800f9d2:	6a3b      	ldr	r3, [r7, #32]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800f9d8:	e79e      	b.n	800f918 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800f9da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	d106      	bne.n	800f9f0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7f6 f87e 	bl	8005ae6 <lwip_htonl>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	60bb      	str	r3, [r7, #8]
 800f9ee:	e011      	b.n	800fa14 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d009      	beq.n	800fa0c <dhcp_parse_reply+0x48c>
 800f9f8:	4b42      	ldr	r3, [pc, #264]	; (800fb04 <dhcp_parse_reply+0x584>)
 800f9fa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800f9fe:	4948      	ldr	r1, [pc, #288]	; (800fb20 <dhcp_parse_reply+0x5a0>)
 800fa00:	4842      	ldr	r0, [pc, #264]	; (800fb0c <dhcp_parse_reply+0x58c>)
 800fa02:	f002 fda9 	bl	8012558 <iprintf>
 800fa06:	f06f 0305 	mvn.w	r3, #5
 800fa0a:	e077      	b.n	800fafc <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800fa0c:	f107 0308 	add.w	r3, r7, #8
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800fa14:	4a3f      	ldr	r2, [pc, #252]	; (800fb14 <dhcp_parse_reply+0x594>)
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	4413      	add	r3, r2
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	493e      	ldr	r1, [pc, #248]	; (800fb1c <dhcp_parse_reply+0x59c>)
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800fa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2a:	895b      	ldrh	r3, [r3, #10]
 800fa2c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d324      	bcc.n	800fa7c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800fa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa34:	895b      	ldrh	r3, [r3, #10]
 800fa36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa38:	1ad3      	subs	r3, r2, r3
 800fa3a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	895b      	ldrh	r3, [r3, #10]
 800fa40:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800fa46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d213      	bcs.n	800fa76 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800fa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d109      	bne.n	800fa6e <dhcp_parse_reply+0x4ee>
 800fa5a:	4b2a      	ldr	r3, [pc, #168]	; (800fb04 <dhcp_parse_reply+0x584>)
 800fa5c:	f240 629d 	movw	r2, #1693	; 0x69d
 800fa60:	4930      	ldr	r1, [pc, #192]	; (800fb24 <dhcp_parse_reply+0x5a4>)
 800fa62:	482a      	ldr	r0, [pc, #168]	; (800fb0c <dhcp_parse_reply+0x58c>)
 800fa64:	f002 fd78 	bl	8012558 <iprintf>
 800fa68:	f06f 0305 	mvn.w	r3, #5
 800fa6c:	e046      	b.n	800fafc <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa74:	e002      	b.n	800fa7c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800fa76:	f06f 0301 	mvn.w	r3, #1
 800fa7a:	e03f      	b.n	800fafc <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00a      	beq.n	800fa98 <dhcp_parse_reply+0x518>
 800fa82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d206      	bcs.n	800fa98 <dhcp_parse_reply+0x518>
 800fa8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa8e:	4413      	add	r3, r2
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	2bff      	cmp	r3, #255	; 0xff
 800fa94:	f47f adb7 	bne.w	800f606 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800fa98:	4b1e      	ldr	r3, [pc, #120]	; (800fb14 <dhcp_parse_reply+0x594>)
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d018      	beq.n	800fad2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800faa0:	4b1e      	ldr	r3, [pc, #120]	; (800fb1c <dhcp_parse_reply+0x59c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800faa6:	4b1b      	ldr	r3, [pc, #108]	; (800fb14 <dhcp_parse_reply+0x594>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d102      	bne.n	800fab8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800fab2:	2301      	movs	r3, #1
 800fab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fab6:	e00c      	b.n	800fad2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d102      	bne.n	800fac4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800fabe:	2301      	movs	r3, #1
 800fac0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fac2:	e006      	b.n	800fad2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b03      	cmp	r3, #3
 800fac8:	d103      	bne.n	800fad2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800faca:	2301      	movs	r3, #1
 800facc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800face:	2301      	movs	r3, #1
 800fad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800fad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d006      	beq.n	800fae6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800fadc:	236c      	movs	r3, #108	; 0x6c
 800fade:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800fae0:	23ec      	movs	r3, #236	; 0xec
 800fae2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800fae4:	e569      	b.n	800f5ba <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d006      	beq.n	800fafa <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800faec:	2300      	movs	r3, #0
 800faee:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800faf0:	232c      	movs	r3, #44	; 0x2c
 800faf2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800faf4:	236c      	movs	r3, #108	; 0x6c
 800faf6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800faf8:	e55f      	b.n	800f5ba <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3740      	adds	r7, #64	; 0x40
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	08015984 	.word	0x08015984
 800fb08:	08015c0c 	.word	0x08015c0c
 800fb0c:	080159e4 	.word	0x080159e4
 800fb10:	08015c50 	.word	0x08015c50
 800fb14:	200071a4 	.word	0x200071a4
 800fb18:	08015c64 	.word	0x08015c64
 800fb1c:	200071ac 	.word	0x200071ac
 800fb20:	08015c7c 	.word	0x08015c7c
 800fb24:	08015c90 	.word	0x08015c90

0800fb28 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800fb36:	4b5f      	ldr	r3, [pc, #380]	; (800fcb4 <dhcp_recv+0x18c>)
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	6a1b      	ldr	r3, [r3, #32]
 800fb40:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f000 809d 	beq.w	800fc8a <dhcp_recv+0x162>
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	791b      	ldrb	r3, [r3, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 8098 	beq.w	800fc8a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	895b      	ldrh	r3, [r3, #10]
 800fb5e:	2b2b      	cmp	r3, #43	; 0x2b
 800fb60:	f240 8095 	bls.w	800fc8e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	f040 8092 	bne.w	800fc92 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fb6e:	2300      	movs	r3, #0
 800fb70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb74:	e012      	b.n	800fb9c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fb76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb7a:	6a3a      	ldr	r2, [r7, #32]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb86:	69b9      	ldr	r1, [r7, #24]
 800fb88:	440b      	add	r3, r1
 800fb8a:	7f1b      	ldrb	r3, [r3, #28]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	f040 8082 	bne.w	800fc96 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb96:	3301      	adds	r3, #1
 800fb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb9c:	6a3b      	ldr	r3, [r7, #32]
 800fb9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fba2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d203      	bcs.n	800fbb2 <dhcp_recv+0x8a>
 800fbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbae:	2b05      	cmp	r3, #5
 800fbb0:	d9e1      	bls.n	800fb76 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7f5 ff95 	bl	8005ae6 <lwip_htonl>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d169      	bne.n	800fc9a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800fbc6:	69f9      	ldr	r1, [r7, #28]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7ff fcd9 	bl	800f580 <dhcp_parse_reply>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d164      	bne.n	800fc9e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800fbd4:	4b38      	ldr	r3, [pc, #224]	; (800fcb8 <dhcp_recv+0x190>)
 800fbd6:	785b      	ldrb	r3, [r3, #1]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d062      	beq.n	800fca2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800fbe2:	4b36      	ldr	r3, [pc, #216]	; (800fcbc <dhcp_recv+0x194>)
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800fbe8:	7cfb      	ldrb	r3, [r7, #19]
 800fbea:	2b05      	cmp	r3, #5
 800fbec:	d12a      	bne.n	800fc44 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	795b      	ldrb	r3, [r3, #5]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d112      	bne.n	800fc1c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800fbf6:	6979      	ldr	r1, [r7, #20]
 800fbf8:	6a38      	ldr	r0, [r7, #32]
 800fbfa:	f7fe fe53 	bl	800e8a4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800fbfe:	6a3b      	ldr	r3, [r7, #32]
 800fc00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc04:	f003 0308 	and.w	r3, r3, #8
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d003      	beq.n	800fc14 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800fc0c:	6a38      	ldr	r0, [r7, #32]
 800fc0e:	f7fe fbc1 	bl	800e394 <dhcp_check>
 800fc12:	e047      	b.n	800fca4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800fc14:	6a38      	ldr	r0, [r7, #32]
 800fc16:	f7ff f867 	bl	800ece8 <dhcp_bind>
 800fc1a:	e043      	b.n	800fca4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	795b      	ldrb	r3, [r3, #5]
 800fc20:	2b03      	cmp	r3, #3
 800fc22:	d007      	beq.n	800fc34 <dhcp_recv+0x10c>
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	795b      	ldrb	r3, [r3, #5]
 800fc28:	2b04      	cmp	r3, #4
 800fc2a:	d003      	beq.n	800fc34 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fc30:	2b05      	cmp	r3, #5
 800fc32:	d137      	bne.n	800fca4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800fc34:	6979      	ldr	r1, [r7, #20]
 800fc36:	6a38      	ldr	r0, [r7, #32]
 800fc38:	f7fe fe34 	bl	800e8a4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800fc3c:	6a38      	ldr	r0, [r7, #32]
 800fc3e:	f7ff f853 	bl	800ece8 <dhcp_bind>
 800fc42:	e02f      	b.n	800fca4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800fc44:	7cfb      	ldrb	r3, [r7, #19]
 800fc46:	2b06      	cmp	r3, #6
 800fc48:	d113      	bne.n	800fc72 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	d00b      	beq.n	800fc6a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fc52:	69fb      	ldr	r3, [r7, #28]
 800fc54:	795b      	ldrb	r3, [r3, #5]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d007      	beq.n	800fc6a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fc5e:	2b04      	cmp	r3, #4
 800fc60:	d003      	beq.n	800fc6a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	795b      	ldrb	r3, [r3, #5]
 800fc66:	2b05      	cmp	r3, #5
 800fc68:	d103      	bne.n	800fc72 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800fc6a:	6a38      	ldr	r0, [r7, #32]
 800fc6c:	f7fe fb78 	bl	800e360 <dhcp_handle_nak>
 800fc70:	e018      	b.n	800fca4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800fc72:	7cfb      	ldrb	r3, [r7, #19]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d108      	bne.n	800fc8a <dhcp_recv+0x162>
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	795b      	ldrb	r3, [r3, #5]
 800fc7c:	2b06      	cmp	r3, #6
 800fc7e:	d104      	bne.n	800fc8a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800fc80:	6979      	ldr	r1, [r7, #20]
 800fc82:	6a38      	ldr	r0, [r7, #32]
 800fc84:	f7fe fbba 	bl	800e3fc <dhcp_handle_offer>
 800fc88:	e00c      	b.n	800fca4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800fc8a:	bf00      	nop
 800fc8c:	e00a      	b.n	800fca4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fc8e:	bf00      	nop
 800fc90:	e008      	b.n	800fca4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fc92:	bf00      	nop
 800fc94:	e006      	b.n	800fca4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800fc96:	bf00      	nop
 800fc98:	e004      	b.n	800fca4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fc9a:	bf00      	nop
 800fc9c:	e002      	b.n	800fca4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fc9e:	bf00      	nop
 800fca0:	e000      	b.n	800fca4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fca2:	bf00      	nop
  pbuf_free(p);
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7f7 f9e1 	bl	800706c <pbuf_free>
}
 800fcaa:	bf00      	nop
 800fcac:	3728      	adds	r7, #40	; 0x28
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20003c24 	.word	0x20003c24
 800fcb8:	200071a4 	.word	0x200071a4
 800fcbc:	200071ac 	.word	0x200071ac

0800fcc0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b088      	sub	sp, #32
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	603b      	str	r3, [r7, #0]
 800fccc:	4613      	mov	r3, r2
 800fcce:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d108      	bne.n	800fce8 <dhcp_create_msg+0x28>
 800fcd6:	4b5f      	ldr	r3, [pc, #380]	; (800fe54 <dhcp_create_msg+0x194>)
 800fcd8:	f240 7269 	movw	r2, #1897	; 0x769
 800fcdc:	495e      	ldr	r1, [pc, #376]	; (800fe58 <dhcp_create_msg+0x198>)
 800fcde:	485f      	ldr	r0, [pc, #380]	; (800fe5c <dhcp_create_msg+0x19c>)
 800fce0:	f002 fc3a 	bl	8012558 <iprintf>
 800fce4:	2300      	movs	r3, #0
 800fce6:	e0b1      	b.n	800fe4c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d108      	bne.n	800fd00 <dhcp_create_msg+0x40>
 800fcee:	4b59      	ldr	r3, [pc, #356]	; (800fe54 <dhcp_create_msg+0x194>)
 800fcf0:	f240 726a 	movw	r2, #1898	; 0x76a
 800fcf4:	495a      	ldr	r1, [pc, #360]	; (800fe60 <dhcp_create_msg+0x1a0>)
 800fcf6:	4859      	ldr	r0, [pc, #356]	; (800fe5c <dhcp_create_msg+0x19c>)
 800fcf8:	f002 fc2e 	bl	8012558 <iprintf>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	e0a5      	b.n	800fe4c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fd00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd04:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fd08:	2036      	movs	r0, #54	; 0x36
 800fd0a:	f7f6 fecf 	bl	8006aac <pbuf_alloc>
 800fd0e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d101      	bne.n	800fd1a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e098      	b.n	800fe4c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	895b      	ldrh	r3, [r3, #10]
 800fd1e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fd22:	d206      	bcs.n	800fd32 <dhcp_create_msg+0x72>
 800fd24:	4b4b      	ldr	r3, [pc, #300]	; (800fe54 <dhcp_create_msg+0x194>)
 800fd26:	f240 7272 	movw	r2, #1906	; 0x772
 800fd2a:	494e      	ldr	r1, [pc, #312]	; (800fe64 <dhcp_create_msg+0x1a4>)
 800fd2c:	484b      	ldr	r0, [pc, #300]	; (800fe5c <dhcp_create_msg+0x19c>)
 800fd2e:	f002 fc13 	bl	8012558 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	d103      	bne.n	800fd40 <dhcp_create_msg+0x80>
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	795b      	ldrb	r3, [r3, #5]
 800fd3c:	2b03      	cmp	r3, #3
 800fd3e:	d10d      	bne.n	800fd5c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	799b      	ldrb	r3, [r3, #6]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d105      	bne.n	800fd54 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fd48:	f002 fc1e 	bl	8012588 <rand>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	461a      	mov	r2, r3
 800fd50:	4b45      	ldr	r3, [pc, #276]	; (800fe68 <dhcp_create_msg+0x1a8>)
 800fd52:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fd54:	4b44      	ldr	r3, [pc, #272]	; (800fe68 <dhcp_create_msg+0x1a8>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800fd62:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fd66:	2100      	movs	r1, #0
 800fd68:	6978      	ldr	r0, [r7, #20]
 800fd6a:	f002 fbed 	bl	8012548 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2201      	movs	r2, #1
 800fd72:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	2201      	movs	r2, #1
 800fd78:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7f5 feac 	bl	8005ae6 <lwip_htonl>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	2b08      	cmp	r3, #8
 800fd98:	d010      	beq.n	800fdbc <dhcp_create_msg+0xfc>
 800fd9a:	79fb      	ldrb	r3, [r7, #7]
 800fd9c:	2b04      	cmp	r3, #4
 800fd9e:	d00d      	beq.n	800fdbc <dhcp_create_msg+0xfc>
 800fda0:	79fb      	ldrb	r3, [r7, #7]
 800fda2:	2b07      	cmp	r3, #7
 800fda4:	d00a      	beq.n	800fdbc <dhcp_create_msg+0xfc>
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	2b03      	cmp	r3, #3
 800fdaa:	d10c      	bne.n	800fdc6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800fdb0:	2b05      	cmp	r3, #5
 800fdb2:	d003      	beq.n	800fdbc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	795b      	ldrb	r3, [r3, #5]
 800fdb8:	2b04      	cmp	r3, #4
 800fdba:	d104      	bne.n	800fdc6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	3304      	adds	r3, #4
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	83fb      	strh	r3, [r7, #30]
 800fdca:	e00c      	b.n	800fde6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800fdcc:	8bfa      	ldrh	r2, [r7, #30]
 800fdce:	8bfb      	ldrh	r3, [r7, #30]
 800fdd0:	68f9      	ldr	r1, [r7, #12]
 800fdd2:	440a      	add	r2, r1
 800fdd4:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	4413      	add	r3, r2
 800fddc:	460a      	mov	r2, r1
 800fdde:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fde0:	8bfb      	ldrh	r3, [r7, #30]
 800fde2:	3301      	adds	r3, #1
 800fde4:	83fb      	strh	r3, [r7, #30]
 800fde6:	8bfb      	ldrh	r3, [r7, #30]
 800fde8:	2b05      	cmp	r3, #5
 800fdea:	d9ef      	bls.n	800fdcc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fdf4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800fdfe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800fe02:	2200      	movs	r2, #0
 800fe04:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fe08:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fe12:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	2235      	movs	r2, #53	; 0x35
 800fe20:	2000      	movs	r0, #0
 800fe22:	f7ff fadd 	bl	800f3e0 <dhcp_option>
 800fe26:	4603      	mov	r3, r0
 800fe28:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe30:	79fa      	ldrb	r2, [r7, #7]
 800fe32:	8a7b      	ldrh	r3, [r7, #18]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff fb07 	bl	800f448 <dhcp_option_byte>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d002      	beq.n	800fe4a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	8a7a      	ldrh	r2, [r7, #18]
 800fe48:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800fe4a:	69bb      	ldr	r3, [r7, #24]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3720      	adds	r7, #32
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	08015984 	.word	0x08015984
 800fe58:	08015ca4 	.word	0x08015ca4
 800fe5c:	080159e4 	.word	0x080159e4
 800fe60:	08015cc4 	.word	0x08015cc4
 800fe64:	08015ce4 	.word	0x08015ce4
 800fe68:	20000564 	.word	0x20000564

0800fe6c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
 800fe78:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800fe7a:	89fb      	ldrh	r3, [r7, #14]
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	81fa      	strh	r2, [r7, #14]
 800fe80:	461a      	mov	r2, r3
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	4413      	add	r3, r2
 800fe86:	22ff      	movs	r2, #255	; 0xff
 800fe88:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fe8a:	e007      	b.n	800fe9c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800fe8c:	89fb      	ldrh	r3, [r7, #14]
 800fe8e:	1c5a      	adds	r2, r3, #1
 800fe90:	81fa      	strh	r2, [r7, #14]
 800fe92:	461a      	mov	r2, r3
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	4413      	add	r3, r2
 800fe98:	2200      	movs	r2, #0
 800fe9a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fe9c:	89fb      	ldrh	r3, [r7, #14]
 800fe9e:	2b43      	cmp	r3, #67	; 0x43
 800fea0:	d904      	bls.n	800feac <dhcp_option_trailer+0x40>
 800fea2:	89fb      	ldrh	r3, [r7, #14]
 800fea4:	f003 0303 	and.w	r3, r3, #3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d002      	beq.n	800feb2 <dhcp_option_trailer+0x46>
 800feac:	89fb      	ldrh	r3, [r7, #14]
 800feae:	2b43      	cmp	r3, #67	; 0x43
 800feb0:	d9ec      	bls.n	800fe8c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800feb2:	89fb      	ldrh	r3, [r7, #14]
 800feb4:	33f0      	adds	r3, #240	; 0xf0
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	4619      	mov	r1, r3
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7f6 ff50 	bl	8006d60 <pbuf_realloc>
}
 800fec0:	bf00      	nop
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d017      	beq.n	800ff06 <dhcp_supplied_address+0x3e>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a1b      	ldr	r3, [r3, #32]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d013      	beq.n	800ff06 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6a1b      	ldr	r3, [r3, #32]
 800fee2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	795b      	ldrb	r3, [r3, #5]
 800fee8:	2b0a      	cmp	r3, #10
 800feea:	d007      	beq.n	800fefc <dhcp_supplied_address+0x34>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	795b      	ldrb	r3, [r3, #5]
 800fef0:	2b05      	cmp	r3, #5
 800fef2:	d003      	beq.n	800fefc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fef8:	2b04      	cmp	r3, #4
 800fefa:	d101      	bne.n	800ff00 <dhcp_supplied_address+0x38>
 800fefc:	2301      	movs	r3, #1
 800fefe:	e000      	b.n	800ff02 <dhcp_supplied_address+0x3a>
 800ff00:	2300      	movs	r3, #0
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	e000      	b.n	800ff08 <dhcp_supplied_address+0x40>
  }
  return 0;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3714      	adds	r7, #20
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ff1c:	4915      	ldr	r1, [pc, #84]	; (800ff74 <etharp_free_entry+0x60>)
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	4613      	mov	r3, r2
 800ff22:	005b      	lsls	r3, r3, #1
 800ff24:	4413      	add	r3, r2
 800ff26:	00db      	lsls	r3, r3, #3
 800ff28:	440b      	add	r3, r1
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d013      	beq.n	800ff58 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ff30:	4910      	ldr	r1, [pc, #64]	; (800ff74 <etharp_free_entry+0x60>)
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	4613      	mov	r3, r2
 800ff36:	005b      	lsls	r3, r3, #1
 800ff38:	4413      	add	r3, r2
 800ff3a:	00db      	lsls	r3, r3, #3
 800ff3c:	440b      	add	r3, r1
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7f7 f893 	bl	800706c <pbuf_free>
    arp_table[i].q = NULL;
 800ff46:	490b      	ldr	r1, [pc, #44]	; (800ff74 <etharp_free_entry+0x60>)
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	005b      	lsls	r3, r3, #1
 800ff4e:	4413      	add	r3, r2
 800ff50:	00db      	lsls	r3, r3, #3
 800ff52:	440b      	add	r3, r1
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ff58:	4906      	ldr	r1, [pc, #24]	; (800ff74 <etharp_free_entry+0x60>)
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	005b      	lsls	r3, r3, #1
 800ff60:	4413      	add	r3, r2
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	440b      	add	r3, r1
 800ff66:	3314      	adds	r3, #20
 800ff68:	2200      	movs	r2, #0
 800ff6a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ff6c:	bf00      	nop
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20000568 	.word	0x20000568

0800ff78 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff7e:	2300      	movs	r3, #0
 800ff80:	607b      	str	r3, [r7, #4]
 800ff82:	e096      	b.n	80100b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ff84:	494f      	ldr	r1, [pc, #316]	; (80100c4 <etharp_tmr+0x14c>)
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	4413      	add	r3, r2
 800ff8e:	00db      	lsls	r3, r3, #3
 800ff90:	440b      	add	r3, r1
 800ff92:	3314      	adds	r3, #20
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ff98:	78fb      	ldrb	r3, [r7, #3]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f000 8086 	beq.w	80100ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ffa0:	4948      	ldr	r1, [pc, #288]	; (80100c4 <etharp_tmr+0x14c>)
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	4413      	add	r3, r2
 800ffaa:	00db      	lsls	r3, r3, #3
 800ffac:	440b      	add	r3, r1
 800ffae:	3312      	adds	r3, #18
 800ffb0:	881b      	ldrh	r3, [r3, #0]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b298      	uxth	r0, r3
 800ffb6:	4943      	ldr	r1, [pc, #268]	; (80100c4 <etharp_tmr+0x14c>)
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	4413      	add	r3, r2
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	440b      	add	r3, r1
 800ffc4:	3312      	adds	r3, #18
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ffca:	493e      	ldr	r1, [pc, #248]	; (80100c4 <etharp_tmr+0x14c>)
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	4413      	add	r3, r2
 800ffd4:	00db      	lsls	r3, r3, #3
 800ffd6:	440b      	add	r3, r1
 800ffd8:	3312      	adds	r3, #18
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ffe0:	d215      	bcs.n	801000e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ffe2:	4938      	ldr	r1, [pc, #224]	; (80100c4 <etharp_tmr+0x14c>)
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4413      	add	r3, r2
 800ffec:	00db      	lsls	r3, r3, #3
 800ffee:	440b      	add	r3, r1
 800fff0:	3314      	adds	r3, #20
 800fff2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d10e      	bne.n	8010016 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fff8:	4932      	ldr	r1, [pc, #200]	; (80100c4 <etharp_tmr+0x14c>)
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	4613      	mov	r3, r2
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	4413      	add	r3, r2
 8010002:	00db      	lsls	r3, r3, #3
 8010004:	440b      	add	r3, r1
 8010006:	3312      	adds	r3, #18
 8010008:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801000a:	2b04      	cmp	r3, #4
 801000c:	d903      	bls.n	8010016 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff ff80 	bl	800ff14 <etharp_free_entry>
 8010014:	e04a      	b.n	80100ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010016:	492b      	ldr	r1, [pc, #172]	; (80100c4 <etharp_tmr+0x14c>)
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	4613      	mov	r3, r2
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	4413      	add	r3, r2
 8010020:	00db      	lsls	r3, r3, #3
 8010022:	440b      	add	r3, r1
 8010024:	3314      	adds	r3, #20
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	2b03      	cmp	r3, #3
 801002a:	d10a      	bne.n	8010042 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801002c:	4925      	ldr	r1, [pc, #148]	; (80100c4 <etharp_tmr+0x14c>)
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	4613      	mov	r3, r2
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	4413      	add	r3, r2
 8010036:	00db      	lsls	r3, r3, #3
 8010038:	440b      	add	r3, r1
 801003a:	3314      	adds	r3, #20
 801003c:	2204      	movs	r2, #4
 801003e:	701a      	strb	r2, [r3, #0]
 8010040:	e034      	b.n	80100ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010042:	4920      	ldr	r1, [pc, #128]	; (80100c4 <etharp_tmr+0x14c>)
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4613      	mov	r3, r2
 8010048:	005b      	lsls	r3, r3, #1
 801004a:	4413      	add	r3, r2
 801004c:	00db      	lsls	r3, r3, #3
 801004e:	440b      	add	r3, r1
 8010050:	3314      	adds	r3, #20
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	2b04      	cmp	r3, #4
 8010056:	d10a      	bne.n	801006e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010058:	491a      	ldr	r1, [pc, #104]	; (80100c4 <etharp_tmr+0x14c>)
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	4613      	mov	r3, r2
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	4413      	add	r3, r2
 8010062:	00db      	lsls	r3, r3, #3
 8010064:	440b      	add	r3, r1
 8010066:	3314      	adds	r3, #20
 8010068:	2202      	movs	r2, #2
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	e01e      	b.n	80100ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801006e:	4915      	ldr	r1, [pc, #84]	; (80100c4 <etharp_tmr+0x14c>)
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	4613      	mov	r3, r2
 8010074:	005b      	lsls	r3, r3, #1
 8010076:	4413      	add	r3, r2
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	440b      	add	r3, r1
 801007c:	3314      	adds	r3, #20
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	2b01      	cmp	r3, #1
 8010082:	d113      	bne.n	80100ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010084:	490f      	ldr	r1, [pc, #60]	; (80100c4 <etharp_tmr+0x14c>)
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	4613      	mov	r3, r2
 801008a:	005b      	lsls	r3, r3, #1
 801008c:	4413      	add	r3, r2
 801008e:	00db      	lsls	r3, r3, #3
 8010090:	440b      	add	r3, r1
 8010092:	3308      	adds	r3, #8
 8010094:	6818      	ldr	r0, [r3, #0]
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	4613      	mov	r3, r2
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	4413      	add	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	4a08      	ldr	r2, [pc, #32]	; (80100c4 <etharp_tmr+0x14c>)
 80100a2:	4413      	add	r3, r2
 80100a4:	3304      	adds	r3, #4
 80100a6:	4619      	mov	r1, r3
 80100a8:	f000 fe72 	bl	8010d90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3301      	adds	r3, #1
 80100b0:	607b      	str	r3, [r7, #4]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2b09      	cmp	r3, #9
 80100b6:	f77f af65 	ble.w	800ff84 <etharp_tmr+0xc>
      }
    }
  }
}
 80100ba:	bf00      	nop
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	20000568 	.word	0x20000568

080100c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08a      	sub	sp, #40	; 0x28
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	460b      	mov	r3, r1
 80100d2:	607a      	str	r2, [r7, #4]
 80100d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80100d6:	230a      	movs	r3, #10
 80100d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80100da:	230a      	movs	r3, #10
 80100dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80100de:	230a      	movs	r3, #10
 80100e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80100e6:	230a      	movs	r3, #10
 80100e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	83bb      	strh	r3, [r7, #28]
 80100ee:	2300      	movs	r3, #0
 80100f0:	837b      	strh	r3, [r7, #26]
 80100f2:	2300      	movs	r3, #0
 80100f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100f6:	2300      	movs	r3, #0
 80100f8:	843b      	strh	r3, [r7, #32]
 80100fa:	e0ae      	b.n	801025a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80100fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010100:	49a6      	ldr	r1, [pc, #664]	; (801039c <etharp_find_entry+0x2d4>)
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	440b      	add	r3, r1
 801010c:	3314      	adds	r3, #20
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010112:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010116:	2b0a      	cmp	r3, #10
 8010118:	d105      	bne.n	8010126 <etharp_find_entry+0x5e>
 801011a:	7dfb      	ldrb	r3, [r7, #23]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d102      	bne.n	8010126 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010120:	8c3b      	ldrh	r3, [r7, #32]
 8010122:	847b      	strh	r3, [r7, #34]	; 0x22
 8010124:	e095      	b.n	8010252 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	2b00      	cmp	r3, #0
 801012a:	f000 8092 	beq.w	8010252 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801012e:	7dfb      	ldrb	r3, [r7, #23]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d009      	beq.n	8010148 <etharp_find_entry+0x80>
 8010134:	7dfb      	ldrb	r3, [r7, #23]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d806      	bhi.n	8010148 <etharp_find_entry+0x80>
 801013a:	4b99      	ldr	r3, [pc, #612]	; (80103a0 <etharp_find_entry+0x2d8>)
 801013c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8010140:	4998      	ldr	r1, [pc, #608]	; (80103a4 <etharp_find_entry+0x2dc>)
 8010142:	4899      	ldr	r0, [pc, #612]	; (80103a8 <etharp_find_entry+0x2e0>)
 8010144:	f002 fa08 	bl	8012558 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d020      	beq.n	8010190 <etharp_find_entry+0xc8>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6819      	ldr	r1, [r3, #0]
 8010152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010156:	4891      	ldr	r0, [pc, #580]	; (801039c <etharp_find_entry+0x2d4>)
 8010158:	4613      	mov	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	4413      	add	r3, r2
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	4403      	add	r3, r0
 8010162:	3304      	adds	r3, #4
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4299      	cmp	r1, r3
 8010168:	d112      	bne.n	8010190 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00c      	beq.n	801018a <etharp_find_entry+0xc2>
 8010170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010174:	4989      	ldr	r1, [pc, #548]	; (801039c <etharp_find_entry+0x2d4>)
 8010176:	4613      	mov	r3, r2
 8010178:	005b      	lsls	r3, r3, #1
 801017a:	4413      	add	r3, r2
 801017c:	00db      	lsls	r3, r3, #3
 801017e:	440b      	add	r3, r1
 8010180:	3308      	adds	r3, #8
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	429a      	cmp	r2, r3
 8010188:	d102      	bne.n	8010190 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801018a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801018e:	e100      	b.n	8010392 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010190:	7dfb      	ldrb	r3, [r7, #23]
 8010192:	2b01      	cmp	r3, #1
 8010194:	d140      	bne.n	8010218 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801019a:	4980      	ldr	r1, [pc, #512]	; (801039c <etharp_find_entry+0x2d4>)
 801019c:	4613      	mov	r3, r2
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	440b      	add	r3, r1
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01a      	beq.n	80101e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80101ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101b0:	497a      	ldr	r1, [pc, #488]	; (801039c <etharp_find_entry+0x2d4>)
 80101b2:	4613      	mov	r3, r2
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	4413      	add	r3, r2
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	440b      	add	r3, r1
 80101bc:	3312      	adds	r3, #18
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	8bba      	ldrh	r2, [r7, #28]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d845      	bhi.n	8010252 <etharp_find_entry+0x18a>
            old_queue = i;
 80101c6:	8c3b      	ldrh	r3, [r7, #32]
 80101c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80101ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101ce:	4973      	ldr	r1, [pc, #460]	; (801039c <etharp_find_entry+0x2d4>)
 80101d0:	4613      	mov	r3, r2
 80101d2:	005b      	lsls	r3, r3, #1
 80101d4:	4413      	add	r3, r2
 80101d6:	00db      	lsls	r3, r3, #3
 80101d8:	440b      	add	r3, r1
 80101da:	3312      	adds	r3, #18
 80101dc:	881b      	ldrh	r3, [r3, #0]
 80101de:	83bb      	strh	r3, [r7, #28]
 80101e0:	e037      	b.n	8010252 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80101e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101e6:	496d      	ldr	r1, [pc, #436]	; (801039c <etharp_find_entry+0x2d4>)
 80101e8:	4613      	mov	r3, r2
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	4413      	add	r3, r2
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	440b      	add	r3, r1
 80101f2:	3312      	adds	r3, #18
 80101f4:	881b      	ldrh	r3, [r3, #0]
 80101f6:	8b7a      	ldrh	r2, [r7, #26]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d82a      	bhi.n	8010252 <etharp_find_entry+0x18a>
            old_pending = i;
 80101fc:	8c3b      	ldrh	r3, [r7, #32]
 80101fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010204:	4965      	ldr	r1, [pc, #404]	; (801039c <etharp_find_entry+0x2d4>)
 8010206:	4613      	mov	r3, r2
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	4413      	add	r3, r2
 801020c:	00db      	lsls	r3, r3, #3
 801020e:	440b      	add	r3, r1
 8010210:	3312      	adds	r3, #18
 8010212:	881b      	ldrh	r3, [r3, #0]
 8010214:	837b      	strh	r3, [r7, #26]
 8010216:	e01c      	b.n	8010252 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010218:	7dfb      	ldrb	r3, [r7, #23]
 801021a:	2b01      	cmp	r3, #1
 801021c:	d919      	bls.n	8010252 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801021e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010222:	495e      	ldr	r1, [pc, #376]	; (801039c <etharp_find_entry+0x2d4>)
 8010224:	4613      	mov	r3, r2
 8010226:	005b      	lsls	r3, r3, #1
 8010228:	4413      	add	r3, r2
 801022a:	00db      	lsls	r3, r3, #3
 801022c:	440b      	add	r3, r1
 801022e:	3312      	adds	r3, #18
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	8b3a      	ldrh	r2, [r7, #24]
 8010234:	429a      	cmp	r2, r3
 8010236:	d80c      	bhi.n	8010252 <etharp_find_entry+0x18a>
            old_stable = i;
 8010238:	8c3b      	ldrh	r3, [r7, #32]
 801023a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801023c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010240:	4956      	ldr	r1, [pc, #344]	; (801039c <etharp_find_entry+0x2d4>)
 8010242:	4613      	mov	r3, r2
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	4413      	add	r3, r2
 8010248:	00db      	lsls	r3, r3, #3
 801024a:	440b      	add	r3, r1
 801024c:	3312      	adds	r3, #18
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010252:	8c3b      	ldrh	r3, [r7, #32]
 8010254:	3301      	adds	r3, #1
 8010256:	b29b      	uxth	r3, r3
 8010258:	843b      	strh	r3, [r7, #32]
 801025a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801025e:	2b09      	cmp	r3, #9
 8010260:	f77f af4c 	ble.w	80100fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010264:	7afb      	ldrb	r3, [r7, #11]
 8010266:	f003 0302 	and.w	r3, r3, #2
 801026a:	2b00      	cmp	r3, #0
 801026c:	d108      	bne.n	8010280 <etharp_find_entry+0x1b8>
 801026e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010272:	2b0a      	cmp	r3, #10
 8010274:	d107      	bne.n	8010286 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010276:	7afb      	ldrb	r3, [r7, #11]
 8010278:	f003 0301 	and.w	r3, r3, #1
 801027c:	2b00      	cmp	r3, #0
 801027e:	d102      	bne.n	8010286 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010280:	f04f 33ff 	mov.w	r3, #4294967295
 8010284:	e085      	b.n	8010392 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010286:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801028a:	2b09      	cmp	r3, #9
 801028c:	dc02      	bgt.n	8010294 <etharp_find_entry+0x1cc>
    i = empty;
 801028e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010290:	843b      	strh	r3, [r7, #32]
 8010292:	e039      	b.n	8010308 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010294:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010298:	2b09      	cmp	r3, #9
 801029a:	dc14      	bgt.n	80102c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801029c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801029e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80102a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102a4:	493d      	ldr	r1, [pc, #244]	; (801039c <etharp_find_entry+0x2d4>)
 80102a6:	4613      	mov	r3, r2
 80102a8:	005b      	lsls	r3, r3, #1
 80102aa:	4413      	add	r3, r2
 80102ac:	00db      	lsls	r3, r3, #3
 80102ae:	440b      	add	r3, r1
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d018      	beq.n	80102e8 <etharp_find_entry+0x220>
 80102b6:	4b3a      	ldr	r3, [pc, #232]	; (80103a0 <etharp_find_entry+0x2d8>)
 80102b8:	f240 126d 	movw	r2, #365	; 0x16d
 80102bc:	493b      	ldr	r1, [pc, #236]	; (80103ac <etharp_find_entry+0x2e4>)
 80102be:	483a      	ldr	r0, [pc, #232]	; (80103a8 <etharp_find_entry+0x2e0>)
 80102c0:	f002 f94a 	bl	8012558 <iprintf>
 80102c4:	e010      	b.n	80102e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80102c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80102ca:	2b09      	cmp	r3, #9
 80102cc:	dc02      	bgt.n	80102d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80102ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80102d0:	843b      	strh	r3, [r7, #32]
 80102d2:	e009      	b.n	80102e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80102d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80102d8:	2b09      	cmp	r3, #9
 80102da:	dc02      	bgt.n	80102e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80102dc:	8bfb      	ldrh	r3, [r7, #30]
 80102de:	843b      	strh	r3, [r7, #32]
 80102e0:	e002      	b.n	80102e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80102e2:	f04f 33ff 	mov.w	r3, #4294967295
 80102e6:	e054      	b.n	8010392 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80102e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102ec:	2b09      	cmp	r3, #9
 80102ee:	dd06      	ble.n	80102fe <etharp_find_entry+0x236>
 80102f0:	4b2b      	ldr	r3, [pc, #172]	; (80103a0 <etharp_find_entry+0x2d8>)
 80102f2:	f240 127f 	movw	r2, #383	; 0x17f
 80102f6:	492e      	ldr	r1, [pc, #184]	; (80103b0 <etharp_find_entry+0x2e8>)
 80102f8:	482b      	ldr	r0, [pc, #172]	; (80103a8 <etharp_find_entry+0x2e0>)
 80102fa:	f002 f92d 	bl	8012558 <iprintf>
    etharp_free_entry(i);
 80102fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff fe06 	bl	800ff14 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010308:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801030c:	2b09      	cmp	r3, #9
 801030e:	dd06      	ble.n	801031e <etharp_find_entry+0x256>
 8010310:	4b23      	ldr	r3, [pc, #140]	; (80103a0 <etharp_find_entry+0x2d8>)
 8010312:	f240 1283 	movw	r2, #387	; 0x183
 8010316:	4926      	ldr	r1, [pc, #152]	; (80103b0 <etharp_find_entry+0x2e8>)
 8010318:	4823      	ldr	r0, [pc, #140]	; (80103a8 <etharp_find_entry+0x2e0>)
 801031a:	f002 f91d 	bl	8012558 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801031e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010322:	491e      	ldr	r1, [pc, #120]	; (801039c <etharp_find_entry+0x2d4>)
 8010324:	4613      	mov	r3, r2
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	4413      	add	r3, r2
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	440b      	add	r3, r1
 801032e:	3314      	adds	r3, #20
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d006      	beq.n	8010344 <etharp_find_entry+0x27c>
 8010336:	4b1a      	ldr	r3, [pc, #104]	; (80103a0 <etharp_find_entry+0x2d8>)
 8010338:	f240 1285 	movw	r2, #389	; 0x185
 801033c:	491d      	ldr	r1, [pc, #116]	; (80103b4 <etharp_find_entry+0x2ec>)
 801033e:	481a      	ldr	r0, [pc, #104]	; (80103a8 <etharp_find_entry+0x2e0>)
 8010340:	f002 f90a 	bl	8012558 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d00b      	beq.n	8010362 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801034a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6819      	ldr	r1, [r3, #0]
 8010352:	4812      	ldr	r0, [pc, #72]	; (801039c <etharp_find_entry+0x2d4>)
 8010354:	4613      	mov	r3, r2
 8010356:	005b      	lsls	r3, r3, #1
 8010358:	4413      	add	r3, r2
 801035a:	00db      	lsls	r3, r3, #3
 801035c:	4403      	add	r3, r0
 801035e:	3304      	adds	r3, #4
 8010360:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010366:	490d      	ldr	r1, [pc, #52]	; (801039c <etharp_find_entry+0x2d4>)
 8010368:	4613      	mov	r3, r2
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	4413      	add	r3, r2
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	440b      	add	r3, r1
 8010372:	3312      	adds	r3, #18
 8010374:	2200      	movs	r2, #0
 8010376:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801037c:	4907      	ldr	r1, [pc, #28]	; (801039c <etharp_find_entry+0x2d4>)
 801037e:	4613      	mov	r3, r2
 8010380:	005b      	lsls	r3, r3, #1
 8010382:	4413      	add	r3, r2
 8010384:	00db      	lsls	r3, r3, #3
 8010386:	440b      	add	r3, r1
 8010388:	3308      	adds	r3, #8
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801038e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3728      	adds	r7, #40	; 0x28
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	20000568 	.word	0x20000568
 80103a0:	08015d24 	.word	0x08015d24
 80103a4:	08015d5c 	.word	0x08015d5c
 80103a8:	08015d9c 	.word	0x08015d9c
 80103ac:	08015dc4 	.word	0x08015dc4
 80103b0:	08015ddc 	.word	0x08015ddc
 80103b4:	08015df0 	.word	0x08015df0

080103b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af02      	add	r7, sp, #8
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103cc:	2b06      	cmp	r3, #6
 80103ce:	d006      	beq.n	80103de <etharp_update_arp_entry+0x26>
 80103d0:	4b48      	ldr	r3, [pc, #288]	; (80104f4 <etharp_update_arp_entry+0x13c>)
 80103d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80103d6:	4948      	ldr	r1, [pc, #288]	; (80104f8 <etharp_update_arp_entry+0x140>)
 80103d8:	4848      	ldr	r0, [pc, #288]	; (80104fc <etharp_update_arp_entry+0x144>)
 80103da:	f002 f8bd 	bl	8012558 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d012      	beq.n	801040a <etharp_update_arp_entry+0x52>
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d00e      	beq.n	801040a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	68f9      	ldr	r1, [r7, #12]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f001 f91e 	bl	8011634 <ip4_addr_isbroadcast_u32>
 80103f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d105      	bne.n	801040a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010406:	2be0      	cmp	r3, #224	; 0xe0
 8010408:	d102      	bne.n	8010410 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801040a:	f06f 030f 	mvn.w	r3, #15
 801040e:	e06c      	b.n	80104ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010410:	78fb      	ldrb	r3, [r7, #3]
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	4619      	mov	r1, r3
 8010416:	68b8      	ldr	r0, [r7, #8]
 8010418:	f7ff fe56 	bl	80100c8 <etharp_find_entry>
 801041c:	4603      	mov	r3, r0
 801041e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010420:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010424:	2b00      	cmp	r3, #0
 8010426:	da02      	bge.n	801042e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010428:	8afb      	ldrh	r3, [r7, #22]
 801042a:	b25b      	sxtb	r3, r3
 801042c:	e05d      	b.n	80104ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801042e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010432:	4933      	ldr	r1, [pc, #204]	; (8010500 <etharp_update_arp_entry+0x148>)
 8010434:	4613      	mov	r3, r2
 8010436:	005b      	lsls	r3, r3, #1
 8010438:	4413      	add	r3, r2
 801043a:	00db      	lsls	r3, r3, #3
 801043c:	440b      	add	r3, r1
 801043e:	3314      	adds	r3, #20
 8010440:	2202      	movs	r2, #2
 8010442:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010444:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010448:	492d      	ldr	r1, [pc, #180]	; (8010500 <etharp_update_arp_entry+0x148>)
 801044a:	4613      	mov	r3, r2
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4413      	add	r3, r2
 8010450:	00db      	lsls	r3, r3, #3
 8010452:	440b      	add	r3, r1
 8010454:	3308      	adds	r3, #8
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801045a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801045e:	4613      	mov	r3, r2
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	4413      	add	r3, r2
 8010464:	00db      	lsls	r3, r3, #3
 8010466:	3308      	adds	r3, #8
 8010468:	4a25      	ldr	r2, [pc, #148]	; (8010500 <etharp_update_arp_entry+0x148>)
 801046a:	4413      	add	r3, r2
 801046c:	3304      	adds	r3, #4
 801046e:	2206      	movs	r2, #6
 8010470:	6879      	ldr	r1, [r7, #4]
 8010472:	4618      	mov	r0, r3
 8010474:	f002 f85d 	bl	8012532 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801047c:	4920      	ldr	r1, [pc, #128]	; (8010500 <etharp_update_arp_entry+0x148>)
 801047e:	4613      	mov	r3, r2
 8010480:	005b      	lsls	r3, r3, #1
 8010482:	4413      	add	r3, r2
 8010484:	00db      	lsls	r3, r3, #3
 8010486:	440b      	add	r3, r1
 8010488:	3312      	adds	r3, #18
 801048a:	2200      	movs	r2, #0
 801048c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801048e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010492:	491b      	ldr	r1, [pc, #108]	; (8010500 <etharp_update_arp_entry+0x148>)
 8010494:	4613      	mov	r3, r2
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	4413      	add	r3, r2
 801049a:	00db      	lsls	r3, r3, #3
 801049c:	440b      	add	r3, r1
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d021      	beq.n	80104e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80104a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104a8:	4915      	ldr	r1, [pc, #84]	; (8010500 <etharp_update_arp_entry+0x148>)
 80104aa:	4613      	mov	r3, r2
 80104ac:	005b      	lsls	r3, r3, #1
 80104ae:	4413      	add	r3, r2
 80104b0:	00db      	lsls	r3, r3, #3
 80104b2:	440b      	add	r3, r1
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80104b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104bc:	4910      	ldr	r1, [pc, #64]	; (8010500 <etharp_update_arp_entry+0x148>)
 80104be:	4613      	mov	r3, r2
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	4413      	add	r3, r2
 80104c4:	00db      	lsls	r3, r3, #3
 80104c6:	440b      	add	r3, r1
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80104d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104d6:	9300      	str	r3, [sp, #0]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6939      	ldr	r1, [r7, #16]
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f001 ffad 	bl	801243c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80104e2:	6938      	ldr	r0, [r7, #16]
 80104e4:	f7f6 fdc2 	bl	800706c <pbuf_free>
  }
  return ERR_OK;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	08015d24 	.word	0x08015d24
 80104f8:	08015e1c 	.word	0x08015e1c
 80104fc:	08015d9c 	.word	0x08015d9c
 8010500:	20000568 	.word	0x20000568

08010504 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801050c:	2300      	movs	r3, #0
 801050e:	60fb      	str	r3, [r7, #12]
 8010510:	e01e      	b.n	8010550 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010512:	4913      	ldr	r1, [pc, #76]	; (8010560 <etharp_cleanup_netif+0x5c>)
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	4613      	mov	r3, r2
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	4413      	add	r3, r2
 801051c:	00db      	lsls	r3, r3, #3
 801051e:	440b      	add	r3, r1
 8010520:	3314      	adds	r3, #20
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010526:	7afb      	ldrb	r3, [r7, #11]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d00e      	beq.n	801054a <etharp_cleanup_netif+0x46>
 801052c:	490c      	ldr	r1, [pc, #48]	; (8010560 <etharp_cleanup_netif+0x5c>)
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	4613      	mov	r3, r2
 8010532:	005b      	lsls	r3, r3, #1
 8010534:	4413      	add	r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	440b      	add	r3, r1
 801053a:	3308      	adds	r3, #8
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d102      	bne.n	801054a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f7ff fce5 	bl	800ff14 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	3301      	adds	r3, #1
 801054e:	60fb      	str	r3, [r7, #12]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2b09      	cmp	r3, #9
 8010554:	dddd      	ble.n	8010512 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010556:	bf00      	nop
 8010558:	3710      	adds	r7, #16
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	20000568 	.word	0x20000568

08010564 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010564:	b5b0      	push	{r4, r5, r7, lr}
 8010566:	b08a      	sub	sp, #40	; 0x28
 8010568:	af04      	add	r7, sp, #16
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d107      	bne.n	8010584 <etharp_input+0x20>
 8010574:	4b3f      	ldr	r3, [pc, #252]	; (8010674 <etharp_input+0x110>)
 8010576:	f240 228a 	movw	r2, #650	; 0x28a
 801057a:	493f      	ldr	r1, [pc, #252]	; (8010678 <etharp_input+0x114>)
 801057c:	483f      	ldr	r0, [pc, #252]	; (801067c <etharp_input+0x118>)
 801057e:	f001 ffeb 	bl	8012558 <iprintf>
 8010582:	e074      	b.n	801066e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	881b      	ldrh	r3, [r3, #0]
 801058e:	b29b      	uxth	r3, r3
 8010590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010594:	d10c      	bne.n	80105b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801059a:	2b06      	cmp	r3, #6
 801059c:	d108      	bne.n	80105b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80105a2:	2b04      	cmp	r3, #4
 80105a4:	d104      	bne.n	80105b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	885b      	ldrh	r3, [r3, #2]
 80105aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80105ac:	2b08      	cmp	r3, #8
 80105ae:	d003      	beq.n	80105b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f7f6 fd5b 	bl	800706c <pbuf_free>
    return;
 80105b6:	e05a      	b.n	801066e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	330e      	adds	r3, #14
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	3318      	adds	r3, #24
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	3304      	adds	r3, #4
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d102      	bne.n	80105d8 <etharp_input+0x74>
    for_us = 0;
 80105d2:	2300      	movs	r3, #0
 80105d4:	75fb      	strb	r3, [r7, #23]
 80105d6:	e009      	b.n	80105ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	3304      	adds	r3, #4
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	bf0c      	ite	eq
 80105e4:	2301      	moveq	r3, #1
 80105e6:	2300      	movne	r3, #0
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	f103 0208 	add.w	r2, r3, #8
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d001      	beq.n	80105fc <etharp_input+0x98>
 80105f8:	2301      	movs	r3, #1
 80105fa:	e000      	b.n	80105fe <etharp_input+0x9a>
 80105fc:	2302      	movs	r3, #2
 80105fe:	f107 010c 	add.w	r1, r7, #12
 8010602:	6838      	ldr	r0, [r7, #0]
 8010604:	f7ff fed8 	bl	80103b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	88db      	ldrh	r3, [r3, #6]
 801060c:	b29b      	uxth	r3, r3
 801060e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010612:	d003      	beq.n	801061c <etharp_input+0xb8>
 8010614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010618:	d01e      	beq.n	8010658 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801061a:	e025      	b.n	8010668 <etharp_input+0x104>
      if (for_us) {
 801061c:	7dfb      	ldrb	r3, [r7, #23]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d021      	beq.n	8010666 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010638:	693a      	ldr	r2, [r7, #16]
 801063a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801063c:	2102      	movs	r1, #2
 801063e:	9103      	str	r1, [sp, #12]
 8010640:	f107 010c 	add.w	r1, r7, #12
 8010644:	9102      	str	r1, [sp, #8]
 8010646:	9201      	str	r2, [sp, #4]
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	462b      	mov	r3, r5
 801064c:	4622      	mov	r2, r4
 801064e:	4601      	mov	r1, r0
 8010650:	6838      	ldr	r0, [r7, #0]
 8010652:	f000 faef 	bl	8010c34 <etharp_raw>
      break;
 8010656:	e006      	b.n	8010666 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010658:	f107 030c 	add.w	r3, r7, #12
 801065c:	4619      	mov	r1, r3
 801065e:	6838      	ldr	r0, [r7, #0]
 8010660:	f7fe f9fe 	bl	800ea60 <dhcp_arp_reply>
      break;
 8010664:	e000      	b.n	8010668 <etharp_input+0x104>
      break;
 8010666:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7f6 fcff 	bl	800706c <pbuf_free>
}
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bdb0      	pop	{r4, r5, r7, pc}
 8010674:	08015d24 	.word	0x08015d24
 8010678:	08015e74 	.word	0x08015e74
 801067c:	08015d9c 	.word	0x08015d9c

08010680 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af02      	add	r7, sp, #8
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	4613      	mov	r3, r2
 801068c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801068e:	79fa      	ldrb	r2, [r7, #7]
 8010690:	4944      	ldr	r1, [pc, #272]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 8010692:	4613      	mov	r3, r2
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	3314      	adds	r3, #20
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d806      	bhi.n	80106b2 <etharp_output_to_arp_index+0x32>
 80106a4:	4b40      	ldr	r3, [pc, #256]	; (80107a8 <etharp_output_to_arp_index+0x128>)
 80106a6:	f240 22ef 	movw	r2, #751	; 0x2ef
 80106aa:	4940      	ldr	r1, [pc, #256]	; (80107ac <etharp_output_to_arp_index+0x12c>)
 80106ac:	4840      	ldr	r0, [pc, #256]	; (80107b0 <etharp_output_to_arp_index+0x130>)
 80106ae:	f001 ff53 	bl	8012558 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80106b2:	79fa      	ldrb	r2, [r7, #7]
 80106b4:	493b      	ldr	r1, [pc, #236]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 80106b6:	4613      	mov	r3, r2
 80106b8:	005b      	lsls	r3, r3, #1
 80106ba:	4413      	add	r3, r2
 80106bc:	00db      	lsls	r3, r3, #3
 80106be:	440b      	add	r3, r1
 80106c0:	3314      	adds	r3, #20
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d153      	bne.n	8010770 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80106c8:	79fa      	ldrb	r2, [r7, #7]
 80106ca:	4936      	ldr	r1, [pc, #216]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 80106cc:	4613      	mov	r3, r2
 80106ce:	005b      	lsls	r3, r3, #1
 80106d0:	4413      	add	r3, r2
 80106d2:	00db      	lsls	r3, r3, #3
 80106d4:	440b      	add	r3, r1
 80106d6:	3312      	adds	r3, #18
 80106d8:	881b      	ldrh	r3, [r3, #0]
 80106da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80106de:	d919      	bls.n	8010714 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80106e0:	79fa      	ldrb	r2, [r7, #7]
 80106e2:	4613      	mov	r3, r2
 80106e4:	005b      	lsls	r3, r3, #1
 80106e6:	4413      	add	r3, r2
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	4a2e      	ldr	r2, [pc, #184]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 80106ec:	4413      	add	r3, r2
 80106ee:	3304      	adds	r3, #4
 80106f0:	4619      	mov	r1, r3
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f000 fb4c 	bl	8010d90 <etharp_request>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d138      	bne.n	8010770 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80106fe:	79fa      	ldrb	r2, [r7, #7]
 8010700:	4928      	ldr	r1, [pc, #160]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 8010702:	4613      	mov	r3, r2
 8010704:	005b      	lsls	r3, r3, #1
 8010706:	4413      	add	r3, r2
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	440b      	add	r3, r1
 801070c:	3314      	adds	r3, #20
 801070e:	2203      	movs	r2, #3
 8010710:	701a      	strb	r2, [r3, #0]
 8010712:	e02d      	b.n	8010770 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010714:	79fa      	ldrb	r2, [r7, #7]
 8010716:	4923      	ldr	r1, [pc, #140]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 8010718:	4613      	mov	r3, r2
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	4413      	add	r3, r2
 801071e:	00db      	lsls	r3, r3, #3
 8010720:	440b      	add	r3, r1
 8010722:	3312      	adds	r3, #18
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801072a:	d321      	bcc.n	8010770 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801072c:	79fa      	ldrb	r2, [r7, #7]
 801072e:	4613      	mov	r3, r2
 8010730:	005b      	lsls	r3, r3, #1
 8010732:	4413      	add	r3, r2
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	4a1b      	ldr	r2, [pc, #108]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 8010738:	4413      	add	r3, r2
 801073a:	1d19      	adds	r1, r3, #4
 801073c:	79fa      	ldrb	r2, [r7, #7]
 801073e:	4613      	mov	r3, r2
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	4413      	add	r3, r2
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	3308      	adds	r3, #8
 8010748:	4a16      	ldr	r2, [pc, #88]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 801074a:	4413      	add	r3, r2
 801074c:	3304      	adds	r3, #4
 801074e:	461a      	mov	r2, r3
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f000 fafb 	bl	8010d4c <etharp_request_dst>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d109      	bne.n	8010770 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801075c:	79fa      	ldrb	r2, [r7, #7]
 801075e:	4911      	ldr	r1, [pc, #68]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 8010760:	4613      	mov	r3, r2
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	4413      	add	r3, r2
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	440b      	add	r3, r1
 801076a:	3314      	adds	r3, #20
 801076c:	2203      	movs	r2, #3
 801076e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010776:	79fa      	ldrb	r2, [r7, #7]
 8010778:	4613      	mov	r3, r2
 801077a:	005b      	lsls	r3, r3, #1
 801077c:	4413      	add	r3, r2
 801077e:	00db      	lsls	r3, r3, #3
 8010780:	3308      	adds	r3, #8
 8010782:	4a08      	ldr	r2, [pc, #32]	; (80107a4 <etharp_output_to_arp_index+0x124>)
 8010784:	4413      	add	r3, r2
 8010786:	1d1a      	adds	r2, r3, #4
 8010788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	4613      	mov	r3, r2
 8010790:	460a      	mov	r2, r1
 8010792:	68b9      	ldr	r1, [r7, #8]
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	f001 fe51 	bl	801243c <ethernet_output>
 801079a:	4603      	mov	r3, r0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	20000568 	.word	0x20000568
 80107a8:	08015d24 	.word	0x08015d24
 80107ac:	08015e94 	.word	0x08015e94
 80107b0:	08015d9c 	.word	0x08015d9c

080107b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b08a      	sub	sp, #40	; 0x28
 80107b8:	af02      	add	r7, sp, #8
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d106      	bne.n	80107d8 <etharp_output+0x24>
 80107ca:	4b73      	ldr	r3, [pc, #460]	; (8010998 <etharp_output+0x1e4>)
 80107cc:	f240 321e 	movw	r2, #798	; 0x31e
 80107d0:	4972      	ldr	r1, [pc, #456]	; (801099c <etharp_output+0x1e8>)
 80107d2:	4873      	ldr	r0, [pc, #460]	; (80109a0 <etharp_output+0x1ec>)
 80107d4:	f001 fec0 	bl	8012558 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <etharp_output+0x38>
 80107de:	4b6e      	ldr	r3, [pc, #440]	; (8010998 <etharp_output+0x1e4>)
 80107e0:	f240 321f 	movw	r2, #799	; 0x31f
 80107e4:	496f      	ldr	r1, [pc, #444]	; (80109a4 <etharp_output+0x1f0>)
 80107e6:	486e      	ldr	r0, [pc, #440]	; (80109a0 <etharp_output+0x1ec>)
 80107e8:	f001 feb6 	bl	8012558 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <etharp_output+0x4c>
 80107f2:	4b69      	ldr	r3, [pc, #420]	; (8010998 <etharp_output+0x1e4>)
 80107f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80107f8:	496b      	ldr	r1, [pc, #428]	; (80109a8 <etharp_output+0x1f4>)
 80107fa:	4869      	ldr	r0, [pc, #420]	; (80109a0 <etharp_output+0x1ec>)
 80107fc:	f001 feac 	bl	8012558 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68f9      	ldr	r1, [r7, #12]
 8010806:	4618      	mov	r0, r3
 8010808:	f000 ff14 	bl	8011634 <ip4_addr_isbroadcast_u32>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d002      	beq.n	8010818 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010812:	4b66      	ldr	r3, [pc, #408]	; (80109ac <etharp_output+0x1f8>)
 8010814:	61fb      	str	r3, [r7, #28]
 8010816:	e0af      	b.n	8010978 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010820:	2be0      	cmp	r3, #224	; 0xe0
 8010822:	d118      	bne.n	8010856 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010824:	2301      	movs	r3, #1
 8010826:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010828:	2300      	movs	r3, #0
 801082a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801082c:	235e      	movs	r3, #94	; 0x5e
 801082e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	3301      	adds	r3, #1
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801083a:	b2db      	uxtb	r3, r3
 801083c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	3302      	adds	r3, #2
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	3303      	adds	r3, #3
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801084e:	f107 0310 	add.w	r3, r7, #16
 8010852:	61fb      	str	r3, [r7, #28]
 8010854:	e090      	b.n	8010978 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3304      	adds	r3, #4
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	405a      	eors	r2, r3
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	3308      	adds	r3, #8
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4013      	ands	r3, r2
 801086a:	2b00      	cmp	r3, #0
 801086c:	d012      	beq.n	8010894 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010874:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010878:	4293      	cmp	r3, r2
 801087a:	d00b      	beq.n	8010894 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	330c      	adds	r3, #12
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d003      	beq.n	801088e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	330c      	adds	r3, #12
 801088a:	61bb      	str	r3, [r7, #24]
 801088c:	e002      	b.n	8010894 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801088e:	f06f 0303 	mvn.w	r3, #3
 8010892:	e07d      	b.n	8010990 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010894:	4b46      	ldr	r3, [pc, #280]	; (80109b0 <etharp_output+0x1fc>)
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	4619      	mov	r1, r3
 801089a:	4a46      	ldr	r2, [pc, #280]	; (80109b4 <etharp_output+0x200>)
 801089c:	460b      	mov	r3, r1
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	440b      	add	r3, r1
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	4413      	add	r3, r2
 80108a6:	3314      	adds	r3, #20
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d925      	bls.n	80108fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80108ae:	4b40      	ldr	r3, [pc, #256]	; (80109b0 <etharp_output+0x1fc>)
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	4619      	mov	r1, r3
 80108b4:	4a3f      	ldr	r2, [pc, #252]	; (80109b4 <etharp_output+0x200>)
 80108b6:	460b      	mov	r3, r1
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	440b      	add	r3, r1
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	4413      	add	r3, r2
 80108c0:	3308      	adds	r3, #8
 80108c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d117      	bne.n	80108fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	4b38      	ldr	r3, [pc, #224]	; (80109b0 <etharp_output+0x1fc>)
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	4618      	mov	r0, r3
 80108d4:	4937      	ldr	r1, [pc, #220]	; (80109b4 <etharp_output+0x200>)
 80108d6:	4603      	mov	r3, r0
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4403      	add	r3, r0
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	440b      	add	r3, r1
 80108e0:	3304      	adds	r3, #4
 80108e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d108      	bne.n	80108fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80108e8:	4b31      	ldr	r3, [pc, #196]	; (80109b0 <etharp_output+0x1fc>)
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	461a      	mov	r2, r3
 80108ee:	68b9      	ldr	r1, [r7, #8]
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f7ff fec5 	bl	8010680 <etharp_output_to_arp_index>
 80108f6:	4603      	mov	r3, r0
 80108f8:	e04a      	b.n	8010990 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80108fa:	2300      	movs	r3, #0
 80108fc:	75fb      	strb	r3, [r7, #23]
 80108fe:	e031      	b.n	8010964 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010900:	7dfa      	ldrb	r2, [r7, #23]
 8010902:	492c      	ldr	r1, [pc, #176]	; (80109b4 <etharp_output+0x200>)
 8010904:	4613      	mov	r3, r2
 8010906:	005b      	lsls	r3, r3, #1
 8010908:	4413      	add	r3, r2
 801090a:	00db      	lsls	r3, r3, #3
 801090c:	440b      	add	r3, r1
 801090e:	3314      	adds	r3, #20
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	2b01      	cmp	r3, #1
 8010914:	d923      	bls.n	801095e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010916:	7dfa      	ldrb	r2, [r7, #23]
 8010918:	4926      	ldr	r1, [pc, #152]	; (80109b4 <etharp_output+0x200>)
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	440b      	add	r3, r1
 8010924:	3308      	adds	r3, #8
 8010926:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	429a      	cmp	r2, r3
 801092c:	d117      	bne.n	801095e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	6819      	ldr	r1, [r3, #0]
 8010932:	7dfa      	ldrb	r2, [r7, #23]
 8010934:	481f      	ldr	r0, [pc, #124]	; (80109b4 <etharp_output+0x200>)
 8010936:	4613      	mov	r3, r2
 8010938:	005b      	lsls	r3, r3, #1
 801093a:	4413      	add	r3, r2
 801093c:	00db      	lsls	r3, r3, #3
 801093e:	4403      	add	r3, r0
 8010940:	3304      	adds	r3, #4
 8010942:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010944:	4299      	cmp	r1, r3
 8010946:	d10a      	bne.n	801095e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010948:	4a19      	ldr	r2, [pc, #100]	; (80109b0 <etharp_output+0x1fc>)
 801094a:	7dfb      	ldrb	r3, [r7, #23]
 801094c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801094e:	7dfb      	ldrb	r3, [r7, #23]
 8010950:	461a      	mov	r2, r3
 8010952:	68b9      	ldr	r1, [r7, #8]
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f7ff fe93 	bl	8010680 <etharp_output_to_arp_index>
 801095a:	4603      	mov	r3, r0
 801095c:	e018      	b.n	8010990 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	3301      	adds	r3, #1
 8010962:	75fb      	strb	r3, [r7, #23]
 8010964:	7dfb      	ldrb	r3, [r7, #23]
 8010966:	2b09      	cmp	r3, #9
 8010968:	d9ca      	bls.n	8010900 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	69b9      	ldr	r1, [r7, #24]
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f000 f822 	bl	80109b8 <etharp_query>
 8010974:	4603      	mov	r3, r0
 8010976:	e00b      	b.n	8010990 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801097e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	68b9      	ldr	r1, [r7, #8]
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f001 fd57 	bl	801243c <ethernet_output>
 801098e:	4603      	mov	r3, r0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3720      	adds	r7, #32
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	08015d24 	.word	0x08015d24
 801099c:	08015e74 	.word	0x08015e74
 80109a0:	08015d9c 	.word	0x08015d9c
 80109a4:	08015ec4 	.word	0x08015ec4
 80109a8:	08015e64 	.word	0x08015e64
 80109ac:	08016914 	.word	0x08016914
 80109b0:	20000658 	.word	0x20000658
 80109b4:	20000568 	.word	0x20000568

080109b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b08c      	sub	sp, #48	; 0x30
 80109bc:	af02      	add	r7, sp, #8
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	3326      	adds	r3, #38	; 0x26
 80109c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80109ca:	23ff      	movs	r3, #255	; 0xff
 80109cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	68f9      	ldr	r1, [r7, #12]
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 fe2a 	bl	8011634 <ip4_addr_isbroadcast_u32>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10c      	bne.n	8010a00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80109ee:	2be0      	cmp	r3, #224	; 0xe0
 80109f0:	d006      	beq.n	8010a00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d003      	beq.n	8010a00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d102      	bne.n	8010a06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a00:	f06f 030f 	mvn.w	r3, #15
 8010a04:	e102      	b.n	8010c0c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010a06:	68fa      	ldr	r2, [r7, #12]
 8010a08:	2101      	movs	r1, #1
 8010a0a:	68b8      	ldr	r0, [r7, #8]
 8010a0c:	f7ff fb5c 	bl	80100c8 <etharp_find_entry>
 8010a10:	4603      	mov	r3, r0
 8010a12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010a14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	da02      	bge.n	8010a22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010a1c:	8a7b      	ldrh	r3, [r7, #18]
 8010a1e:	b25b      	sxtb	r3, r3
 8010a20:	e0f4      	b.n	8010c0c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010a22:	8a7b      	ldrh	r3, [r7, #18]
 8010a24:	2b7e      	cmp	r3, #126	; 0x7e
 8010a26:	d906      	bls.n	8010a36 <etharp_query+0x7e>
 8010a28:	4b7a      	ldr	r3, [pc, #488]	; (8010c14 <etharp_query+0x25c>)
 8010a2a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010a2e:	497a      	ldr	r1, [pc, #488]	; (8010c18 <etharp_query+0x260>)
 8010a30:	487a      	ldr	r0, [pc, #488]	; (8010c1c <etharp_query+0x264>)
 8010a32:	f001 fd91 	bl	8012558 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010a36:	8a7b      	ldrh	r3, [r7, #18]
 8010a38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010a3a:	7c7a      	ldrb	r2, [r7, #17]
 8010a3c:	4978      	ldr	r1, [pc, #480]	; (8010c20 <etharp_query+0x268>)
 8010a3e:	4613      	mov	r3, r2
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	4413      	add	r3, r2
 8010a44:	00db      	lsls	r3, r3, #3
 8010a46:	440b      	add	r3, r1
 8010a48:	3314      	adds	r3, #20
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d115      	bne.n	8010a7c <etharp_query+0xc4>
    is_new_entry = 1;
 8010a50:	2301      	movs	r3, #1
 8010a52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010a54:	7c7a      	ldrb	r2, [r7, #17]
 8010a56:	4972      	ldr	r1, [pc, #456]	; (8010c20 <etharp_query+0x268>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	440b      	add	r3, r1
 8010a62:	3314      	adds	r3, #20
 8010a64:	2201      	movs	r2, #1
 8010a66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010a68:	7c7a      	ldrb	r2, [r7, #17]
 8010a6a:	496d      	ldr	r1, [pc, #436]	; (8010c20 <etharp_query+0x268>)
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	440b      	add	r3, r1
 8010a76:	3308      	adds	r3, #8
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010a7c:	7c7a      	ldrb	r2, [r7, #17]
 8010a7e:	4968      	ldr	r1, [pc, #416]	; (8010c20 <etharp_query+0x268>)
 8010a80:	4613      	mov	r3, r2
 8010a82:	005b      	lsls	r3, r3, #1
 8010a84:	4413      	add	r3, r2
 8010a86:	00db      	lsls	r3, r3, #3
 8010a88:	440b      	add	r3, r1
 8010a8a:	3314      	adds	r3, #20
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d011      	beq.n	8010ab6 <etharp_query+0xfe>
 8010a92:	7c7a      	ldrb	r2, [r7, #17]
 8010a94:	4962      	ldr	r1, [pc, #392]	; (8010c20 <etharp_query+0x268>)
 8010a96:	4613      	mov	r3, r2
 8010a98:	005b      	lsls	r3, r3, #1
 8010a9a:	4413      	add	r3, r2
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	440b      	add	r3, r1
 8010aa0:	3314      	adds	r3, #20
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d806      	bhi.n	8010ab6 <etharp_query+0xfe>
 8010aa8:	4b5a      	ldr	r3, [pc, #360]	; (8010c14 <etharp_query+0x25c>)
 8010aaa:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010aae:	495d      	ldr	r1, [pc, #372]	; (8010c24 <etharp_query+0x26c>)
 8010ab0:	485a      	ldr	r0, [pc, #360]	; (8010c1c <etharp_query+0x264>)
 8010ab2:	f001 fd51 	bl	8012558 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010ab6:	6a3b      	ldr	r3, [r7, #32]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d102      	bne.n	8010ac2 <etharp_query+0x10a>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d10c      	bne.n	8010adc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010ac2:	68b9      	ldr	r1, [r7, #8]
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f000 f963 	bl	8010d90 <etharp_request>
 8010aca:	4603      	mov	r3, r0
 8010acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d102      	bne.n	8010adc <etharp_query+0x124>
      return result;
 8010ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ada:	e097      	b.n	8010c0c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <etharp_query+0x138>
 8010ae2:	4b4c      	ldr	r3, [pc, #304]	; (8010c14 <etharp_query+0x25c>)
 8010ae4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010ae8:	494f      	ldr	r1, [pc, #316]	; (8010c28 <etharp_query+0x270>)
 8010aea:	484c      	ldr	r0, [pc, #304]	; (8010c1c <etharp_query+0x264>)
 8010aec:	f001 fd34 	bl	8012558 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010af0:	7c7a      	ldrb	r2, [r7, #17]
 8010af2:	494b      	ldr	r1, [pc, #300]	; (8010c20 <etharp_query+0x268>)
 8010af4:	4613      	mov	r3, r2
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	4413      	add	r3, r2
 8010afa:	00db      	lsls	r3, r3, #3
 8010afc:	440b      	add	r3, r1
 8010afe:	3314      	adds	r3, #20
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d918      	bls.n	8010b38 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010b06:	4a49      	ldr	r2, [pc, #292]	; (8010c2c <etharp_query+0x274>)
 8010b08:	7c7b      	ldrb	r3, [r7, #17]
 8010b0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010b0c:	7c7a      	ldrb	r2, [r7, #17]
 8010b0e:	4613      	mov	r3, r2
 8010b10:	005b      	lsls	r3, r3, #1
 8010b12:	4413      	add	r3, r2
 8010b14:	00db      	lsls	r3, r3, #3
 8010b16:	3308      	adds	r3, #8
 8010b18:	4a41      	ldr	r2, [pc, #260]	; (8010c20 <etharp_query+0x268>)
 8010b1a:	4413      	add	r3, r2
 8010b1c:	1d1a      	adds	r2, r3, #4
 8010b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b22:	9300      	str	r3, [sp, #0]
 8010b24:	4613      	mov	r3, r2
 8010b26:	697a      	ldr	r2, [r7, #20]
 8010b28:	6879      	ldr	r1, [r7, #4]
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f001 fc86 	bl	801243c <ethernet_output>
 8010b30:	4603      	mov	r3, r0
 8010b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b36:	e067      	b.n	8010c08 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010b38:	7c7a      	ldrb	r2, [r7, #17]
 8010b3a:	4939      	ldr	r1, [pc, #228]	; (8010c20 <etharp_query+0x268>)
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3314      	adds	r3, #20
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d15c      	bne.n	8010c08 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010b56:	e01c      	b.n	8010b92 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	895a      	ldrh	r2, [r3, #10]
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	891b      	ldrh	r3, [r3, #8]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d10a      	bne.n	8010b7a <etharp_query+0x1c2>
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d006      	beq.n	8010b7a <etharp_query+0x1c2>
 8010b6c:	4b29      	ldr	r3, [pc, #164]	; (8010c14 <etharp_query+0x25c>)
 8010b6e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010b72:	492f      	ldr	r1, [pc, #188]	; (8010c30 <etharp_query+0x278>)
 8010b74:	4829      	ldr	r0, [pc, #164]	; (8010c1c <etharp_query+0x264>)
 8010b76:	f001 fcef 	bl	8012558 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	7b1b      	ldrb	r3, [r3, #12]
 8010b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d002      	beq.n	8010b8c <etharp_query+0x1d4>
        copy_needed = 1;
 8010b86:	2301      	movs	r3, #1
 8010b88:	61bb      	str	r3, [r7, #24]
        break;
 8010b8a:	e005      	b.n	8010b98 <etharp_query+0x1e0>
      }
      p = p->next;
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1df      	bne.n	8010b58 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d007      	beq.n	8010bae <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010ba4:	200e      	movs	r0, #14
 8010ba6:	f7f6 fccd 	bl	8007544 <pbuf_clone>
 8010baa:	61f8      	str	r0, [r7, #28]
 8010bac:	e004      	b.n	8010bb8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010bb2:	69f8      	ldr	r0, [r7, #28]
 8010bb4:	f7f6 fafa 	bl	80071ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d021      	beq.n	8010c02 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010bbe:	7c7a      	ldrb	r2, [r7, #17]
 8010bc0:	4917      	ldr	r1, [pc, #92]	; (8010c20 <etharp_query+0x268>)
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	440b      	add	r3, r1
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00a      	beq.n	8010be8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010bd2:	7c7a      	ldrb	r2, [r7, #17]
 8010bd4:	4912      	ldr	r1, [pc, #72]	; (8010c20 <etharp_query+0x268>)
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	4413      	add	r3, r2
 8010bdc:	00db      	lsls	r3, r3, #3
 8010bde:	440b      	add	r3, r1
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7f6 fa42 	bl	800706c <pbuf_free>
      }
      arp_table[i].q = p;
 8010be8:	7c7a      	ldrb	r2, [r7, #17]
 8010bea:	490d      	ldr	r1, [pc, #52]	; (8010c20 <etharp_query+0x268>)
 8010bec:	4613      	mov	r3, r2
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	00db      	lsls	r3, r3, #3
 8010bf4:	440b      	add	r3, r1
 8010bf6:	69fa      	ldr	r2, [r7, #28]
 8010bf8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c00:	e002      	b.n	8010c08 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010c02:	23ff      	movs	r3, #255	; 0xff
 8010c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010c08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3728      	adds	r7, #40	; 0x28
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	08015d24 	.word	0x08015d24
 8010c18:	08015ed0 	.word	0x08015ed0
 8010c1c:	08015d9c 	.word	0x08015d9c
 8010c20:	20000568 	.word	0x20000568
 8010c24:	08015ee0 	.word	0x08015ee0
 8010c28:	08015ec4 	.word	0x08015ec4
 8010c2c:	20000658 	.word	0x20000658
 8010c30:	08015f08 	.word	0x08015f08

08010c34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b08a      	sub	sp, #40	; 0x28
 8010c38:	af02      	add	r7, sp, #8
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d106      	bne.n	8010c5a <etharp_raw+0x26>
 8010c4c:	4b3a      	ldr	r3, [pc, #232]	; (8010d38 <etharp_raw+0x104>)
 8010c4e:	f240 4257 	movw	r2, #1111	; 0x457
 8010c52:	493a      	ldr	r1, [pc, #232]	; (8010d3c <etharp_raw+0x108>)
 8010c54:	483a      	ldr	r0, [pc, #232]	; (8010d40 <etharp_raw+0x10c>)
 8010c56:	f001 fc7f 	bl	8012558 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010c5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c5e:	211c      	movs	r1, #28
 8010c60:	200e      	movs	r0, #14
 8010c62:	f7f5 ff23 	bl	8006aac <pbuf_alloc>
 8010c66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d102      	bne.n	8010c74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c72:	e05d      	b.n	8010d30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	895b      	ldrh	r3, [r3, #10]
 8010c78:	2b1b      	cmp	r3, #27
 8010c7a:	d806      	bhi.n	8010c8a <etharp_raw+0x56>
 8010c7c:	4b2e      	ldr	r3, [pc, #184]	; (8010d38 <etharp_raw+0x104>)
 8010c7e:	f240 4263 	movw	r2, #1123	; 0x463
 8010c82:	4930      	ldr	r1, [pc, #192]	; (8010d44 <etharp_raw+0x110>)
 8010c84:	482e      	ldr	r0, [pc, #184]	; (8010d40 <etharp_raw+0x10c>)
 8010c86:	f001 fc67 	bl	8012558 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010c8a:	69bb      	ldr	r3, [r7, #24]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7f4 ff12 	bl	8005abc <lwip_htons>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ca6:	2b06      	cmp	r3, #6
 8010ca8:	d006      	beq.n	8010cb8 <etharp_raw+0x84>
 8010caa:	4b23      	ldr	r3, [pc, #140]	; (8010d38 <etharp_raw+0x104>)
 8010cac:	f240 426a 	movw	r2, #1130	; 0x46a
 8010cb0:	4925      	ldr	r1, [pc, #148]	; (8010d48 <etharp_raw+0x114>)
 8010cb2:	4823      	ldr	r0, [pc, #140]	; (8010d40 <etharp_raw+0x10c>)
 8010cb4:	f001 fc50 	bl	8012558 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	3308      	adds	r3, #8
 8010cbc:	2206      	movs	r2, #6
 8010cbe:	6839      	ldr	r1, [r7, #0]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f001 fc36 	bl	8012532 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	3312      	adds	r3, #18
 8010cca:	2206      	movs	r2, #6
 8010ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f001 fc2f 	bl	8012532 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	330e      	adds	r3, #14
 8010cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cda:	6812      	ldr	r2, [r2, #0]
 8010cdc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	3318      	adds	r3, #24
 8010ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ce4:	6812      	ldr	r2, [r2, #0]
 8010ce6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	2200      	movs	r2, #0
 8010cec:	701a      	strb	r2, [r3, #0]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f042 0201 	orr.w	r2, r2, #1
 8010cf4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f042 0208 	orr.w	r2, r2, #8
 8010cfe:	709a      	strb	r2, [r3, #2]
 8010d00:	2200      	movs	r2, #0
 8010d02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	2206      	movs	r2, #6
 8010d08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2204      	movs	r2, #4
 8010d0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010d10:	f640 0306 	movw	r3, #2054	; 0x806
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	69b9      	ldr	r1, [r7, #24]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f001 fb8d 	bl	801243c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010d22:	69b8      	ldr	r0, [r7, #24]
 8010d24:	f7f6 f9a2 	bl	800706c <pbuf_free>
  p = NULL;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010d2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3720      	adds	r7, #32
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	08015d24 	.word	0x08015d24
 8010d3c:	08015e74 	.word	0x08015e74
 8010d40:	08015d9c 	.word	0x08015d9c
 8010d44:	08015f24 	.word	0x08015f24
 8010d48:	08015f58 	.word	0x08015f58

08010d4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b088      	sub	sp, #32
 8010d50:	af04      	add	r7, sp, #16
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010d68:	2201      	movs	r2, #1
 8010d6a:	9203      	str	r2, [sp, #12]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	9202      	str	r2, [sp, #8]
 8010d70:	4a06      	ldr	r2, [pc, #24]	; (8010d8c <etharp_request_dst+0x40>)
 8010d72:	9201      	str	r2, [sp, #4]
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	4603      	mov	r3, r0
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f7ff ff5a 	bl	8010c34 <etharp_raw>
 8010d80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	0801691c 	.word	0x0801691c

08010d90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010d9a:	4a05      	ldr	r2, [pc, #20]	; (8010db0 <etharp_request+0x20>)
 8010d9c:	6839      	ldr	r1, [r7, #0]
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff ffd4 	bl	8010d4c <etharp_request_dst>
 8010da4:	4603      	mov	r3, r0
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	08016914 	.word	0x08016914

08010db4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b08e      	sub	sp, #56	; 0x38
 8010db8:	af04      	add	r7, sp, #16
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010dbe:	4b79      	ldr	r3, [pc, #484]	; (8010fa4 <icmp_input+0x1f0>)
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	f003 030f 	and.w	r3, r3, #15
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010dd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010dd6:	2b13      	cmp	r3, #19
 8010dd8:	f240 80cd 	bls.w	8010f76 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	895b      	ldrh	r3, [r3, #10]
 8010de0:	2b03      	cmp	r3, #3
 8010de2:	f240 80ca 	bls.w	8010f7a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010df0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 80b7 	beq.w	8010f68 <icmp_input+0x1b4>
 8010dfa:	2b08      	cmp	r3, #8
 8010dfc:	f040 80b7 	bne.w	8010f6e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010e00:	4b69      	ldr	r3, [pc, #420]	; (8010fa8 <icmp_input+0x1f4>)
 8010e02:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e04:	4b67      	ldr	r3, [pc, #412]	; (8010fa4 <icmp_input+0x1f0>)
 8010e06:	695b      	ldr	r3, [r3, #20]
 8010e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e0c:	2be0      	cmp	r3, #224	; 0xe0
 8010e0e:	f000 80bb 	beq.w	8010f88 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010e12:	4b64      	ldr	r3, [pc, #400]	; (8010fa4 <icmp_input+0x1f0>)
 8010e14:	695a      	ldr	r2, [r3, #20]
 8010e16:	4b63      	ldr	r3, [pc, #396]	; (8010fa4 <icmp_input+0x1f0>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	f000 fc09 	bl	8011634 <ip4_addr_isbroadcast_u32>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f040 80b1 	bne.w	8010f8c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	891b      	ldrh	r3, [r3, #8]
 8010e2e:	2b07      	cmp	r3, #7
 8010e30:	f240 80a5 	bls.w	8010f7e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e36:	330e      	adds	r3, #14
 8010e38:	4619      	mov	r1, r3
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7f6 f880 	bl	8006f40 <pbuf_add_header>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d04b      	beq.n	8010ede <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	891a      	ldrh	r2, [r3, #8]
 8010e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e4c:	4413      	add	r3, r2
 8010e4e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	891b      	ldrh	r3, [r3, #8]
 8010e54:	8b7a      	ldrh	r2, [r7, #26]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	f0c0 809a 	bcc.w	8010f90 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010e5c:	8b7b      	ldrh	r3, [r7, #26]
 8010e5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e62:	4619      	mov	r1, r3
 8010e64:	200e      	movs	r0, #14
 8010e66:	f7f5 fe21 	bl	8006aac <pbuf_alloc>
 8010e6a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 8090 	beq.w	8010f94 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	895b      	ldrh	r3, [r3, #10]
 8010e78:	461a      	mov	r2, r3
 8010e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e7c:	3308      	adds	r3, #8
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d203      	bcs.n	8010e8a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010e82:	6978      	ldr	r0, [r7, #20]
 8010e84:	f7f6 f8f2 	bl	800706c <pbuf_free>
          goto icmperr;
 8010e88:	e085      	b.n	8010f96 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e92:	4618      	mov	r0, r3
 8010e94:	f001 fb4d 	bl	8012532 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	6978      	ldr	r0, [r7, #20]
 8010e9e:	f7f6 f85f 	bl	8006f60 <pbuf_remove_header>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d009      	beq.n	8010ebc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010ea8:	4b40      	ldr	r3, [pc, #256]	; (8010fac <icmp_input+0x1f8>)
 8010eaa:	22b6      	movs	r2, #182	; 0xb6
 8010eac:	4940      	ldr	r1, [pc, #256]	; (8010fb0 <icmp_input+0x1fc>)
 8010eae:	4841      	ldr	r0, [pc, #260]	; (8010fb4 <icmp_input+0x200>)
 8010eb0:	f001 fb52 	bl	8012558 <iprintf>
          pbuf_free(r);
 8010eb4:	6978      	ldr	r0, [r7, #20]
 8010eb6:	f7f6 f8d9 	bl	800706c <pbuf_free>
          goto icmperr;
 8010eba:	e06c      	b.n	8010f96 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010ebc:	6879      	ldr	r1, [r7, #4]
 8010ebe:	6978      	ldr	r0, [r7, #20]
 8010ec0:	f7f6 f9fc 	bl	80072bc <pbuf_copy>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d003      	beq.n	8010ed2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010eca:	6978      	ldr	r0, [r7, #20]
 8010ecc:	f7f6 f8ce 	bl	800706c <pbuf_free>
          goto icmperr;
 8010ed0:	e061      	b.n	8010f96 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7f6 f8ca 	bl	800706c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	607b      	str	r3, [r7, #4]
 8010edc:	e00f      	b.n	8010efe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ee0:	330e      	adds	r3, #14
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7f6 f83b 	bl	8006f60 <pbuf_remove_header>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d006      	beq.n	8010efe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010ef0:	4b2e      	ldr	r3, [pc, #184]	; (8010fac <icmp_input+0x1f8>)
 8010ef2:	22c7      	movs	r2, #199	; 0xc7
 8010ef4:	4930      	ldr	r1, [pc, #192]	; (8010fb8 <icmp_input+0x204>)
 8010ef6:	482f      	ldr	r0, [pc, #188]	; (8010fb4 <icmp_input+0x200>)
 8010ef8:	f001 fb2e 	bl	8012558 <iprintf>
          goto icmperr;
 8010efc:	e04b      	b.n	8010f96 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7f6 f819 	bl	8006f40 <pbuf_add_header>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d12b      	bne.n	8010f6c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010f22:	4b20      	ldr	r3, [pc, #128]	; (8010fa4 <icmp_input+0x1f0>)
 8010f24:	691a      	ldr	r2, [r3, #16]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	2200      	movs	r2, #0
 8010f34:	709a      	strb	r2, [r3, #2]
 8010f36:	2200      	movs	r2, #0
 8010f38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	22ff      	movs	r2, #255	; 0xff
 8010f3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2200      	movs	r2, #0
 8010f44:	729a      	strb	r2, [r3, #10]
 8010f46:	2200      	movs	r2, #0
 8010f48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	9302      	str	r3, [sp, #8]
 8010f4e:	2301      	movs	r3, #1
 8010f50:	9301      	str	r3, [sp, #4]
 8010f52:	2300      	movs	r3, #0
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	23ff      	movs	r3, #255	; 0xff
 8010f58:	2200      	movs	r2, #0
 8010f5a:	69f9      	ldr	r1, [r7, #28]
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f000 fa91 	bl	8011484 <ip4_output_if>
 8010f62:	4603      	mov	r3, r0
 8010f64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010f66:	e001      	b.n	8010f6c <icmp_input+0x1b8>
      break;
 8010f68:	bf00      	nop
 8010f6a:	e000      	b.n	8010f6e <icmp_input+0x1ba>
      break;
 8010f6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f7f6 f87c 	bl	800706c <pbuf_free>
  return;
 8010f74:	e013      	b.n	8010f9e <icmp_input+0x1ea>
    goto lenerr;
 8010f76:	bf00      	nop
 8010f78:	e002      	b.n	8010f80 <icmp_input+0x1cc>
    goto lenerr;
 8010f7a:	bf00      	nop
 8010f7c:	e000      	b.n	8010f80 <icmp_input+0x1cc>
        goto lenerr;
 8010f7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7f6 f873 	bl	800706c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010f86:	e00a      	b.n	8010f9e <icmp_input+0x1ea>
        goto icmperr;
 8010f88:	bf00      	nop
 8010f8a:	e004      	b.n	8010f96 <icmp_input+0x1e2>
        goto icmperr;
 8010f8c:	bf00      	nop
 8010f8e:	e002      	b.n	8010f96 <icmp_input+0x1e2>
          goto icmperr;
 8010f90:	bf00      	nop
 8010f92:	e000      	b.n	8010f96 <icmp_input+0x1e2>
          goto icmperr;
 8010f94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7f6 f868 	bl	800706c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010f9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010f9e:	3728      	adds	r7, #40	; 0x28
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	20003c24 	.word	0x20003c24
 8010fa8:	20003c38 	.word	0x20003c38
 8010fac:	08015f9c 	.word	0x08015f9c
 8010fb0:	08015fd4 	.word	0x08015fd4
 8010fb4:	0801600c 	.word	0x0801600c
 8010fb8:	08016034 	.word	0x08016034

08010fbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010fc8:	78fb      	ldrb	r3, [r7, #3]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	2103      	movs	r1, #3
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f814 	bl	8010ffc <icmp_send_response>
}
 8010fd4:	bf00      	nop
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010fe8:	78fb      	ldrb	r3, [r7, #3]
 8010fea:	461a      	mov	r2, r3
 8010fec:	210b      	movs	r1, #11
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f804 	bl	8010ffc <icmp_send_response>
}
 8010ff4:	bf00      	nop
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b08c      	sub	sp, #48	; 0x30
 8011000:	af04      	add	r7, sp, #16
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	460b      	mov	r3, r1
 8011006:	70fb      	strb	r3, [r7, #3]
 8011008:	4613      	mov	r3, r2
 801100a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801100c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011010:	2124      	movs	r1, #36	; 0x24
 8011012:	2022      	movs	r0, #34	; 0x22
 8011014:	f7f5 fd4a 	bl	8006aac <pbuf_alloc>
 8011018:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d04c      	beq.n	80110ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	895b      	ldrh	r3, [r3, #10]
 8011024:	2b23      	cmp	r3, #35	; 0x23
 8011026:	d806      	bhi.n	8011036 <icmp_send_response+0x3a>
 8011028:	4b26      	ldr	r3, [pc, #152]	; (80110c4 <icmp_send_response+0xc8>)
 801102a:	f240 1269 	movw	r2, #361	; 0x169
 801102e:	4926      	ldr	r1, [pc, #152]	; (80110c8 <icmp_send_response+0xcc>)
 8011030:	4826      	ldr	r0, [pc, #152]	; (80110cc <icmp_send_response+0xd0>)
 8011032:	f001 fa91 	bl	8012558 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	685b      	ldr	r3, [r3, #4]
 8011040:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	78fa      	ldrb	r2, [r7, #3]
 8011046:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	78ba      	ldrb	r2, [r7, #2]
 801104c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	2200      	movs	r2, #0
 8011052:	711a      	strb	r2, [r3, #4]
 8011054:	2200      	movs	r2, #0
 8011056:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	2200      	movs	r2, #0
 801105c:	719a      	strb	r2, [r3, #6]
 801105e:	2200      	movs	r2, #0
 8011060:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	f103 0008 	add.w	r0, r3, #8
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	221c      	movs	r2, #28
 8011070:	4619      	mov	r1, r3
 8011072:	f001 fa5e 	bl	8012532 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801107c:	f107 030c 	add.w	r3, r7, #12
 8011080:	4618      	mov	r0, r3
 8011082:	f000 f825 	bl	80110d0 <ip4_route>
 8011086:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d011      	beq.n	80110b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	2200      	movs	r2, #0
 8011092:	709a      	strb	r2, [r3, #2]
 8011094:	2200      	movs	r2, #0
 8011096:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011098:	f107 020c 	add.w	r2, r7, #12
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	9302      	str	r3, [sp, #8]
 80110a0:	2301      	movs	r3, #1
 80110a2:	9301      	str	r3, [sp, #4]
 80110a4:	2300      	movs	r3, #0
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	23ff      	movs	r3, #255	; 0xff
 80110aa:	2100      	movs	r1, #0
 80110ac:	69f8      	ldr	r0, [r7, #28]
 80110ae:	f000 f9e9 	bl	8011484 <ip4_output_if>
  }
  pbuf_free(q);
 80110b2:	69f8      	ldr	r0, [r7, #28]
 80110b4:	f7f5 ffda 	bl	800706c <pbuf_free>
 80110b8:	e000      	b.n	80110bc <icmp_send_response+0xc0>
    return;
 80110ba:	bf00      	nop
}
 80110bc:	3720      	adds	r7, #32
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	08015f9c 	.word	0x08015f9c
 80110c8:	08016068 	.word	0x08016068
 80110cc:	0801600c 	.word	0x0801600c

080110d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b085      	sub	sp, #20
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80110d8:	4b33      	ldr	r3, [pc, #204]	; (80111a8 <ip4_route+0xd8>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	60fb      	str	r3, [r7, #12]
 80110de:	e036      	b.n	801114e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80110e6:	f003 0301 	and.w	r3, r3, #1
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d02b      	beq.n	8011148 <ip4_route+0x78>
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80110f6:	089b      	lsrs	r3, r3, #2
 80110f8:	f003 0301 	and.w	r3, r3, #1
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d022      	beq.n	8011148 <ip4_route+0x78>
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	3304      	adds	r3, #4
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d01d      	beq.n	8011148 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	3304      	adds	r3, #4
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	405a      	eors	r2, r3
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	3308      	adds	r3, #8
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4013      	ands	r3, r2
 8011120:	2b00      	cmp	r3, #0
 8011122:	d101      	bne.n	8011128 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	e038      	b.n	801119a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801112e:	f003 0302 	and.w	r3, r3, #2
 8011132:	2b00      	cmp	r3, #0
 8011134:	d108      	bne.n	8011148 <ip4_route+0x78>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	330c      	adds	r3, #12
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	429a      	cmp	r2, r3
 8011142:	d101      	bne.n	8011148 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	e028      	b.n	801119a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	60fb      	str	r3, [r7, #12]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d1c5      	bne.n	80110e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011154:	4b15      	ldr	r3, [pc, #84]	; (80111ac <ip4_route+0xdc>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d01a      	beq.n	8011192 <ip4_route+0xc2>
 801115c:	4b13      	ldr	r3, [pc, #76]	; (80111ac <ip4_route+0xdc>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011164:	f003 0301 	and.w	r3, r3, #1
 8011168:	2b00      	cmp	r3, #0
 801116a:	d012      	beq.n	8011192 <ip4_route+0xc2>
 801116c:	4b0f      	ldr	r3, [pc, #60]	; (80111ac <ip4_route+0xdc>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00a      	beq.n	8011192 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801117c:	4b0b      	ldr	r3, [pc, #44]	; (80111ac <ip4_route+0xdc>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	3304      	adds	r3, #4
 8011182:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011184:	2b00      	cmp	r3, #0
 8011186:	d004      	beq.n	8011192 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	b2db      	uxtb	r3, r3
 801118e:	2b7f      	cmp	r3, #127	; 0x7f
 8011190:	d101      	bne.n	8011196 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011192:	2300      	movs	r3, #0
 8011194:	e001      	b.n	801119a <ip4_route+0xca>
  }

  return netif_default;
 8011196:	4b05      	ldr	r3, [pc, #20]	; (80111ac <ip4_route+0xdc>)
 8011198:	681b      	ldr	r3, [r3, #0]
}
 801119a:	4618      	mov	r0, r3
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	20007178 	.word	0x20007178
 80111ac:	2000717c 	.word	0x2000717c

080111b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111be:	f003 0301 	and.w	r3, r3, #1
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d016      	beq.n	80111f6 <ip4_input_accept+0x46>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	3304      	adds	r3, #4
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d011      	beq.n	80111f6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80111d2:	4b0b      	ldr	r3, [pc, #44]	; (8011200 <ip4_input_accept+0x50>)
 80111d4:	695a      	ldr	r2, [r3, #20]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3304      	adds	r3, #4
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d008      	beq.n	80111f2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <ip4_input_accept+0x50>)
 80111e2:	695b      	ldr	r3, [r3, #20]
 80111e4:	6879      	ldr	r1, [r7, #4]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f000 fa24 	bl	8011634 <ip4_addr_isbroadcast_u32>
 80111ec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d001      	beq.n	80111f6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80111f2:	2301      	movs	r3, #1
 80111f4:	e000      	b.n	80111f8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80111f6:	2300      	movs	r3, #0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	20003c24 	.word	0x20003c24

08011204 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b088      	sub	sp, #32
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801120e:	2301      	movs	r3, #1
 8011210:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	091b      	lsrs	r3, r3, #4
 801121e:	b2db      	uxtb	r3, r3
 8011220:	2b04      	cmp	r3, #4
 8011222:	d004      	beq.n	801122e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7f5 ff21 	bl	800706c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	e121      	b.n	8011472 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801122e:	69fb      	ldr	r3, [r7, #28]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	f003 030f 	and.w	r3, r3, #15
 8011236:	b2db      	uxtb	r3, r3
 8011238:	009b      	lsls	r3, r3, #2
 801123a:	b2db      	uxtb	r3, r3
 801123c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	885b      	ldrh	r3, [r3, #2]
 8011242:	b29b      	uxth	r3, r3
 8011244:	4618      	mov	r0, r3
 8011246:	f7f4 fc39 	bl	8005abc <lwip_htons>
 801124a:	4603      	mov	r3, r0
 801124c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	891b      	ldrh	r3, [r3, #8]
 8011252:	8a3a      	ldrh	r2, [r7, #16]
 8011254:	429a      	cmp	r2, r3
 8011256:	d204      	bcs.n	8011262 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011258:	8a3b      	ldrh	r3, [r7, #16]
 801125a:	4619      	mov	r1, r3
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f7f5 fd7f 	bl	8006d60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	895b      	ldrh	r3, [r3, #10]
 8011266:	8a7a      	ldrh	r2, [r7, #18]
 8011268:	429a      	cmp	r2, r3
 801126a:	d807      	bhi.n	801127c <ip4_input+0x78>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	891b      	ldrh	r3, [r3, #8]
 8011270:	8a3a      	ldrh	r2, [r7, #16]
 8011272:	429a      	cmp	r2, r3
 8011274:	d802      	bhi.n	801127c <ip4_input+0x78>
 8011276:	8a7b      	ldrh	r3, [r7, #18]
 8011278:	2b13      	cmp	r3, #19
 801127a:	d804      	bhi.n	8011286 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7f5 fef5 	bl	800706c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011282:	2300      	movs	r3, #0
 8011284:	e0f5      	b.n	8011472 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	4a7c      	ldr	r2, [pc, #496]	; (801147c <ip4_input+0x278>)
 801128c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	4a7a      	ldr	r2, [pc, #488]	; (801147c <ip4_input+0x278>)
 8011294:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011296:	4b79      	ldr	r3, [pc, #484]	; (801147c <ip4_input+0x278>)
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801129e:	2be0      	cmp	r3, #224	; 0xe0
 80112a0:	d112      	bne.n	80112c8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112a8:	f003 0301 	and.w	r3, r3, #1
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d007      	beq.n	80112c2 <ip4_input+0xbe>
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	3304      	adds	r3, #4
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d002      	beq.n	80112c2 <ip4_input+0xbe>
      netif = inp;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	61bb      	str	r3, [r7, #24]
 80112c0:	e02a      	b.n	8011318 <ip4_input+0x114>
    } else {
      netif = NULL;
 80112c2:	2300      	movs	r3, #0
 80112c4:	61bb      	str	r3, [r7, #24]
 80112c6:	e027      	b.n	8011318 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80112c8:	6838      	ldr	r0, [r7, #0]
 80112ca:	f7ff ff71 	bl	80111b0 <ip4_input_accept>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <ip4_input+0xd6>
      netif = inp;
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	61bb      	str	r3, [r7, #24]
 80112d8:	e01e      	b.n	8011318 <ip4_input+0x114>
    } else {
      netif = NULL;
 80112da:	2300      	movs	r3, #0
 80112dc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80112de:	4b67      	ldr	r3, [pc, #412]	; (801147c <ip4_input+0x278>)
 80112e0:	695b      	ldr	r3, [r3, #20]
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	2b7f      	cmp	r3, #127	; 0x7f
 80112e6:	d017      	beq.n	8011318 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80112e8:	4b65      	ldr	r3, [pc, #404]	; (8011480 <ip4_input+0x27c>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	61bb      	str	r3, [r7, #24]
 80112ee:	e00e      	b.n	801130e <ip4_input+0x10a>
          if (netif == inp) {
 80112f0:	69ba      	ldr	r2, [r7, #24]
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d006      	beq.n	8011306 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80112f8:	69b8      	ldr	r0, [r7, #24]
 80112fa:	f7ff ff59 	bl	80111b0 <ip4_input_accept>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d108      	bne.n	8011316 <ip4_input+0x112>
 8011304:	e000      	b.n	8011308 <ip4_input+0x104>
            continue;
 8011306:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	61bb      	str	r3, [r7, #24]
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d1ed      	bne.n	80112f0 <ip4_input+0xec>
 8011314:	e000      	b.n	8011318 <ip4_input+0x114>
            break;
 8011316:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d111      	bne.n	8011342 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	7a5b      	ldrb	r3, [r3, #9]
 8011322:	2b11      	cmp	r3, #17
 8011324:	d10d      	bne.n	8011342 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011326:	8a7b      	ldrh	r3, [r7, #18]
 8011328:	69fa      	ldr	r2, [r7, #28]
 801132a:	4413      	add	r3, r2
 801132c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	885b      	ldrh	r3, [r3, #2]
 8011332:	b29b      	uxth	r3, r3
 8011334:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011338:	d103      	bne.n	8011342 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801133e:	2300      	movs	r3, #0
 8011340:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d017      	beq.n	8011378 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011348:	4b4c      	ldr	r3, [pc, #304]	; (801147c <ip4_input+0x278>)
 801134a:	691b      	ldr	r3, [r3, #16]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d013      	beq.n	8011378 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011350:	4b4a      	ldr	r3, [pc, #296]	; (801147c <ip4_input+0x278>)
 8011352:	691b      	ldr	r3, [r3, #16]
 8011354:	6839      	ldr	r1, [r7, #0]
 8011356:	4618      	mov	r0, r3
 8011358:	f000 f96c 	bl	8011634 <ip4_addr_isbroadcast_u32>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d105      	bne.n	801136e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011362:	4b46      	ldr	r3, [pc, #280]	; (801147c <ip4_input+0x278>)
 8011364:	691b      	ldr	r3, [r3, #16]
 8011366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801136a:	2be0      	cmp	r3, #224	; 0xe0
 801136c:	d104      	bne.n	8011378 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f7f5 fe7c 	bl	800706c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	e07c      	b.n	8011472 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d104      	bne.n	8011388 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7f5 fe74 	bl	800706c <pbuf_free>
    return ERR_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	e074      	b.n	8011472 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	88db      	ldrh	r3, [r3, #6]
 801138c:	b29b      	uxth	r3, r3
 801138e:	461a      	mov	r2, r3
 8011390:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011394:	4013      	ands	r3, r2
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00b      	beq.n	80113b2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 fc90 	bl	8011cc0 <ip4_reass>
 80113a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d101      	bne.n	80113ac <ip4_input+0x1a8>
      return ERR_OK;
 80113a8:	2300      	movs	r3, #0
 80113aa:	e062      	b.n	8011472 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80113b2:	4a32      	ldr	r2, [pc, #200]	; (801147c <ip4_input+0x278>)
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80113b8:	4a30      	ldr	r2, [pc, #192]	; (801147c <ip4_input+0x278>)
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80113be:	4a2f      	ldr	r2, [pc, #188]	; (801147c <ip4_input+0x278>)
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	f003 030f 	and.w	r3, r3, #15
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	4b29      	ldr	r3, [pc, #164]	; (801147c <ip4_input+0x278>)
 80113d6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80113d8:	8a7b      	ldrh	r3, [r7, #18]
 80113da:	4619      	mov	r1, r3
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7f5 fdbf 	bl	8006f60 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	7a5b      	ldrb	r3, [r3, #9]
 80113e6:	2b06      	cmp	r3, #6
 80113e8:	d009      	beq.n	80113fe <ip4_input+0x1fa>
 80113ea:	2b11      	cmp	r3, #17
 80113ec:	d002      	beq.n	80113f4 <ip4_input+0x1f0>
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d00a      	beq.n	8011408 <ip4_input+0x204>
 80113f2:	e00e      	b.n	8011412 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80113f4:	6839      	ldr	r1, [r7, #0]
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f7fc fb28 	bl	800da4c <udp_input>
        break;
 80113fc:	e026      	b.n	801144c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7f7 ff05 	bl	8009210 <tcp_input>
        break;
 8011406:	e021      	b.n	801144c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff fcd2 	bl	8010db4 <icmp_input>
        break;
 8011410:	e01c      	b.n	801144c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011412:	4b1a      	ldr	r3, [pc, #104]	; (801147c <ip4_input+0x278>)
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	69b9      	ldr	r1, [r7, #24]
 8011418:	4618      	mov	r0, r3
 801141a:	f000 f90b 	bl	8011634 <ip4_addr_isbroadcast_u32>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d10f      	bne.n	8011444 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011424:	4b15      	ldr	r3, [pc, #84]	; (801147c <ip4_input+0x278>)
 8011426:	695b      	ldr	r3, [r3, #20]
 8011428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801142c:	2be0      	cmp	r3, #224	; 0xe0
 801142e:	d009      	beq.n	8011444 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7f5 fe05 	bl	8007046 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801143c:	2102      	movs	r1, #2
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff fdbc 	bl	8010fbc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7f5 fe11 	bl	800706c <pbuf_free>
        break;
 801144a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801144c:	4b0b      	ldr	r3, [pc, #44]	; (801147c <ip4_input+0x278>)
 801144e:	2200      	movs	r2, #0
 8011450:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011452:	4b0a      	ldr	r3, [pc, #40]	; (801147c <ip4_input+0x278>)
 8011454:	2200      	movs	r2, #0
 8011456:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011458:	4b08      	ldr	r3, [pc, #32]	; (801147c <ip4_input+0x278>)
 801145a:	2200      	movs	r2, #0
 801145c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801145e:	4b07      	ldr	r3, [pc, #28]	; (801147c <ip4_input+0x278>)
 8011460:	2200      	movs	r2, #0
 8011462:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011464:	4b05      	ldr	r3, [pc, #20]	; (801147c <ip4_input+0x278>)
 8011466:	2200      	movs	r2, #0
 8011468:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801146a:	4b04      	ldr	r3, [pc, #16]	; (801147c <ip4_input+0x278>)
 801146c:	2200      	movs	r2, #0
 801146e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3720      	adds	r7, #32
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	20003c24 	.word	0x20003c24
 8011480:	20007178 	.word	0x20007178

08011484 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08a      	sub	sp, #40	; 0x28
 8011488:	af04      	add	r7, sp, #16
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	607a      	str	r2, [r7, #4]
 8011490:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d009      	beq.n	80114b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d003      	beq.n	80114aa <ip4_output_if+0x26>
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80114aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ac:	3304      	adds	r3, #4
 80114ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80114b0:	78fa      	ldrb	r2, [r7, #3]
 80114b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b4:	9302      	str	r3, [sp, #8]
 80114b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80114ba:	9301      	str	r3, [sp, #4]
 80114bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	4613      	mov	r3, r2
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	6979      	ldr	r1, [r7, #20]
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	f000 f805 	bl	80114d8 <ip4_output_if_src>
 80114ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3718      	adds	r7, #24
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	7b9b      	ldrb	r3, [r3, #14]
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d006      	beq.n	80114fc <ip4_output_if_src+0x24>
 80114ee:	4b4b      	ldr	r3, [pc, #300]	; (801161c <ip4_output_if_src+0x144>)
 80114f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80114f4:	494a      	ldr	r1, [pc, #296]	; (8011620 <ip4_output_if_src+0x148>)
 80114f6:	484b      	ldr	r0, [pc, #300]	; (8011624 <ip4_output_if_src+0x14c>)
 80114f8:	f001 f82e 	bl	8012558 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d060      	beq.n	80115c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011502:	2314      	movs	r3, #20
 8011504:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011506:	2114      	movs	r1, #20
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f7f5 fd19 	bl	8006f40 <pbuf_add_header>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d002      	beq.n	801151a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011514:	f06f 0301 	mvn.w	r3, #1
 8011518:	e07c      	b.n	8011614 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	895b      	ldrh	r3, [r3, #10]
 8011524:	2b13      	cmp	r3, #19
 8011526:	d806      	bhi.n	8011536 <ip4_output_if_src+0x5e>
 8011528:	4b3c      	ldr	r3, [pc, #240]	; (801161c <ip4_output_if_src+0x144>)
 801152a:	f240 3289 	movw	r2, #905	; 0x389
 801152e:	493e      	ldr	r1, [pc, #248]	; (8011628 <ip4_output_if_src+0x150>)
 8011530:	483c      	ldr	r0, [pc, #240]	; (8011624 <ip4_output_if_src+0x14c>)
 8011532:	f001 f811 	bl	8012558 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	78fa      	ldrb	r2, [r7, #3]
 801153a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011542:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801154c:	8b7b      	ldrh	r3, [r7, #26]
 801154e:	089b      	lsrs	r3, r3, #2
 8011550:	b29b      	uxth	r3, r3
 8011552:	b2db      	uxtb	r3, r3
 8011554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011558:	b2da      	uxtb	r2, r3
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011564:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	891b      	ldrh	r3, [r3, #8]
 801156a:	4618      	mov	r0, r3
 801156c:	f7f4 faa6 	bl	8005abc <lwip_htons>
 8011570:	4603      	mov	r3, r0
 8011572:	461a      	mov	r2, r3
 8011574:	69fb      	ldr	r3, [r7, #28]
 8011576:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	2200      	movs	r2, #0
 801157c:	719a      	strb	r2, [r3, #6]
 801157e:	2200      	movs	r2, #0
 8011580:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011582:	4b2a      	ldr	r3, [pc, #168]	; (801162c <ip4_output_if_src+0x154>)
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	4618      	mov	r0, r3
 8011588:	f7f4 fa98 	bl	8005abc <lwip_htons>
 801158c:	4603      	mov	r3, r0
 801158e:	461a      	mov	r2, r3
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011594:	4b25      	ldr	r3, [pc, #148]	; (801162c <ip4_output_if_src+0x154>)
 8011596:	881b      	ldrh	r3, [r3, #0]
 8011598:	3301      	adds	r3, #1
 801159a:	b29a      	uxth	r2, r3
 801159c:	4b23      	ldr	r3, [pc, #140]	; (801162c <ip4_output_if_src+0x154>)
 801159e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d104      	bne.n	80115b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80115a6:	4b22      	ldr	r3, [pc, #136]	; (8011630 <ip4_output_if_src+0x158>)
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	60da      	str	r2, [r3, #12]
 80115ae:	e003      	b.n	80115b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	2200      	movs	r2, #0
 80115bc:	729a      	strb	r2, [r3, #10]
 80115be:	2200      	movs	r2, #0
 80115c0:	72da      	strb	r2, [r3, #11]
 80115c2:	e00f      	b.n	80115e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	895b      	ldrh	r3, [r3, #10]
 80115c8:	2b13      	cmp	r3, #19
 80115ca:	d802      	bhi.n	80115d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80115cc:	f06f 0301 	mvn.w	r3, #1
 80115d0:	e020      	b.n	8011614 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80115de:	f107 0314 	add.w	r3, r7, #20
 80115e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80115e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00c      	beq.n	8011606 <ip4_output_if_src+0x12e>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	891a      	ldrh	r2, [r3, #8]
 80115f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d906      	bls.n	8011606 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f000 fd4b 	bl	8012098 <ip4_frag>
 8011602:	4603      	mov	r3, r0
 8011604:	e006      	b.n	8011614 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011608:	695b      	ldr	r3, [r3, #20]
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	68f9      	ldr	r1, [r7, #12]
 801160e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011610:	4798      	blx	r3
 8011612:	4603      	mov	r3, r0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3720      	adds	r7, #32
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	08016094 	.word	0x08016094
 8011620:	080160c8 	.word	0x080160c8
 8011624:	080160d4 	.word	0x080160d4
 8011628:	080160fc 	.word	0x080160fc
 801162c:	2000065a 	.word	0x2000065a
 8011630:	0801690c 	.word	0x0801690c

08011634 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011634:	b480      	push	{r7}
 8011636:	b085      	sub	sp, #20
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011648:	d002      	beq.n	8011650 <ip4_addr_isbroadcast_u32+0x1c>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d101      	bne.n	8011654 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011650:	2301      	movs	r3, #1
 8011652:	e02a      	b.n	80116aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801165a:	f003 0302 	and.w	r3, r3, #2
 801165e:	2b00      	cmp	r3, #0
 8011660:	d101      	bne.n	8011666 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011662:	2300      	movs	r3, #0
 8011664:	e021      	b.n	80116aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	3304      	adds	r3, #4
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	429a      	cmp	r2, r3
 8011670:	d101      	bne.n	8011676 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011672:	2300      	movs	r3, #0
 8011674:	e019      	b.n	80116aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011676:	68fa      	ldr	r2, [r7, #12]
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	3304      	adds	r3, #4
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	405a      	eors	r2, r3
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	3308      	adds	r3, #8
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4013      	ands	r3, r2
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10d      	bne.n	80116a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	3308      	adds	r3, #8
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	43da      	mvns	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	3308      	adds	r3, #8
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d101      	bne.n	80116a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80116a4:	2301      	movs	r3, #1
 80116a6:	e000      	b.n	80116aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80116a8:	2300      	movs	r3, #0
  }
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3714      	adds	r7, #20
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
	...

080116b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80116be:	2300      	movs	r3, #0
 80116c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80116c2:	4b12      	ldr	r3, [pc, #72]	; (801170c <ip_reass_tmr+0x54>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80116c8:	e018      	b.n	80116fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	7fdb      	ldrb	r3, [r3, #31]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00b      	beq.n	80116ea <ip_reass_tmr+0x32>
      r->timer--;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	7fdb      	ldrb	r3, [r3, #31]
 80116d6:	3b01      	subs	r3, #1
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	60fb      	str	r3, [r7, #12]
 80116e8:	e008      	b.n	80116fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80116f4:	68b9      	ldr	r1, [r7, #8]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 f80a 	bl	8011710 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d1e3      	bne.n	80116ca <ip_reass_tmr+0x12>
    }
  }
}
 8011702:	bf00      	nop
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	2000065c 	.word	0x2000065c

08011710 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801171a:	2300      	movs	r3, #0
 801171c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801171e:	683a      	ldr	r2, [r7, #0]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	429a      	cmp	r2, r3
 8011724:	d105      	bne.n	8011732 <ip_reass_free_complete_datagram+0x22>
 8011726:	4b45      	ldr	r3, [pc, #276]	; (801183c <ip_reass_free_complete_datagram+0x12c>)
 8011728:	22ab      	movs	r2, #171	; 0xab
 801172a:	4945      	ldr	r1, [pc, #276]	; (8011840 <ip_reass_free_complete_datagram+0x130>)
 801172c:	4845      	ldr	r0, [pc, #276]	; (8011844 <ip_reass_free_complete_datagram+0x134>)
 801172e:	f000 ff13 	bl	8012558 <iprintf>
  if (prev != NULL) {
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00a      	beq.n	801174e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d005      	beq.n	801174e <ip_reass_free_complete_datagram+0x3e>
 8011742:	4b3e      	ldr	r3, [pc, #248]	; (801183c <ip_reass_free_complete_datagram+0x12c>)
 8011744:	22ad      	movs	r2, #173	; 0xad
 8011746:	4940      	ldr	r1, [pc, #256]	; (8011848 <ip_reass_free_complete_datagram+0x138>)
 8011748:	483e      	ldr	r0, [pc, #248]	; (8011844 <ip_reass_free_complete_datagram+0x134>)
 801174a:	f000 ff05 	bl	8012558 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	889b      	ldrh	r3, [r3, #4]
 801175a:	b29b      	uxth	r3, r3
 801175c:	2b00      	cmp	r3, #0
 801175e:	d12a      	bne.n	80117b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	6858      	ldr	r0, [r3, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3308      	adds	r3, #8
 8011776:	2214      	movs	r2, #20
 8011778:	4619      	mov	r1, r3
 801177a:	f000 feda 	bl	8012532 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801177e:	2101      	movs	r1, #1
 8011780:	69b8      	ldr	r0, [r7, #24]
 8011782:	f7ff fc2b 	bl	8010fdc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011786:	69b8      	ldr	r0, [r7, #24]
 8011788:	f7f5 fcf8 	bl	800717c <pbuf_clen>
 801178c:	4603      	mov	r3, r0
 801178e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011790:	8bfa      	ldrh	r2, [r7, #30]
 8011792:	8a7b      	ldrh	r3, [r7, #18]
 8011794:	4413      	add	r3, r2
 8011796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801179a:	db05      	blt.n	80117a8 <ip_reass_free_complete_datagram+0x98>
 801179c:	4b27      	ldr	r3, [pc, #156]	; (801183c <ip_reass_free_complete_datagram+0x12c>)
 801179e:	22bc      	movs	r2, #188	; 0xbc
 80117a0:	492a      	ldr	r1, [pc, #168]	; (801184c <ip_reass_free_complete_datagram+0x13c>)
 80117a2:	4828      	ldr	r0, [pc, #160]	; (8011844 <ip_reass_free_complete_datagram+0x134>)
 80117a4:	f000 fed8 	bl	8012558 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80117a8:	8bfa      	ldrh	r2, [r7, #30]
 80117aa:	8a7b      	ldrh	r3, [r7, #18]
 80117ac:	4413      	add	r3, r2
 80117ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80117b0:	69b8      	ldr	r0, [r7, #24]
 80117b2:	f7f5 fc5b 	bl	800706c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80117bc:	e01f      	b.n	80117fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7f5 fcd4 	bl	800717c <pbuf_clen>
 80117d4:	4603      	mov	r3, r0
 80117d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80117d8:	8bfa      	ldrh	r2, [r7, #30]
 80117da:	8a7b      	ldrh	r3, [r7, #18]
 80117dc:	4413      	add	r3, r2
 80117de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117e2:	db05      	blt.n	80117f0 <ip_reass_free_complete_datagram+0xe0>
 80117e4:	4b15      	ldr	r3, [pc, #84]	; (801183c <ip_reass_free_complete_datagram+0x12c>)
 80117e6:	22cc      	movs	r2, #204	; 0xcc
 80117e8:	4918      	ldr	r1, [pc, #96]	; (801184c <ip_reass_free_complete_datagram+0x13c>)
 80117ea:	4816      	ldr	r0, [pc, #88]	; (8011844 <ip_reass_free_complete_datagram+0x134>)
 80117ec:	f000 feb4 	bl	8012558 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80117f0:	8bfa      	ldrh	r2, [r7, #30]
 80117f2:	8a7b      	ldrh	r3, [r7, #18]
 80117f4:	4413      	add	r3, r2
 80117f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f7f5 fc37 	bl	800706c <pbuf_free>
  while (p != NULL) {
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1dc      	bne.n	80117be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011804:	6839      	ldr	r1, [r7, #0]
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 f8c2 	bl	8011990 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801180c:	4b10      	ldr	r3, [pc, #64]	; (8011850 <ip_reass_free_complete_datagram+0x140>)
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	8bfa      	ldrh	r2, [r7, #30]
 8011812:	429a      	cmp	r2, r3
 8011814:	d905      	bls.n	8011822 <ip_reass_free_complete_datagram+0x112>
 8011816:	4b09      	ldr	r3, [pc, #36]	; (801183c <ip_reass_free_complete_datagram+0x12c>)
 8011818:	22d2      	movs	r2, #210	; 0xd2
 801181a:	490e      	ldr	r1, [pc, #56]	; (8011854 <ip_reass_free_complete_datagram+0x144>)
 801181c:	4809      	ldr	r0, [pc, #36]	; (8011844 <ip_reass_free_complete_datagram+0x134>)
 801181e:	f000 fe9b 	bl	8012558 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011822:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <ip_reass_free_complete_datagram+0x140>)
 8011824:	881a      	ldrh	r2, [r3, #0]
 8011826:	8bfb      	ldrh	r3, [r7, #30]
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	b29a      	uxth	r2, r3
 801182c:	4b08      	ldr	r3, [pc, #32]	; (8011850 <ip_reass_free_complete_datagram+0x140>)
 801182e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011830:	8bfb      	ldrh	r3, [r7, #30]
}
 8011832:	4618      	mov	r0, r3
 8011834:	3720      	adds	r7, #32
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	0801612c 	.word	0x0801612c
 8011840:	08016168 	.word	0x08016168
 8011844:	08016174 	.word	0x08016174
 8011848:	0801619c 	.word	0x0801619c
 801184c:	080161b0 	.word	0x080161b0
 8011850:	20000660 	.word	0x20000660
 8011854:	080161d0 	.word	0x080161d0

08011858 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b08a      	sub	sp, #40	; 0x28
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011862:	2300      	movs	r3, #0
 8011864:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011866:	2300      	movs	r3, #0
 8011868:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801186a:	2300      	movs	r3, #0
 801186c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801186e:	2300      	movs	r3, #0
 8011870:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011872:	2300      	movs	r3, #0
 8011874:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011876:	4b28      	ldr	r3, [pc, #160]	; (8011918 <ip_reass_remove_oldest_datagram+0xc0>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801187c:	e030      	b.n	80118e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011880:	695a      	ldr	r2, [r3, #20]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	429a      	cmp	r2, r3
 8011888:	d10c      	bne.n	80118a4 <ip_reass_remove_oldest_datagram+0x4c>
 801188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188c:	699a      	ldr	r2, [r3, #24]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	429a      	cmp	r2, r3
 8011894:	d106      	bne.n	80118a4 <ip_reass_remove_oldest_datagram+0x4c>
 8011896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011898:	899a      	ldrh	r2, [r3, #12]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	889b      	ldrh	r3, [r3, #4]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d014      	beq.n	80118ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	3301      	adds	r3, #1
 80118a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	61bb      	str	r3, [r7, #24]
 80118b8:	e009      	b.n	80118ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80118ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118bc:	7fda      	ldrb	r2, [r3, #31]
 80118be:	6a3b      	ldr	r3, [r7, #32]
 80118c0:	7fdb      	ldrb	r3, [r3, #31]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d803      	bhi.n	80118ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80118c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80118ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d001      	beq.n	80118da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80118d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80118e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d1cb      	bne.n	801187e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d008      	beq.n	80118fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80118ec:	69b9      	ldr	r1, [r7, #24]
 80118ee:	6a38      	ldr	r0, [r7, #32]
 80118f0:	f7ff ff0e 	bl	8011710 <ip_reass_free_complete_datagram>
 80118f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80118f6:	697a      	ldr	r2, [r7, #20]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	4413      	add	r3, r2
 80118fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80118fe:	697a      	ldr	r2, [r7, #20]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	429a      	cmp	r2, r3
 8011904:	da02      	bge.n	801190c <ip_reass_remove_oldest_datagram+0xb4>
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	2b01      	cmp	r3, #1
 801190a:	dcac      	bgt.n	8011866 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801190c:	697b      	ldr	r3, [r7, #20]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3728      	adds	r7, #40	; 0x28
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop
 8011918:	2000065c 	.word	0x2000065c

0801191c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011926:	2004      	movs	r0, #4
 8011928:	f7f4 fd54 	bl	80063d4 <memp_malloc>
 801192c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d110      	bne.n	8011956 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011934:	6839      	ldr	r1, [r7, #0]
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7ff ff8e 	bl	8011858 <ip_reass_remove_oldest_datagram>
 801193c:	4602      	mov	r2, r0
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	4293      	cmp	r3, r2
 8011942:	dc03      	bgt.n	801194c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011944:	2004      	movs	r0, #4
 8011946:	f7f4 fd45 	bl	80063d4 <memp_malloc>
 801194a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011952:	2300      	movs	r3, #0
 8011954:	e016      	b.n	8011984 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011956:	2220      	movs	r2, #32
 8011958:	2100      	movs	r1, #0
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f000 fdf4 	bl	8012548 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	220f      	movs	r2, #15
 8011964:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011966:	4b09      	ldr	r3, [pc, #36]	; (801198c <ip_reass_enqueue_new_datagram+0x70>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801196e:	4a07      	ldr	r2, [pc, #28]	; (801198c <ip_reass_enqueue_new_datagram+0x70>)
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	3308      	adds	r3, #8
 8011978:	2214      	movs	r2, #20
 801197a:	6879      	ldr	r1, [r7, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	f000 fdd8 	bl	8012532 <memcpy>
  return ipr;
 8011982:	68fb      	ldr	r3, [r7, #12]
}
 8011984:	4618      	mov	r0, r3
 8011986:	3710      	adds	r7, #16
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	2000065c 	.word	0x2000065c

08011990 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801199a:	4b10      	ldr	r3, [pc, #64]	; (80119dc <ip_reass_dequeue_datagram+0x4c>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d104      	bne.n	80119ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a0c      	ldr	r2, [pc, #48]	; (80119dc <ip_reass_dequeue_datagram+0x4c>)
 80119aa:	6013      	str	r3, [r2, #0]
 80119ac:	e00d      	b.n	80119ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d106      	bne.n	80119c2 <ip_reass_dequeue_datagram+0x32>
 80119b4:	4b0a      	ldr	r3, [pc, #40]	; (80119e0 <ip_reass_dequeue_datagram+0x50>)
 80119b6:	f240 1245 	movw	r2, #325	; 0x145
 80119ba:	490a      	ldr	r1, [pc, #40]	; (80119e4 <ip_reass_dequeue_datagram+0x54>)
 80119bc:	480a      	ldr	r0, [pc, #40]	; (80119e8 <ip_reass_dequeue_datagram+0x58>)
 80119be:	f000 fdcb 	bl	8012558 <iprintf>
    prev->next = ipr->next;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80119ca:	6879      	ldr	r1, [r7, #4]
 80119cc:	2004      	movs	r0, #4
 80119ce:	f7f4 fd4d 	bl	800646c <memp_free>
}
 80119d2:	bf00      	nop
 80119d4:	3708      	adds	r7, #8
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	2000065c 	.word	0x2000065c
 80119e0:	0801612c 	.word	0x0801612c
 80119e4:	080161f4 	.word	0x080161f4
 80119e8:	08016174 	.word	0x08016174

080119ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b08c      	sub	sp, #48	; 0x30
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80119f8:	2300      	movs	r3, #0
 80119fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80119fc:	2301      	movs	r3, #1
 80119fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a06:	69fb      	ldr	r3, [r7, #28]
 8011a08:	885b      	ldrh	r3, [r3, #2]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7f4 f855 	bl	8005abc <lwip_htons>
 8011a12:	4603      	mov	r3, r0
 8011a14:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	f003 030f 	and.w	r3, r3, #15
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011a24:	7e7b      	ldrb	r3, [r7, #25]
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	8b7a      	ldrh	r2, [r7, #26]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d202      	bcs.n	8011a34 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a32:	e135      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011a34:	7e7b      	ldrb	r3, [r7, #25]
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	8b7a      	ldrh	r2, [r7, #26]
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	88db      	ldrh	r3, [r3, #6]
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f4 f839 	bl	8005abc <lwip_htons>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	00db      	lsls	r3, r3, #3
 8011a54:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	2200      	movs	r2, #0
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	2200      	movs	r2, #0
 8011a64:	705a      	strb	r2, [r3, #1]
 8011a66:	2200      	movs	r2, #0
 8011a68:	709a      	strb	r2, [r3, #2]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a70:	8afa      	ldrh	r2, [r7, #22]
 8011a72:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011a74:	8afa      	ldrh	r2, [r7, #22]
 8011a76:	8b7b      	ldrh	r3, [r7, #26]
 8011a78:	4413      	add	r3, r2
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	88db      	ldrh	r3, [r3, #6]
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	8afa      	ldrh	r2, [r7, #22]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d902      	bls.n	8011a92 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a90:	e106      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	627b      	str	r3, [r7, #36]	; 0x24
 8011a98:	e068      	b.n	8011b6c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa2:	889b      	ldrh	r3, [r3, #4]
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	889b      	ldrh	r3, [r3, #4]
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d235      	bcs.n	8011b1c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ab4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d020      	beq.n	8011afe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abe:	889b      	ldrh	r3, [r3, #4]
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac4:	88db      	ldrh	r3, [r3, #6]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d307      	bcc.n	8011adc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	88db      	ldrh	r3, [r3, #6]
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	889b      	ldrh	r3, [r3, #4]
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d902      	bls.n	8011ae2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae0:	e0de      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae4:	68ba      	ldr	r2, [r7, #8]
 8011ae6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aea:	88db      	ldrh	r3, [r3, #6]
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af0:	889b      	ldrh	r3, [r3, #4]
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d03d      	beq.n	8011b74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011af8:	2300      	movs	r3, #0
 8011afa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011afc:	e03a      	b.n	8011b74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	88db      	ldrh	r3, [r3, #6]
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	889b      	ldrh	r3, [r3, #4]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d902      	bls.n	8011b14 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b12:	e0c5      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	68ba      	ldr	r2, [r7, #8]
 8011b18:	605a      	str	r2, [r3, #4]
      break;
 8011b1a:	e02b      	b.n	8011b74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1e:	889b      	ldrh	r3, [r3, #4]
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	889b      	ldrh	r3, [r3, #4]
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d102      	bne.n	8011b32 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b30:	e0b6      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b34:	889b      	ldrh	r3, [r3, #4]
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	88db      	ldrh	r3, [r3, #6]
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d202      	bcs.n	8011b48 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b42:	f04f 33ff 	mov.w	r3, #4294967295
 8011b46:	e0ab      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d009      	beq.n	8011b62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b50:	88db      	ldrh	r3, [r3, #6]
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	889b      	ldrh	r3, [r3, #4]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d001      	beq.n	8011b62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d193      	bne.n	8011a9a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011b72:	e000      	b.n	8011b76 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011b74:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d12d      	bne.n	8011bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d01c      	beq.n	8011bbc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b84:	88db      	ldrh	r3, [r3, #6]
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8a:	889b      	ldrh	r3, [r3, #4]
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d906      	bls.n	8011ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011b92:	4b45      	ldr	r3, [pc, #276]	; (8011ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011b94:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011b98:	4944      	ldr	r1, [pc, #272]	; (8011cac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011b9a:	4845      	ldr	r0, [pc, #276]	; (8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011b9c:	f000 fcdc 	bl	8012558 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba2:	68ba      	ldr	r2, [r7, #8]
 8011ba4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba8:	88db      	ldrh	r3, [r3, #6]
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	889b      	ldrh	r3, [r3, #4]
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d010      	beq.n	8011bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	623b      	str	r3, [r7, #32]
 8011bba:	e00d      	b.n	8011bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d006      	beq.n	8011bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011bc4:	4b38      	ldr	r3, [pc, #224]	; (8011ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011bc6:	f240 12bf 	movw	r2, #447	; 0x1bf
 8011bca:	493a      	ldr	r1, [pc, #232]	; (8011cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011bcc:	4838      	ldr	r0, [pc, #224]	; (8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011bce:	f000 fcc3 	bl	8012558 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d105      	bne.n	8011bea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	7f9b      	ldrb	r3, [r3, #30]
 8011be2:	f003 0301 	and.w	r3, r3, #1
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d059      	beq.n	8011c9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011bea:	6a3b      	ldr	r3, [r7, #32]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d04f      	beq.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d006      	beq.n	8011c06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	889b      	ldrh	r3, [r3, #4]
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011c06:	2300      	movs	r3, #0
 8011c08:	623b      	str	r3, [r7, #32]
 8011c0a:	e041      	b.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011c16:	e012      	b.n	8011c3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c20:	88db      	ldrh	r3, [r3, #6]
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c26:	889b      	ldrh	r3, [r3, #4]
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d002      	beq.n	8011c34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	623b      	str	r3, [r7, #32]
            break;
 8011c32:	e007      	b.n	8011c44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c36:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1e9      	bne.n	8011c18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d022      	beq.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d106      	bne.n	8011c60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011c52:	4b15      	ldr	r3, [pc, #84]	; (8011ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c54:	f240 12df 	movw	r2, #479	; 0x1df
 8011c58:	4917      	ldr	r1, [pc, #92]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011c5a:	4815      	ldr	r0, [pc, #84]	; (8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c5c:	f000 fc7c 	bl	8012558 <iprintf>
          LWIP_ASSERT("sanity check",
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d106      	bne.n	8011c7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011c6c:	4b0e      	ldr	r3, [pc, #56]	; (8011ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011c72:	4911      	ldr	r1, [pc, #68]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011c74:	480e      	ldr	r0, [pc, #56]	; (8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c76:	f000 fc6f 	bl	8012558 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d006      	beq.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011c82:	4b09      	ldr	r3, [pc, #36]	; (8011ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c84:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011c88:	490c      	ldr	r1, [pc, #48]	; (8011cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011c8a:	4809      	ldr	r0, [pc, #36]	; (8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c8c:	f000 fc64 	bl	8012558 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	bf14      	ite	ne
 8011c96:	2301      	movne	r3, #1
 8011c98:	2300      	moveq	r3, #0
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	e000      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3730      	adds	r7, #48	; 0x30
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	0801612c 	.word	0x0801612c
 8011cac:	08016210 	.word	0x08016210
 8011cb0:	08016174 	.word	0x08016174
 8011cb4:	08016230 	.word	0x08016230
 8011cb8:	08016268 	.word	0x08016268
 8011cbc:	08016278 	.word	0x08016278

08011cc0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b08e      	sub	sp, #56	; 0x38
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	f003 030f 	and.w	r3, r3, #15
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b14      	cmp	r3, #20
 8011cde:	f040 8167 	bne.w	8011fb0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce4:	88db      	ldrh	r3, [r3, #6]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f3 fee7 	bl	8005abc <lwip_htons>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfc:	885b      	ldrh	r3, [r3, #2]
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7f3 fedb 	bl	8005abc <lwip_htons>
 8011d06:	4603      	mov	r3, r0
 8011d08:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	f003 030f 	and.w	r3, r3, #15
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d22:	429a      	cmp	r2, r3
 8011d24:	f0c0 8146 	bcc.w	8011fb4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7f5 fa21 	bl	800717c <pbuf_clen>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011d3e:	4ba3      	ldr	r3, [pc, #652]	; (8011fcc <ip4_reass+0x30c>)
 8011d40:	881b      	ldrh	r3, [r3, #0]
 8011d42:	461a      	mov	r2, r3
 8011d44:	8c3b      	ldrh	r3, [r7, #32]
 8011d46:	4413      	add	r3, r2
 8011d48:	2b0a      	cmp	r3, #10
 8011d4a:	dd10      	ble.n	8011d6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011d4c:	8c3b      	ldrh	r3, [r7, #32]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d52:	f7ff fd81 	bl	8011858 <ip_reass_remove_oldest_datagram>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f000 812d 	beq.w	8011fb8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011d5e:	4b9b      	ldr	r3, [pc, #620]	; (8011fcc <ip4_reass+0x30c>)
 8011d60:	881b      	ldrh	r3, [r3, #0]
 8011d62:	461a      	mov	r2, r3
 8011d64:	8c3b      	ldrh	r3, [r7, #32]
 8011d66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011d68:	2b0a      	cmp	r3, #10
 8011d6a:	f300 8125 	bgt.w	8011fb8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011d6e:	4b98      	ldr	r3, [pc, #608]	; (8011fd0 <ip4_reass+0x310>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	633b      	str	r3, [r7, #48]	; 0x30
 8011d74:	e015      	b.n	8011da2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d78:	695a      	ldr	r2, [r3, #20]
 8011d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d10c      	bne.n	8011d9c <ip4_reass+0xdc>
 8011d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d84:	699a      	ldr	r2, [r3, #24]
 8011d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d88:	691b      	ldr	r3, [r3, #16]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d106      	bne.n	8011d9c <ip4_reass+0xdc>
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	899a      	ldrh	r2, [r3, #12]
 8011d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d94:	889b      	ldrh	r3, [r3, #4]
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d006      	beq.n	8011daa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	633b      	str	r3, [r7, #48]	; 0x30
 8011da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1e6      	bne.n	8011d76 <ip4_reass+0xb6>
 8011da8:	e000      	b.n	8011dac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011daa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d109      	bne.n	8011dc6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011db2:	8c3b      	ldrh	r3, [r7, #32]
 8011db4:	4619      	mov	r1, r3
 8011db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011db8:	f7ff fdb0 	bl	801191c <ip_reass_enqueue_new_datagram>
 8011dbc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d11c      	bne.n	8011dfe <ip4_reass+0x13e>
      goto nullreturn;
 8011dc4:	e0f9      	b.n	8011fba <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc8:	88db      	ldrh	r3, [r3, #6]
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7f3 fe75 	bl	8005abc <lwip_htons>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d110      	bne.n	8011dfe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dde:	89db      	ldrh	r3, [r3, #14]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7f3 fe6b 	bl	8005abc <lwip_htons>
 8011de6:	4603      	mov	r3, r0
 8011de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d006      	beq.n	8011dfe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	3308      	adds	r3, #8
 8011df4:	2214      	movs	r2, #20
 8011df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f000 fb9a 	bl	8012532 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e00:	88db      	ldrh	r3, [r3, #6]
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	f003 0320 	and.w	r3, r3, #32
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	bf0c      	ite	eq
 8011e0c:	2301      	moveq	r3, #1
 8011e0e:	2300      	movne	r3, #0
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00e      	beq.n	8011e38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011e1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e1e:	4413      	add	r3, r2
 8011e20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011e22:	8b7a      	ldrh	r2, [r7, #26]
 8011e24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e26:	429a      	cmp	r2, r3
 8011e28:	f0c0 80a0 	bcc.w	8011f6c <ip4_reass+0x2ac>
 8011e2c:	8b7b      	ldrh	r3, [r7, #26]
 8011e2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011e32:	4293      	cmp	r3, r2
 8011e34:	f200 809a 	bhi.w	8011f6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011e38:	69fa      	ldr	r2, [r7, #28]
 8011e3a:	6879      	ldr	r1, [r7, #4]
 8011e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e3e:	f7ff fdd5 	bl	80119ec <ip_reass_chain_frag_into_datagram_and_validate>
 8011e42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4a:	f000 8091 	beq.w	8011f70 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011e4e:	4b5f      	ldr	r3, [pc, #380]	; (8011fcc <ip4_reass+0x30c>)
 8011e50:	881a      	ldrh	r2, [r3, #0]
 8011e52:	8c3b      	ldrh	r3, [r7, #32]
 8011e54:	4413      	add	r3, r2
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	4b5c      	ldr	r3, [pc, #368]	; (8011fcc <ip4_reass+0x30c>)
 8011e5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00d      	beq.n	8011e7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011e62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e66:	4413      	add	r3, r2
 8011e68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	8a7a      	ldrh	r2, [r7, #18]
 8011e6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e72:	7f9b      	ldrb	r3, [r3, #30]
 8011e74:	f043 0301 	orr.w	r3, r3, #1
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d171      	bne.n	8011f68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e86:	8b9b      	ldrh	r3, [r3, #28]
 8011e88:	3314      	adds	r3, #20
 8011e8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea0:	3308      	adds	r3, #8
 8011ea2:	2214      	movs	r2, #20
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ea8:	f000 fb43 	bl	8012532 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011eac:	8a3b      	ldrh	r3, [r7, #16]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7f3 fe04 	bl	8005abc <lwip_htons>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	719a      	strb	r2, [r3, #6]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec8:	2200      	movs	r2, #0
 8011eca:	729a      	strb	r2, [r3, #10]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011ed6:	e00d      	b.n	8011ef4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011ede:	2114      	movs	r1, #20
 8011ee0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011ee2:	f7f5 f83d 	bl	8006f60 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011ee6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7f5 f981 	bl	80071f0 <pbuf_cat>
      r = iprh->next_pbuf;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1ee      	bne.n	8011ed8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011efa:	4b35      	ldr	r3, [pc, #212]	; (8011fd0 <ip4_reass+0x310>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d102      	bne.n	8011f0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011f04:	2300      	movs	r3, #0
 8011f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f08:	e010      	b.n	8011f2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f0a:	4b31      	ldr	r3, [pc, #196]	; (8011fd0 <ip4_reass+0x310>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f10:	e007      	b.n	8011f22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d006      	beq.n	8011f2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1f4      	bne.n	8011f12 <ip4_reass+0x252>
 8011f28:	e000      	b.n	8011f2c <ip4_reass+0x26c>
          break;
 8011f2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f30:	f7ff fd2e 	bl	8011990 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7f5 f921 	bl	800717c <pbuf_clen>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011f3e:	4b23      	ldr	r3, [pc, #140]	; (8011fcc <ip4_reass+0x30c>)
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	8c3a      	ldrh	r2, [r7, #32]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d906      	bls.n	8011f56 <ip4_reass+0x296>
 8011f48:	4b22      	ldr	r3, [pc, #136]	; (8011fd4 <ip4_reass+0x314>)
 8011f4a:	f240 229b 	movw	r2, #667	; 0x29b
 8011f4e:	4922      	ldr	r1, [pc, #136]	; (8011fd8 <ip4_reass+0x318>)
 8011f50:	4822      	ldr	r0, [pc, #136]	; (8011fdc <ip4_reass+0x31c>)
 8011f52:	f000 fb01 	bl	8012558 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011f56:	4b1d      	ldr	r3, [pc, #116]	; (8011fcc <ip4_reass+0x30c>)
 8011f58:	881a      	ldrh	r2, [r3, #0]
 8011f5a:	8c3b      	ldrh	r3, [r7, #32]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	b29a      	uxth	r2, r3
 8011f60:	4b1a      	ldr	r3, [pc, #104]	; (8011fcc <ip4_reass+0x30c>)
 8011f62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	e02c      	b.n	8011fc2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	e02a      	b.n	8011fc2 <ip4_reass+0x302>

nullreturn_ipr:
 8011f6c:	bf00      	nop
 8011f6e:	e000      	b.n	8011f72 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011f70:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d106      	bne.n	8011f86 <ip4_reass+0x2c6>
 8011f78:	4b16      	ldr	r3, [pc, #88]	; (8011fd4 <ip4_reass+0x314>)
 8011f7a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011f7e:	4918      	ldr	r1, [pc, #96]	; (8011fe0 <ip4_reass+0x320>)
 8011f80:	4816      	ldr	r0, [pc, #88]	; (8011fdc <ip4_reass+0x31c>)
 8011f82:	f000 fae9 	bl	8012558 <iprintf>
  if (ipr->p == NULL) {
 8011f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d114      	bne.n	8011fb8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011f8e:	4b10      	ldr	r3, [pc, #64]	; (8011fd0 <ip4_reass+0x310>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d006      	beq.n	8011fa6 <ip4_reass+0x2e6>
 8011f98:	4b0e      	ldr	r3, [pc, #56]	; (8011fd4 <ip4_reass+0x314>)
 8011f9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011f9e:	4911      	ldr	r1, [pc, #68]	; (8011fe4 <ip4_reass+0x324>)
 8011fa0:	480e      	ldr	r0, [pc, #56]	; (8011fdc <ip4_reass+0x31c>)
 8011fa2:	f000 fad9 	bl	8012558 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011faa:	f7ff fcf1 	bl	8011990 <ip_reass_dequeue_datagram>
 8011fae:	e004      	b.n	8011fba <ip4_reass+0x2fa>
    goto nullreturn;
 8011fb0:	bf00      	nop
 8011fb2:	e002      	b.n	8011fba <ip4_reass+0x2fa>
    goto nullreturn;
 8011fb4:	bf00      	nop
 8011fb6:	e000      	b.n	8011fba <ip4_reass+0x2fa>
  }

nullreturn:
 8011fb8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7f5 f856 	bl	800706c <pbuf_free>
  return NULL;
 8011fc0:	2300      	movs	r3, #0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3738      	adds	r7, #56	; 0x38
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	20000660 	.word	0x20000660
 8011fd0:	2000065c 	.word	0x2000065c
 8011fd4:	0801612c 	.word	0x0801612c
 8011fd8:	0801629c 	.word	0x0801629c
 8011fdc:	08016174 	.word	0x08016174
 8011fe0:	080162b8 	.word	0x080162b8
 8011fe4:	080162c4 	.word	0x080162c4

08011fe8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011fec:	2005      	movs	r0, #5
 8011fee:	f7f4 f9f1 	bl	80063d4 <memp_malloc>
 8011ff2:	4603      	mov	r3, r0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d106      	bne.n	8012014 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012006:	4b07      	ldr	r3, [pc, #28]	; (8012024 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012008:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801200c:	4906      	ldr	r1, [pc, #24]	; (8012028 <ip_frag_free_pbuf_custom_ref+0x30>)
 801200e:	4807      	ldr	r0, [pc, #28]	; (801202c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012010:	f000 faa2 	bl	8012558 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012014:	6879      	ldr	r1, [r7, #4]
 8012016:	2005      	movs	r0, #5
 8012018:	f7f4 fa28 	bl	800646c <memp_free>
}
 801201c:	bf00      	nop
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	0801612c 	.word	0x0801612c
 8012028:	080162e4 	.word	0x080162e4
 801202c:	08016174 	.word	0x08016174

08012030 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d106      	bne.n	8012050 <ipfrag_free_pbuf_custom+0x20>
 8012042:	4b11      	ldr	r3, [pc, #68]	; (8012088 <ipfrag_free_pbuf_custom+0x58>)
 8012044:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012048:	4910      	ldr	r1, [pc, #64]	; (801208c <ipfrag_free_pbuf_custom+0x5c>)
 801204a:	4811      	ldr	r0, [pc, #68]	; (8012090 <ipfrag_free_pbuf_custom+0x60>)
 801204c:	f000 fa84 	bl	8012558 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012050:	68fa      	ldr	r2, [r7, #12]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	429a      	cmp	r2, r3
 8012056:	d006      	beq.n	8012066 <ipfrag_free_pbuf_custom+0x36>
 8012058:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <ipfrag_free_pbuf_custom+0x58>)
 801205a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801205e:	490d      	ldr	r1, [pc, #52]	; (8012094 <ipfrag_free_pbuf_custom+0x64>)
 8012060:	480b      	ldr	r0, [pc, #44]	; (8012090 <ipfrag_free_pbuf_custom+0x60>)
 8012062:	f000 fa79 	bl	8012558 <iprintf>
  if (pcr->original != NULL) {
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	695b      	ldr	r3, [r3, #20]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d004      	beq.n	8012078 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	695b      	ldr	r3, [r3, #20]
 8012072:	4618      	mov	r0, r3
 8012074:	f7f4 fffa 	bl	800706c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012078:	68f8      	ldr	r0, [r7, #12]
 801207a:	f7ff ffbd 	bl	8011ff8 <ip_frag_free_pbuf_custom_ref>
}
 801207e:	bf00      	nop
 8012080:	3710      	adds	r7, #16
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	0801612c 	.word	0x0801612c
 801208c:	080162f0 	.word	0x080162f0
 8012090:	08016174 	.word	0x08016174
 8012094:	080162fc 	.word	0x080162fc

08012098 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b094      	sub	sp, #80	; 0x50
 801209c:	af02      	add	r7, sp, #8
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80120a4:	2300      	movs	r3, #0
 80120a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80120ae:	3b14      	subs	r3, #20
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	da00      	bge.n	80120b6 <ip4_frag+0x1e>
 80120b4:	3307      	adds	r3, #7
 80120b6:	10db      	asrs	r3, r3, #3
 80120b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80120ba:	2314      	movs	r3, #20
 80120bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80120c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80120c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	f003 030f 	and.w	r3, r3, #15
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b14      	cmp	r3, #20
 80120d8:	d002      	beq.n	80120e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80120da:	f06f 0305 	mvn.w	r3, #5
 80120de:	e10f      	b.n	8012300 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	895b      	ldrh	r3, [r3, #10]
 80120e4:	2b13      	cmp	r3, #19
 80120e6:	d809      	bhi.n	80120fc <ip4_frag+0x64>
 80120e8:	4b87      	ldr	r3, [pc, #540]	; (8012308 <ip4_frag+0x270>)
 80120ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80120ee:	4987      	ldr	r1, [pc, #540]	; (801230c <ip4_frag+0x274>)
 80120f0:	4887      	ldr	r0, [pc, #540]	; (8012310 <ip4_frag+0x278>)
 80120f2:	f000 fa31 	bl	8012558 <iprintf>
 80120f6:	f06f 0305 	mvn.w	r3, #5
 80120fa:	e101      	b.n	8012300 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80120fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fe:	88db      	ldrh	r3, [r3, #6]
 8012100:	b29b      	uxth	r3, r3
 8012102:	4618      	mov	r0, r3
 8012104:	f7f3 fcda 	bl	8005abc <lwip_htons>
 8012108:	4603      	mov	r3, r0
 801210a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801210c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801210e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012116:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801211c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	891b      	ldrh	r3, [r3, #8]
 8012122:	3b14      	subs	r3, #20
 8012124:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012128:	e0e0      	b.n	80122ec <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801212a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801212c:	00db      	lsls	r3, r3, #3
 801212e:	b29b      	uxth	r3, r3
 8012130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012134:	4293      	cmp	r3, r2
 8012136:	bf28      	it	cs
 8012138:	4613      	movcs	r3, r2
 801213a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801213c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012140:	2114      	movs	r1, #20
 8012142:	200e      	movs	r0, #14
 8012144:	f7f4 fcb2 	bl	8006aac <pbuf_alloc>
 8012148:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214c:	2b00      	cmp	r3, #0
 801214e:	f000 80d4 	beq.w	80122fa <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	895b      	ldrh	r3, [r3, #10]
 8012156:	2b13      	cmp	r3, #19
 8012158:	d806      	bhi.n	8012168 <ip4_frag+0xd0>
 801215a:	4b6b      	ldr	r3, [pc, #428]	; (8012308 <ip4_frag+0x270>)
 801215c:	f240 3225 	movw	r2, #805	; 0x325
 8012160:	496c      	ldr	r1, [pc, #432]	; (8012314 <ip4_frag+0x27c>)
 8012162:	486b      	ldr	r0, [pc, #428]	; (8012310 <ip4_frag+0x278>)
 8012164:	f000 f9f8 	bl	8012558 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	2214      	movs	r2, #20
 801216e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012170:	4618      	mov	r0, r3
 8012172:	f000 f9de 	bl	8012532 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801217c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801217e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012182:	e064      	b.n	801224e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	895a      	ldrh	r2, [r3, #10]
 8012188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	895b      	ldrh	r3, [r3, #10]
 8012192:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012194:	429a      	cmp	r2, r3
 8012196:	d906      	bls.n	80121a6 <ip4_frag+0x10e>
 8012198:	4b5b      	ldr	r3, [pc, #364]	; (8012308 <ip4_frag+0x270>)
 801219a:	f240 322d 	movw	r2, #813	; 0x32d
 801219e:	495e      	ldr	r1, [pc, #376]	; (8012318 <ip4_frag+0x280>)
 80121a0:	485b      	ldr	r0, [pc, #364]	; (8012310 <ip4_frag+0x278>)
 80121a2:	f000 f9d9 	bl	8012558 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80121a6:	8bfa      	ldrh	r2, [r7, #30]
 80121a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80121ac:	4293      	cmp	r3, r2
 80121ae:	bf28      	it	cs
 80121b0:	4613      	movcs	r3, r2
 80121b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80121b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d105      	bne.n	80121ca <ip4_frag+0x132>
        poff = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	60fb      	str	r3, [r7, #12]
        continue;
 80121c8:	e041      	b.n	801224e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80121ca:	f7ff ff0d 	bl	8011fe8 <ip_frag_alloc_pbuf_custom_ref>
 80121ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d103      	bne.n	80121de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80121d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121d8:	f7f4 ff48 	bl	800706c <pbuf_free>
        goto memerr;
 80121dc:	e08e      	b.n	80122fc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80121de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80121e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121e6:	4413      	add	r3, r2
 80121e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80121ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80121f0:	9201      	str	r2, [sp, #4]
 80121f2:	9300      	str	r3, [sp, #0]
 80121f4:	4603      	mov	r3, r0
 80121f6:	2241      	movs	r2, #65	; 0x41
 80121f8:	2000      	movs	r0, #0
 80121fa:	f7f4 fd7d 	bl	8006cf8 <pbuf_alloced_custom>
 80121fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d106      	bne.n	8012214 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012206:	69b8      	ldr	r0, [r7, #24]
 8012208:	f7ff fef6 	bl	8011ff8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801220c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801220e:	f7f4 ff2d 	bl	800706c <pbuf_free>
        goto memerr;
 8012212:	e073      	b.n	80122fc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f7f4 ffc9 	bl	80071ac <pbuf_ref>
      pcr->original = p;
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	4a3e      	ldr	r2, [pc, #248]	; (801231c <ip4_frag+0x284>)
 8012224:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012226:	6979      	ldr	r1, [r7, #20]
 8012228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801222a:	f7f4 ffe1 	bl	80071f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801222e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012236:	1ad3      	subs	r3, r2, r3
 8012238:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801223c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012240:	2b00      	cmp	r3, #0
 8012242:	d004      	beq.n	801224e <ip4_frag+0x1b6>
        poff = 0;
 8012244:	2300      	movs	r3, #0
 8012246:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801224e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012252:	2b00      	cmp	r3, #0
 8012254:	d196      	bne.n	8012184 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012256:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012258:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801225c:	4413      	add	r3, r2
 801225e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012260:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012268:	3b14      	subs	r3, #20
 801226a:	429a      	cmp	r2, r3
 801226c:	bfd4      	ite	le
 801226e:	2301      	movle	r3, #1
 8012270:	2300      	movgt	r3, #0
 8012272:	b2db      	uxtb	r3, r3
 8012274:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012276:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801227a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801227e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012280:	6a3b      	ldr	r3, [r7, #32]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d002      	beq.n	801228c <ip4_frag+0x1f4>
 8012286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012288:	2b00      	cmp	r3, #0
 801228a:	d003      	beq.n	8012294 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801228c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801228e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012292:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012294:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012296:	4618      	mov	r0, r3
 8012298:	f7f3 fc10 	bl	8005abc <lwip_htons>
 801229c:	4603      	mov	r3, r0
 801229e:	461a      	mov	r2, r3
 80122a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80122a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122a6:	3314      	adds	r3, #20
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7f3 fc06 	bl	8005abc <lwip_htons>
 80122b0:	4603      	mov	r3, r0
 80122b2:	461a      	mov	r2, r3
 80122b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80122b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ba:	2200      	movs	r2, #0
 80122bc:	729a      	strb	r2, [r3, #10]
 80122be:	2200      	movs	r2, #0
 80122c0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	695b      	ldr	r3, [r3, #20]
 80122c6:	687a      	ldr	r2, [r7, #4]
 80122c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122ca:	68b8      	ldr	r0, [r7, #8]
 80122cc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80122ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122d0:	f7f4 fecc 	bl	800706c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80122d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80122e0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80122e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122e6:	4413      	add	r3, r2
 80122e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80122ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f47f af1a 	bne.w	801212a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80122f6:	2300      	movs	r3, #0
 80122f8:	e002      	b.n	8012300 <ip4_frag+0x268>
      goto memerr;
 80122fa:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80122fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012300:	4618      	mov	r0, r3
 8012302:	3748      	adds	r7, #72	; 0x48
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	0801612c 	.word	0x0801612c
 801230c:	08016308 	.word	0x08016308
 8012310:	08016174 	.word	0x08016174
 8012314:	08016324 	.word	0x08016324
 8012318:	08016344 	.word	0x08016344
 801231c:	08012031 	.word	0x08012031

08012320 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b086      	sub	sp, #24
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801232a:	230e      	movs	r3, #14
 801232c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	895b      	ldrh	r3, [r3, #10]
 8012332:	2b0e      	cmp	r3, #14
 8012334:	d96e      	bls.n	8012414 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	7bdb      	ldrb	r3, [r3, #15]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012344:	3301      	adds	r3, #1
 8012346:	b2da      	uxtb	r2, r3
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	7b1a      	ldrb	r2, [r3, #12]
 8012356:	7b5b      	ldrb	r3, [r3, #13]
 8012358:	021b      	lsls	r3, r3, #8
 801235a:	4313      	orrs	r3, r2
 801235c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	f003 0301 	and.w	r3, r3, #1
 8012366:	2b00      	cmp	r3, #0
 8012368:	d023      	beq.n	80123b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	2b01      	cmp	r3, #1
 8012370:	d10f      	bne.n	8012392 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	785b      	ldrb	r3, [r3, #1]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d11b      	bne.n	80123b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801237e:	2b5e      	cmp	r3, #94	; 0x5e
 8012380:	d117      	bne.n	80123b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	7b5b      	ldrb	r3, [r3, #13]
 8012386:	f043 0310 	orr.w	r3, r3, #16
 801238a:	b2da      	uxtb	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	735a      	strb	r2, [r3, #13]
 8012390:	e00f      	b.n	80123b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	2206      	movs	r2, #6
 8012396:	4928      	ldr	r1, [pc, #160]	; (8012438 <ethernet_input+0x118>)
 8012398:	4618      	mov	r0, r3
 801239a:	f000 f8bb 	bl	8012514 <memcmp>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d106      	bne.n	80123b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	7b5b      	ldrb	r3, [r3, #13]
 80123a8:	f043 0308 	orr.w	r3, r3, #8
 80123ac:	b2da      	uxtb	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80123b2:	89fb      	ldrh	r3, [r7, #14]
 80123b4:	2b08      	cmp	r3, #8
 80123b6:	d003      	beq.n	80123c0 <ethernet_input+0xa0>
 80123b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80123bc:	d014      	beq.n	80123e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80123be:	e032      	b.n	8012426 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123c6:	f003 0308 	and.w	r3, r3, #8
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d024      	beq.n	8012418 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80123ce:	8afb      	ldrh	r3, [r7, #22]
 80123d0:	4619      	mov	r1, r3
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f7f4 fdc4 	bl	8006f60 <pbuf_remove_header>
 80123d8:	4603      	mov	r3, r0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d11e      	bne.n	801241c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80123de:	6839      	ldr	r1, [r7, #0]
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7fe ff0f 	bl	8011204 <ip4_input>
      break;
 80123e6:	e013      	b.n	8012410 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123ee:	f003 0308 	and.w	r3, r3, #8
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d014      	beq.n	8012420 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80123f6:	8afb      	ldrh	r3, [r7, #22]
 80123f8:	4619      	mov	r1, r3
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7f4 fdb0 	bl	8006f60 <pbuf_remove_header>
 8012400:	4603      	mov	r3, r0
 8012402:	2b00      	cmp	r3, #0
 8012404:	d10e      	bne.n	8012424 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f7fe f8ab 	bl	8010564 <etharp_input>
      break;
 801240e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012410:	2300      	movs	r3, #0
 8012412:	e00c      	b.n	801242e <ethernet_input+0x10e>
    goto free_and_return;
 8012414:	bf00      	nop
 8012416:	e006      	b.n	8012426 <ethernet_input+0x106>
        goto free_and_return;
 8012418:	bf00      	nop
 801241a:	e004      	b.n	8012426 <ethernet_input+0x106>
        goto free_and_return;
 801241c:	bf00      	nop
 801241e:	e002      	b.n	8012426 <ethernet_input+0x106>
        goto free_and_return;
 8012420:	bf00      	nop
 8012422:	e000      	b.n	8012426 <ethernet_input+0x106>
        goto free_and_return;
 8012424:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f7f4 fe20 	bl	800706c <pbuf_free>
  return ERR_OK;
 801242c:	2300      	movs	r3, #0
}
 801242e:	4618      	mov	r0, r3
 8012430:	3718      	adds	r7, #24
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	08016914 	.word	0x08016914

0801243c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801243c:	b580      	push	{r7, lr}
 801243e:	b086      	sub	sp, #24
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	607a      	str	r2, [r7, #4]
 8012448:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801244a:	8c3b      	ldrh	r3, [r7, #32]
 801244c:	4618      	mov	r0, r3
 801244e:	f7f3 fb35 	bl	8005abc <lwip_htons>
 8012452:	4603      	mov	r3, r0
 8012454:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012456:	210e      	movs	r1, #14
 8012458:	68b8      	ldr	r0, [r7, #8]
 801245a:	f7f4 fd71 	bl	8006f40 <pbuf_add_header>
 801245e:	4603      	mov	r3, r0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d125      	bne.n	80124b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	8afa      	ldrh	r2, [r7, #22]
 801246e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	2206      	movs	r2, #6
 8012474:	6839      	ldr	r1, [r7, #0]
 8012476:	4618      	mov	r0, r3
 8012478:	f000 f85b 	bl	8012532 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	3306      	adds	r3, #6
 8012480:	2206      	movs	r2, #6
 8012482:	6879      	ldr	r1, [r7, #4]
 8012484:	4618      	mov	r0, r3
 8012486:	f000 f854 	bl	8012532 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012490:	2b06      	cmp	r3, #6
 8012492:	d006      	beq.n	80124a2 <ethernet_output+0x66>
 8012494:	4b0a      	ldr	r3, [pc, #40]	; (80124c0 <ethernet_output+0x84>)
 8012496:	f240 1233 	movw	r2, #307	; 0x133
 801249a:	490a      	ldr	r1, [pc, #40]	; (80124c4 <ethernet_output+0x88>)
 801249c:	480a      	ldr	r0, [pc, #40]	; (80124c8 <ethernet_output+0x8c>)
 801249e:	f000 f85b 	bl	8012558 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	68b9      	ldr	r1, [r7, #8]
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	4798      	blx	r3
 80124ac:	4603      	mov	r3, r0
 80124ae:	e002      	b.n	80124b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80124b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80124b2:	f06f 0301 	mvn.w	r3, #1
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3718      	adds	r7, #24
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	08016354 	.word	0x08016354
 80124c4:	0801638c 	.word	0x0801638c
 80124c8:	080163c0 	.word	0x080163c0

080124cc <__libc_init_array>:
 80124cc:	b570      	push	{r4, r5, r6, lr}
 80124ce:	4e0d      	ldr	r6, [pc, #52]	; (8012504 <__libc_init_array+0x38>)
 80124d0:	4c0d      	ldr	r4, [pc, #52]	; (8012508 <__libc_init_array+0x3c>)
 80124d2:	1ba4      	subs	r4, r4, r6
 80124d4:	10a4      	asrs	r4, r4, #2
 80124d6:	2500      	movs	r5, #0
 80124d8:	42a5      	cmp	r5, r4
 80124da:	d109      	bne.n	80124f0 <__libc_init_array+0x24>
 80124dc:	4e0b      	ldr	r6, [pc, #44]	; (801250c <__libc_init_array+0x40>)
 80124de:	4c0c      	ldr	r4, [pc, #48]	; (8012510 <__libc_init_array+0x44>)
 80124e0:	f000 ff7a 	bl	80133d8 <_init>
 80124e4:	1ba4      	subs	r4, r4, r6
 80124e6:	10a4      	asrs	r4, r4, #2
 80124e8:	2500      	movs	r5, #0
 80124ea:	42a5      	cmp	r5, r4
 80124ec:	d105      	bne.n	80124fa <__libc_init_array+0x2e>
 80124ee:	bd70      	pop	{r4, r5, r6, pc}
 80124f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124f4:	4798      	blx	r3
 80124f6:	3501      	adds	r5, #1
 80124f8:	e7ee      	b.n	80124d8 <__libc_init_array+0xc>
 80124fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124fe:	4798      	blx	r3
 8012500:	3501      	adds	r5, #1
 8012502:	e7f2      	b.n	80124ea <__libc_init_array+0x1e>
 8012504:	080169c4 	.word	0x080169c4
 8012508:	080169c4 	.word	0x080169c4
 801250c:	080169c4 	.word	0x080169c4
 8012510:	080169c8 	.word	0x080169c8

08012514 <memcmp>:
 8012514:	b530      	push	{r4, r5, lr}
 8012516:	2400      	movs	r4, #0
 8012518:	42a2      	cmp	r2, r4
 801251a:	d101      	bne.n	8012520 <memcmp+0xc>
 801251c:	2000      	movs	r0, #0
 801251e:	e007      	b.n	8012530 <memcmp+0x1c>
 8012520:	5d03      	ldrb	r3, [r0, r4]
 8012522:	3401      	adds	r4, #1
 8012524:	190d      	adds	r5, r1, r4
 8012526:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801252a:	42ab      	cmp	r3, r5
 801252c:	d0f4      	beq.n	8012518 <memcmp+0x4>
 801252e:	1b58      	subs	r0, r3, r5
 8012530:	bd30      	pop	{r4, r5, pc}

08012532 <memcpy>:
 8012532:	b510      	push	{r4, lr}
 8012534:	1e43      	subs	r3, r0, #1
 8012536:	440a      	add	r2, r1
 8012538:	4291      	cmp	r1, r2
 801253a:	d100      	bne.n	801253e <memcpy+0xc>
 801253c:	bd10      	pop	{r4, pc}
 801253e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012546:	e7f7      	b.n	8012538 <memcpy+0x6>

08012548 <memset>:
 8012548:	4402      	add	r2, r0
 801254a:	4603      	mov	r3, r0
 801254c:	4293      	cmp	r3, r2
 801254e:	d100      	bne.n	8012552 <memset+0xa>
 8012550:	4770      	bx	lr
 8012552:	f803 1b01 	strb.w	r1, [r3], #1
 8012556:	e7f9      	b.n	801254c <memset+0x4>

08012558 <iprintf>:
 8012558:	b40f      	push	{r0, r1, r2, r3}
 801255a:	4b0a      	ldr	r3, [pc, #40]	; (8012584 <iprintf+0x2c>)
 801255c:	b513      	push	{r0, r1, r4, lr}
 801255e:	681c      	ldr	r4, [r3, #0]
 8012560:	b124      	cbz	r4, 801256c <iprintf+0x14>
 8012562:	69a3      	ldr	r3, [r4, #24]
 8012564:	b913      	cbnz	r3, 801256c <iprintf+0x14>
 8012566:	4620      	mov	r0, r4
 8012568:	f000 f8a2 	bl	80126b0 <__sinit>
 801256c:	ab05      	add	r3, sp, #20
 801256e:	9a04      	ldr	r2, [sp, #16]
 8012570:	68a1      	ldr	r1, [r4, #8]
 8012572:	9301      	str	r3, [sp, #4]
 8012574:	4620      	mov	r0, r4
 8012576:	f000 f9ff 	bl	8012978 <_vfiprintf_r>
 801257a:	b002      	add	sp, #8
 801257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012580:	b004      	add	sp, #16
 8012582:	4770      	bx	lr
 8012584:	20000018 	.word	0x20000018

08012588 <rand>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4b13      	ldr	r3, [pc, #76]	; (80125d8 <rand+0x50>)
 801258c:	681c      	ldr	r4, [r3, #0]
 801258e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012590:	b97b      	cbnz	r3, 80125b2 <rand+0x2a>
 8012592:	2018      	movs	r0, #24
 8012594:	f000 f916 	bl	80127c4 <malloc>
 8012598:	4a10      	ldr	r2, [pc, #64]	; (80125dc <rand+0x54>)
 801259a:	4b11      	ldr	r3, [pc, #68]	; (80125e0 <rand+0x58>)
 801259c:	63a0      	str	r0, [r4, #56]	; 0x38
 801259e:	e9c0 2300 	strd	r2, r3, [r0]
 80125a2:	4b10      	ldr	r3, [pc, #64]	; (80125e4 <rand+0x5c>)
 80125a4:	6083      	str	r3, [r0, #8]
 80125a6:	230b      	movs	r3, #11
 80125a8:	8183      	strh	r3, [r0, #12]
 80125aa:	2201      	movs	r2, #1
 80125ac:	2300      	movs	r3, #0
 80125ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80125b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80125b4:	480c      	ldr	r0, [pc, #48]	; (80125e8 <rand+0x60>)
 80125b6:	690a      	ldr	r2, [r1, #16]
 80125b8:	694b      	ldr	r3, [r1, #20]
 80125ba:	4c0c      	ldr	r4, [pc, #48]	; (80125ec <rand+0x64>)
 80125bc:	4350      	muls	r0, r2
 80125be:	fb04 0003 	mla	r0, r4, r3, r0
 80125c2:	fba2 2304 	umull	r2, r3, r2, r4
 80125c6:	4403      	add	r3, r0
 80125c8:	1c54      	adds	r4, r2, #1
 80125ca:	f143 0500 	adc.w	r5, r3, #0
 80125ce:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80125d2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80125d6:	bd38      	pop	{r3, r4, r5, pc}
 80125d8:	20000018 	.word	0x20000018
 80125dc:	abcd330e 	.word	0xabcd330e
 80125e0:	e66d1234 	.word	0xe66d1234
 80125e4:	0005deec 	.word	0x0005deec
 80125e8:	5851f42d 	.word	0x5851f42d
 80125ec:	4c957f2d 	.word	0x4c957f2d

080125f0 <strchr>:
 80125f0:	b2c9      	uxtb	r1, r1
 80125f2:	4603      	mov	r3, r0
 80125f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125f8:	b11a      	cbz	r2, 8012602 <strchr+0x12>
 80125fa:	428a      	cmp	r2, r1
 80125fc:	d1f9      	bne.n	80125f2 <strchr+0x2>
 80125fe:	4618      	mov	r0, r3
 8012600:	4770      	bx	lr
 8012602:	2900      	cmp	r1, #0
 8012604:	bf18      	it	ne
 8012606:	2300      	movne	r3, #0
 8012608:	e7f9      	b.n	80125fe <strchr+0xe>

0801260a <strncmp>:
 801260a:	b510      	push	{r4, lr}
 801260c:	b16a      	cbz	r2, 801262a <strncmp+0x20>
 801260e:	3901      	subs	r1, #1
 8012610:	1884      	adds	r4, r0, r2
 8012612:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012616:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801261a:	4293      	cmp	r3, r2
 801261c:	d103      	bne.n	8012626 <strncmp+0x1c>
 801261e:	42a0      	cmp	r0, r4
 8012620:	d001      	beq.n	8012626 <strncmp+0x1c>
 8012622:	2b00      	cmp	r3, #0
 8012624:	d1f5      	bne.n	8012612 <strncmp+0x8>
 8012626:	1a98      	subs	r0, r3, r2
 8012628:	bd10      	pop	{r4, pc}
 801262a:	4610      	mov	r0, r2
 801262c:	e7fc      	b.n	8012628 <strncmp+0x1e>
	...

08012630 <std>:
 8012630:	2300      	movs	r3, #0
 8012632:	b510      	push	{r4, lr}
 8012634:	4604      	mov	r4, r0
 8012636:	e9c0 3300 	strd	r3, r3, [r0]
 801263a:	6083      	str	r3, [r0, #8]
 801263c:	8181      	strh	r1, [r0, #12]
 801263e:	6643      	str	r3, [r0, #100]	; 0x64
 8012640:	81c2      	strh	r2, [r0, #14]
 8012642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012646:	6183      	str	r3, [r0, #24]
 8012648:	4619      	mov	r1, r3
 801264a:	2208      	movs	r2, #8
 801264c:	305c      	adds	r0, #92	; 0x5c
 801264e:	f7ff ff7b 	bl	8012548 <memset>
 8012652:	4b05      	ldr	r3, [pc, #20]	; (8012668 <std+0x38>)
 8012654:	6263      	str	r3, [r4, #36]	; 0x24
 8012656:	4b05      	ldr	r3, [pc, #20]	; (801266c <std+0x3c>)
 8012658:	62a3      	str	r3, [r4, #40]	; 0x28
 801265a:	4b05      	ldr	r3, [pc, #20]	; (8012670 <std+0x40>)
 801265c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801265e:	4b05      	ldr	r3, [pc, #20]	; (8012674 <std+0x44>)
 8012660:	6224      	str	r4, [r4, #32]
 8012662:	6323      	str	r3, [r4, #48]	; 0x30
 8012664:	bd10      	pop	{r4, pc}
 8012666:	bf00      	nop
 8012668:	08012ed5 	.word	0x08012ed5
 801266c:	08012ef7 	.word	0x08012ef7
 8012670:	08012f2f 	.word	0x08012f2f
 8012674:	08012f53 	.word	0x08012f53

08012678 <_cleanup_r>:
 8012678:	4901      	ldr	r1, [pc, #4]	; (8012680 <_cleanup_r+0x8>)
 801267a:	f000 b885 	b.w	8012788 <_fwalk_reent>
 801267e:	bf00      	nop
 8012680:	0801322d 	.word	0x0801322d

08012684 <__sfmoreglue>:
 8012684:	b570      	push	{r4, r5, r6, lr}
 8012686:	1e4a      	subs	r2, r1, #1
 8012688:	2568      	movs	r5, #104	; 0x68
 801268a:	4355      	muls	r5, r2
 801268c:	460e      	mov	r6, r1
 801268e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012692:	f000 f8ed 	bl	8012870 <_malloc_r>
 8012696:	4604      	mov	r4, r0
 8012698:	b140      	cbz	r0, 80126ac <__sfmoreglue+0x28>
 801269a:	2100      	movs	r1, #0
 801269c:	e9c0 1600 	strd	r1, r6, [r0]
 80126a0:	300c      	adds	r0, #12
 80126a2:	60a0      	str	r0, [r4, #8]
 80126a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80126a8:	f7ff ff4e 	bl	8012548 <memset>
 80126ac:	4620      	mov	r0, r4
 80126ae:	bd70      	pop	{r4, r5, r6, pc}

080126b0 <__sinit>:
 80126b0:	6983      	ldr	r3, [r0, #24]
 80126b2:	b510      	push	{r4, lr}
 80126b4:	4604      	mov	r4, r0
 80126b6:	bb33      	cbnz	r3, 8012706 <__sinit+0x56>
 80126b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80126bc:	6503      	str	r3, [r0, #80]	; 0x50
 80126be:	4b12      	ldr	r3, [pc, #72]	; (8012708 <__sinit+0x58>)
 80126c0:	4a12      	ldr	r2, [pc, #72]	; (801270c <__sinit+0x5c>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	6282      	str	r2, [r0, #40]	; 0x28
 80126c6:	4298      	cmp	r0, r3
 80126c8:	bf04      	itt	eq
 80126ca:	2301      	moveq	r3, #1
 80126cc:	6183      	streq	r3, [r0, #24]
 80126ce:	f000 f81f 	bl	8012710 <__sfp>
 80126d2:	6060      	str	r0, [r4, #4]
 80126d4:	4620      	mov	r0, r4
 80126d6:	f000 f81b 	bl	8012710 <__sfp>
 80126da:	60a0      	str	r0, [r4, #8]
 80126dc:	4620      	mov	r0, r4
 80126de:	f000 f817 	bl	8012710 <__sfp>
 80126e2:	2200      	movs	r2, #0
 80126e4:	60e0      	str	r0, [r4, #12]
 80126e6:	2104      	movs	r1, #4
 80126e8:	6860      	ldr	r0, [r4, #4]
 80126ea:	f7ff ffa1 	bl	8012630 <std>
 80126ee:	2201      	movs	r2, #1
 80126f0:	2109      	movs	r1, #9
 80126f2:	68a0      	ldr	r0, [r4, #8]
 80126f4:	f7ff ff9c 	bl	8012630 <std>
 80126f8:	2202      	movs	r2, #2
 80126fa:	2112      	movs	r1, #18
 80126fc:	68e0      	ldr	r0, [r4, #12]
 80126fe:	f7ff ff97 	bl	8012630 <std>
 8012702:	2301      	movs	r3, #1
 8012704:	61a3      	str	r3, [r4, #24]
 8012706:	bd10      	pop	{r4, pc}
 8012708:	08016924 	.word	0x08016924
 801270c:	08012679 	.word	0x08012679

08012710 <__sfp>:
 8012710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012712:	4b1b      	ldr	r3, [pc, #108]	; (8012780 <__sfp+0x70>)
 8012714:	681e      	ldr	r6, [r3, #0]
 8012716:	69b3      	ldr	r3, [r6, #24]
 8012718:	4607      	mov	r7, r0
 801271a:	b913      	cbnz	r3, 8012722 <__sfp+0x12>
 801271c:	4630      	mov	r0, r6
 801271e:	f7ff ffc7 	bl	80126b0 <__sinit>
 8012722:	3648      	adds	r6, #72	; 0x48
 8012724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012728:	3b01      	subs	r3, #1
 801272a:	d503      	bpl.n	8012734 <__sfp+0x24>
 801272c:	6833      	ldr	r3, [r6, #0]
 801272e:	b133      	cbz	r3, 801273e <__sfp+0x2e>
 8012730:	6836      	ldr	r6, [r6, #0]
 8012732:	e7f7      	b.n	8012724 <__sfp+0x14>
 8012734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012738:	b16d      	cbz	r5, 8012756 <__sfp+0x46>
 801273a:	3468      	adds	r4, #104	; 0x68
 801273c:	e7f4      	b.n	8012728 <__sfp+0x18>
 801273e:	2104      	movs	r1, #4
 8012740:	4638      	mov	r0, r7
 8012742:	f7ff ff9f 	bl	8012684 <__sfmoreglue>
 8012746:	6030      	str	r0, [r6, #0]
 8012748:	2800      	cmp	r0, #0
 801274a:	d1f1      	bne.n	8012730 <__sfp+0x20>
 801274c:	230c      	movs	r3, #12
 801274e:	603b      	str	r3, [r7, #0]
 8012750:	4604      	mov	r4, r0
 8012752:	4620      	mov	r0, r4
 8012754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012756:	4b0b      	ldr	r3, [pc, #44]	; (8012784 <__sfp+0x74>)
 8012758:	6665      	str	r5, [r4, #100]	; 0x64
 801275a:	e9c4 5500 	strd	r5, r5, [r4]
 801275e:	60a5      	str	r5, [r4, #8]
 8012760:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012764:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012768:	2208      	movs	r2, #8
 801276a:	4629      	mov	r1, r5
 801276c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012770:	f7ff feea 	bl	8012548 <memset>
 8012774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801277c:	e7e9      	b.n	8012752 <__sfp+0x42>
 801277e:	bf00      	nop
 8012780:	08016924 	.word	0x08016924
 8012784:	ffff0001 	.word	0xffff0001

08012788 <_fwalk_reent>:
 8012788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278c:	4680      	mov	r8, r0
 801278e:	4689      	mov	r9, r1
 8012790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012794:	2600      	movs	r6, #0
 8012796:	b914      	cbnz	r4, 801279e <_fwalk_reent+0x16>
 8012798:	4630      	mov	r0, r6
 801279a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801279e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80127a2:	3f01      	subs	r7, #1
 80127a4:	d501      	bpl.n	80127aa <_fwalk_reent+0x22>
 80127a6:	6824      	ldr	r4, [r4, #0]
 80127a8:	e7f5      	b.n	8012796 <_fwalk_reent+0xe>
 80127aa:	89ab      	ldrh	r3, [r5, #12]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d907      	bls.n	80127c0 <_fwalk_reent+0x38>
 80127b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127b4:	3301      	adds	r3, #1
 80127b6:	d003      	beq.n	80127c0 <_fwalk_reent+0x38>
 80127b8:	4629      	mov	r1, r5
 80127ba:	4640      	mov	r0, r8
 80127bc:	47c8      	blx	r9
 80127be:	4306      	orrs	r6, r0
 80127c0:	3568      	adds	r5, #104	; 0x68
 80127c2:	e7ee      	b.n	80127a2 <_fwalk_reent+0x1a>

080127c4 <malloc>:
 80127c4:	4b02      	ldr	r3, [pc, #8]	; (80127d0 <malloc+0xc>)
 80127c6:	4601      	mov	r1, r0
 80127c8:	6818      	ldr	r0, [r3, #0]
 80127ca:	f000 b851 	b.w	8012870 <_malloc_r>
 80127ce:	bf00      	nop
 80127d0:	20000018 	.word	0x20000018

080127d4 <_free_r>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	4605      	mov	r5, r0
 80127d8:	2900      	cmp	r1, #0
 80127da:	d045      	beq.n	8012868 <_free_r+0x94>
 80127dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127e0:	1f0c      	subs	r4, r1, #4
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	bfb8      	it	lt
 80127e6:	18e4      	addlt	r4, r4, r3
 80127e8:	f000 fdc0 	bl	801336c <__malloc_lock>
 80127ec:	4a1f      	ldr	r2, [pc, #124]	; (801286c <_free_r+0x98>)
 80127ee:	6813      	ldr	r3, [r2, #0]
 80127f0:	4610      	mov	r0, r2
 80127f2:	b933      	cbnz	r3, 8012802 <_free_r+0x2e>
 80127f4:	6063      	str	r3, [r4, #4]
 80127f6:	6014      	str	r4, [r2, #0]
 80127f8:	4628      	mov	r0, r5
 80127fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127fe:	f000 bdb6 	b.w	801336e <__malloc_unlock>
 8012802:	42a3      	cmp	r3, r4
 8012804:	d90c      	bls.n	8012820 <_free_r+0x4c>
 8012806:	6821      	ldr	r1, [r4, #0]
 8012808:	1862      	adds	r2, r4, r1
 801280a:	4293      	cmp	r3, r2
 801280c:	bf04      	itt	eq
 801280e:	681a      	ldreq	r2, [r3, #0]
 8012810:	685b      	ldreq	r3, [r3, #4]
 8012812:	6063      	str	r3, [r4, #4]
 8012814:	bf04      	itt	eq
 8012816:	1852      	addeq	r2, r2, r1
 8012818:	6022      	streq	r2, [r4, #0]
 801281a:	6004      	str	r4, [r0, #0]
 801281c:	e7ec      	b.n	80127f8 <_free_r+0x24>
 801281e:	4613      	mov	r3, r2
 8012820:	685a      	ldr	r2, [r3, #4]
 8012822:	b10a      	cbz	r2, 8012828 <_free_r+0x54>
 8012824:	42a2      	cmp	r2, r4
 8012826:	d9fa      	bls.n	801281e <_free_r+0x4a>
 8012828:	6819      	ldr	r1, [r3, #0]
 801282a:	1858      	adds	r0, r3, r1
 801282c:	42a0      	cmp	r0, r4
 801282e:	d10b      	bne.n	8012848 <_free_r+0x74>
 8012830:	6820      	ldr	r0, [r4, #0]
 8012832:	4401      	add	r1, r0
 8012834:	1858      	adds	r0, r3, r1
 8012836:	4282      	cmp	r2, r0
 8012838:	6019      	str	r1, [r3, #0]
 801283a:	d1dd      	bne.n	80127f8 <_free_r+0x24>
 801283c:	6810      	ldr	r0, [r2, #0]
 801283e:	6852      	ldr	r2, [r2, #4]
 8012840:	605a      	str	r2, [r3, #4]
 8012842:	4401      	add	r1, r0
 8012844:	6019      	str	r1, [r3, #0]
 8012846:	e7d7      	b.n	80127f8 <_free_r+0x24>
 8012848:	d902      	bls.n	8012850 <_free_r+0x7c>
 801284a:	230c      	movs	r3, #12
 801284c:	602b      	str	r3, [r5, #0]
 801284e:	e7d3      	b.n	80127f8 <_free_r+0x24>
 8012850:	6820      	ldr	r0, [r4, #0]
 8012852:	1821      	adds	r1, r4, r0
 8012854:	428a      	cmp	r2, r1
 8012856:	bf04      	itt	eq
 8012858:	6811      	ldreq	r1, [r2, #0]
 801285a:	6852      	ldreq	r2, [r2, #4]
 801285c:	6062      	str	r2, [r4, #4]
 801285e:	bf04      	itt	eq
 8012860:	1809      	addeq	r1, r1, r0
 8012862:	6021      	streq	r1, [r4, #0]
 8012864:	605c      	str	r4, [r3, #4]
 8012866:	e7c7      	b.n	80127f8 <_free_r+0x24>
 8012868:	bd38      	pop	{r3, r4, r5, pc}
 801286a:	bf00      	nop
 801286c:	20000664 	.word	0x20000664

08012870 <_malloc_r>:
 8012870:	b570      	push	{r4, r5, r6, lr}
 8012872:	1ccd      	adds	r5, r1, #3
 8012874:	f025 0503 	bic.w	r5, r5, #3
 8012878:	3508      	adds	r5, #8
 801287a:	2d0c      	cmp	r5, #12
 801287c:	bf38      	it	cc
 801287e:	250c      	movcc	r5, #12
 8012880:	2d00      	cmp	r5, #0
 8012882:	4606      	mov	r6, r0
 8012884:	db01      	blt.n	801288a <_malloc_r+0x1a>
 8012886:	42a9      	cmp	r1, r5
 8012888:	d903      	bls.n	8012892 <_malloc_r+0x22>
 801288a:	230c      	movs	r3, #12
 801288c:	6033      	str	r3, [r6, #0]
 801288e:	2000      	movs	r0, #0
 8012890:	bd70      	pop	{r4, r5, r6, pc}
 8012892:	f000 fd6b 	bl	801336c <__malloc_lock>
 8012896:	4a21      	ldr	r2, [pc, #132]	; (801291c <_malloc_r+0xac>)
 8012898:	6814      	ldr	r4, [r2, #0]
 801289a:	4621      	mov	r1, r4
 801289c:	b991      	cbnz	r1, 80128c4 <_malloc_r+0x54>
 801289e:	4c20      	ldr	r4, [pc, #128]	; (8012920 <_malloc_r+0xb0>)
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	b91b      	cbnz	r3, 80128ac <_malloc_r+0x3c>
 80128a4:	4630      	mov	r0, r6
 80128a6:	f000 fb05 	bl	8012eb4 <_sbrk_r>
 80128aa:	6020      	str	r0, [r4, #0]
 80128ac:	4629      	mov	r1, r5
 80128ae:	4630      	mov	r0, r6
 80128b0:	f000 fb00 	bl	8012eb4 <_sbrk_r>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d124      	bne.n	8012902 <_malloc_r+0x92>
 80128b8:	230c      	movs	r3, #12
 80128ba:	6033      	str	r3, [r6, #0]
 80128bc:	4630      	mov	r0, r6
 80128be:	f000 fd56 	bl	801336e <__malloc_unlock>
 80128c2:	e7e4      	b.n	801288e <_malloc_r+0x1e>
 80128c4:	680b      	ldr	r3, [r1, #0]
 80128c6:	1b5b      	subs	r3, r3, r5
 80128c8:	d418      	bmi.n	80128fc <_malloc_r+0x8c>
 80128ca:	2b0b      	cmp	r3, #11
 80128cc:	d90f      	bls.n	80128ee <_malloc_r+0x7e>
 80128ce:	600b      	str	r3, [r1, #0]
 80128d0:	50cd      	str	r5, [r1, r3]
 80128d2:	18cc      	adds	r4, r1, r3
 80128d4:	4630      	mov	r0, r6
 80128d6:	f000 fd4a 	bl	801336e <__malloc_unlock>
 80128da:	f104 000b 	add.w	r0, r4, #11
 80128de:	1d23      	adds	r3, r4, #4
 80128e0:	f020 0007 	bic.w	r0, r0, #7
 80128e4:	1ac3      	subs	r3, r0, r3
 80128e6:	d0d3      	beq.n	8012890 <_malloc_r+0x20>
 80128e8:	425a      	negs	r2, r3
 80128ea:	50e2      	str	r2, [r4, r3]
 80128ec:	e7d0      	b.n	8012890 <_malloc_r+0x20>
 80128ee:	428c      	cmp	r4, r1
 80128f0:	684b      	ldr	r3, [r1, #4]
 80128f2:	bf16      	itet	ne
 80128f4:	6063      	strne	r3, [r4, #4]
 80128f6:	6013      	streq	r3, [r2, #0]
 80128f8:	460c      	movne	r4, r1
 80128fa:	e7eb      	b.n	80128d4 <_malloc_r+0x64>
 80128fc:	460c      	mov	r4, r1
 80128fe:	6849      	ldr	r1, [r1, #4]
 8012900:	e7cc      	b.n	801289c <_malloc_r+0x2c>
 8012902:	1cc4      	adds	r4, r0, #3
 8012904:	f024 0403 	bic.w	r4, r4, #3
 8012908:	42a0      	cmp	r0, r4
 801290a:	d005      	beq.n	8012918 <_malloc_r+0xa8>
 801290c:	1a21      	subs	r1, r4, r0
 801290e:	4630      	mov	r0, r6
 8012910:	f000 fad0 	bl	8012eb4 <_sbrk_r>
 8012914:	3001      	adds	r0, #1
 8012916:	d0cf      	beq.n	80128b8 <_malloc_r+0x48>
 8012918:	6025      	str	r5, [r4, #0]
 801291a:	e7db      	b.n	80128d4 <_malloc_r+0x64>
 801291c:	20000664 	.word	0x20000664
 8012920:	20000668 	.word	0x20000668

08012924 <__sfputc_r>:
 8012924:	6893      	ldr	r3, [r2, #8]
 8012926:	3b01      	subs	r3, #1
 8012928:	2b00      	cmp	r3, #0
 801292a:	b410      	push	{r4}
 801292c:	6093      	str	r3, [r2, #8]
 801292e:	da08      	bge.n	8012942 <__sfputc_r+0x1e>
 8012930:	6994      	ldr	r4, [r2, #24]
 8012932:	42a3      	cmp	r3, r4
 8012934:	db01      	blt.n	801293a <__sfputc_r+0x16>
 8012936:	290a      	cmp	r1, #10
 8012938:	d103      	bne.n	8012942 <__sfputc_r+0x1e>
 801293a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801293e:	f000 bb0d 	b.w	8012f5c <__swbuf_r>
 8012942:	6813      	ldr	r3, [r2, #0]
 8012944:	1c58      	adds	r0, r3, #1
 8012946:	6010      	str	r0, [r2, #0]
 8012948:	7019      	strb	r1, [r3, #0]
 801294a:	4608      	mov	r0, r1
 801294c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012950:	4770      	bx	lr

08012952 <__sfputs_r>:
 8012952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012954:	4606      	mov	r6, r0
 8012956:	460f      	mov	r7, r1
 8012958:	4614      	mov	r4, r2
 801295a:	18d5      	adds	r5, r2, r3
 801295c:	42ac      	cmp	r4, r5
 801295e:	d101      	bne.n	8012964 <__sfputs_r+0x12>
 8012960:	2000      	movs	r0, #0
 8012962:	e007      	b.n	8012974 <__sfputs_r+0x22>
 8012964:	463a      	mov	r2, r7
 8012966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801296a:	4630      	mov	r0, r6
 801296c:	f7ff ffda 	bl	8012924 <__sfputc_r>
 8012970:	1c43      	adds	r3, r0, #1
 8012972:	d1f3      	bne.n	801295c <__sfputs_r+0xa>
 8012974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012978 <_vfiprintf_r>:
 8012978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297c:	460c      	mov	r4, r1
 801297e:	b09d      	sub	sp, #116	; 0x74
 8012980:	4617      	mov	r7, r2
 8012982:	461d      	mov	r5, r3
 8012984:	4606      	mov	r6, r0
 8012986:	b118      	cbz	r0, 8012990 <_vfiprintf_r+0x18>
 8012988:	6983      	ldr	r3, [r0, #24]
 801298a:	b90b      	cbnz	r3, 8012990 <_vfiprintf_r+0x18>
 801298c:	f7ff fe90 	bl	80126b0 <__sinit>
 8012990:	4b7c      	ldr	r3, [pc, #496]	; (8012b84 <_vfiprintf_r+0x20c>)
 8012992:	429c      	cmp	r4, r3
 8012994:	d158      	bne.n	8012a48 <_vfiprintf_r+0xd0>
 8012996:	6874      	ldr	r4, [r6, #4]
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	0718      	lsls	r0, r3, #28
 801299c:	d55e      	bpl.n	8012a5c <_vfiprintf_r+0xe4>
 801299e:	6923      	ldr	r3, [r4, #16]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d05b      	beq.n	8012a5c <_vfiprintf_r+0xe4>
 80129a4:	2300      	movs	r3, #0
 80129a6:	9309      	str	r3, [sp, #36]	; 0x24
 80129a8:	2320      	movs	r3, #32
 80129aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129ae:	2330      	movs	r3, #48	; 0x30
 80129b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129b4:	9503      	str	r5, [sp, #12]
 80129b6:	f04f 0b01 	mov.w	fp, #1
 80129ba:	46b8      	mov	r8, r7
 80129bc:	4645      	mov	r5, r8
 80129be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80129c2:	b10b      	cbz	r3, 80129c8 <_vfiprintf_r+0x50>
 80129c4:	2b25      	cmp	r3, #37	; 0x25
 80129c6:	d154      	bne.n	8012a72 <_vfiprintf_r+0xfa>
 80129c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80129cc:	d00b      	beq.n	80129e6 <_vfiprintf_r+0x6e>
 80129ce:	4653      	mov	r3, sl
 80129d0:	463a      	mov	r2, r7
 80129d2:	4621      	mov	r1, r4
 80129d4:	4630      	mov	r0, r6
 80129d6:	f7ff ffbc 	bl	8012952 <__sfputs_r>
 80129da:	3001      	adds	r0, #1
 80129dc:	f000 80c2 	beq.w	8012b64 <_vfiprintf_r+0x1ec>
 80129e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e2:	4453      	add	r3, sl
 80129e4:	9309      	str	r3, [sp, #36]	; 0x24
 80129e6:	f898 3000 	ldrb.w	r3, [r8]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f000 80ba 	beq.w	8012b64 <_vfiprintf_r+0x1ec>
 80129f0:	2300      	movs	r3, #0
 80129f2:	f04f 32ff 	mov.w	r2, #4294967295
 80129f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129fa:	9304      	str	r3, [sp, #16]
 80129fc:	9307      	str	r3, [sp, #28]
 80129fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a02:	931a      	str	r3, [sp, #104]	; 0x68
 8012a04:	46a8      	mov	r8, r5
 8012a06:	2205      	movs	r2, #5
 8012a08:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012a0c:	485e      	ldr	r0, [pc, #376]	; (8012b88 <_vfiprintf_r+0x210>)
 8012a0e:	f7ed fc2f 	bl	8000270 <memchr>
 8012a12:	9b04      	ldr	r3, [sp, #16]
 8012a14:	bb78      	cbnz	r0, 8012a76 <_vfiprintf_r+0xfe>
 8012a16:	06d9      	lsls	r1, r3, #27
 8012a18:	bf44      	itt	mi
 8012a1a:	2220      	movmi	r2, #32
 8012a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a20:	071a      	lsls	r2, r3, #28
 8012a22:	bf44      	itt	mi
 8012a24:	222b      	movmi	r2, #43	; 0x2b
 8012a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a2a:	782a      	ldrb	r2, [r5, #0]
 8012a2c:	2a2a      	cmp	r2, #42	; 0x2a
 8012a2e:	d02a      	beq.n	8012a86 <_vfiprintf_r+0x10e>
 8012a30:	9a07      	ldr	r2, [sp, #28]
 8012a32:	46a8      	mov	r8, r5
 8012a34:	2000      	movs	r0, #0
 8012a36:	250a      	movs	r5, #10
 8012a38:	4641      	mov	r1, r8
 8012a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a3e:	3b30      	subs	r3, #48	; 0x30
 8012a40:	2b09      	cmp	r3, #9
 8012a42:	d969      	bls.n	8012b18 <_vfiprintf_r+0x1a0>
 8012a44:	b360      	cbz	r0, 8012aa0 <_vfiprintf_r+0x128>
 8012a46:	e024      	b.n	8012a92 <_vfiprintf_r+0x11a>
 8012a48:	4b50      	ldr	r3, [pc, #320]	; (8012b8c <_vfiprintf_r+0x214>)
 8012a4a:	429c      	cmp	r4, r3
 8012a4c:	d101      	bne.n	8012a52 <_vfiprintf_r+0xda>
 8012a4e:	68b4      	ldr	r4, [r6, #8]
 8012a50:	e7a2      	b.n	8012998 <_vfiprintf_r+0x20>
 8012a52:	4b4f      	ldr	r3, [pc, #316]	; (8012b90 <_vfiprintf_r+0x218>)
 8012a54:	429c      	cmp	r4, r3
 8012a56:	bf08      	it	eq
 8012a58:	68f4      	ldreq	r4, [r6, #12]
 8012a5a:	e79d      	b.n	8012998 <_vfiprintf_r+0x20>
 8012a5c:	4621      	mov	r1, r4
 8012a5e:	4630      	mov	r0, r6
 8012a60:	f000 fae0 	bl	8013024 <__swsetup_r>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d09d      	beq.n	80129a4 <_vfiprintf_r+0x2c>
 8012a68:	f04f 30ff 	mov.w	r0, #4294967295
 8012a6c:	b01d      	add	sp, #116	; 0x74
 8012a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a72:	46a8      	mov	r8, r5
 8012a74:	e7a2      	b.n	80129bc <_vfiprintf_r+0x44>
 8012a76:	4a44      	ldr	r2, [pc, #272]	; (8012b88 <_vfiprintf_r+0x210>)
 8012a78:	1a80      	subs	r0, r0, r2
 8012a7a:	fa0b f000 	lsl.w	r0, fp, r0
 8012a7e:	4318      	orrs	r0, r3
 8012a80:	9004      	str	r0, [sp, #16]
 8012a82:	4645      	mov	r5, r8
 8012a84:	e7be      	b.n	8012a04 <_vfiprintf_r+0x8c>
 8012a86:	9a03      	ldr	r2, [sp, #12]
 8012a88:	1d11      	adds	r1, r2, #4
 8012a8a:	6812      	ldr	r2, [r2, #0]
 8012a8c:	9103      	str	r1, [sp, #12]
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	db01      	blt.n	8012a96 <_vfiprintf_r+0x11e>
 8012a92:	9207      	str	r2, [sp, #28]
 8012a94:	e004      	b.n	8012aa0 <_vfiprintf_r+0x128>
 8012a96:	4252      	negs	r2, r2
 8012a98:	f043 0302 	orr.w	r3, r3, #2
 8012a9c:	9207      	str	r2, [sp, #28]
 8012a9e:	9304      	str	r3, [sp, #16]
 8012aa0:	f898 3000 	ldrb.w	r3, [r8]
 8012aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8012aa6:	d10e      	bne.n	8012ac6 <_vfiprintf_r+0x14e>
 8012aa8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012aac:	2b2a      	cmp	r3, #42	; 0x2a
 8012aae:	d138      	bne.n	8012b22 <_vfiprintf_r+0x1aa>
 8012ab0:	9b03      	ldr	r3, [sp, #12]
 8012ab2:	1d1a      	adds	r2, r3, #4
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	9203      	str	r2, [sp, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	bfb8      	it	lt
 8012abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ac0:	f108 0802 	add.w	r8, r8, #2
 8012ac4:	9305      	str	r3, [sp, #20]
 8012ac6:	4d33      	ldr	r5, [pc, #204]	; (8012b94 <_vfiprintf_r+0x21c>)
 8012ac8:	f898 1000 	ldrb.w	r1, [r8]
 8012acc:	2203      	movs	r2, #3
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f7ed fbce 	bl	8000270 <memchr>
 8012ad4:	b140      	cbz	r0, 8012ae8 <_vfiprintf_r+0x170>
 8012ad6:	2340      	movs	r3, #64	; 0x40
 8012ad8:	1b40      	subs	r0, r0, r5
 8012ada:	fa03 f000 	lsl.w	r0, r3, r0
 8012ade:	9b04      	ldr	r3, [sp, #16]
 8012ae0:	4303      	orrs	r3, r0
 8012ae2:	f108 0801 	add.w	r8, r8, #1
 8012ae6:	9304      	str	r3, [sp, #16]
 8012ae8:	f898 1000 	ldrb.w	r1, [r8]
 8012aec:	482a      	ldr	r0, [pc, #168]	; (8012b98 <_vfiprintf_r+0x220>)
 8012aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012af2:	2206      	movs	r2, #6
 8012af4:	f108 0701 	add.w	r7, r8, #1
 8012af8:	f7ed fbba 	bl	8000270 <memchr>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d037      	beq.n	8012b70 <_vfiprintf_r+0x1f8>
 8012b00:	4b26      	ldr	r3, [pc, #152]	; (8012b9c <_vfiprintf_r+0x224>)
 8012b02:	bb1b      	cbnz	r3, 8012b4c <_vfiprintf_r+0x1d4>
 8012b04:	9b03      	ldr	r3, [sp, #12]
 8012b06:	3307      	adds	r3, #7
 8012b08:	f023 0307 	bic.w	r3, r3, #7
 8012b0c:	3308      	adds	r3, #8
 8012b0e:	9303      	str	r3, [sp, #12]
 8012b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b12:	444b      	add	r3, r9
 8012b14:	9309      	str	r3, [sp, #36]	; 0x24
 8012b16:	e750      	b.n	80129ba <_vfiprintf_r+0x42>
 8012b18:	fb05 3202 	mla	r2, r5, r2, r3
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	4688      	mov	r8, r1
 8012b20:	e78a      	b.n	8012a38 <_vfiprintf_r+0xc0>
 8012b22:	2300      	movs	r3, #0
 8012b24:	f108 0801 	add.w	r8, r8, #1
 8012b28:	9305      	str	r3, [sp, #20]
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	250a      	movs	r5, #10
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b34:	3a30      	subs	r2, #48	; 0x30
 8012b36:	2a09      	cmp	r2, #9
 8012b38:	d903      	bls.n	8012b42 <_vfiprintf_r+0x1ca>
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d0c3      	beq.n	8012ac6 <_vfiprintf_r+0x14e>
 8012b3e:	9105      	str	r1, [sp, #20]
 8012b40:	e7c1      	b.n	8012ac6 <_vfiprintf_r+0x14e>
 8012b42:	fb05 2101 	mla	r1, r5, r1, r2
 8012b46:	2301      	movs	r3, #1
 8012b48:	4680      	mov	r8, r0
 8012b4a:	e7f0      	b.n	8012b2e <_vfiprintf_r+0x1b6>
 8012b4c:	ab03      	add	r3, sp, #12
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	4622      	mov	r2, r4
 8012b52:	4b13      	ldr	r3, [pc, #76]	; (8012ba0 <_vfiprintf_r+0x228>)
 8012b54:	a904      	add	r1, sp, #16
 8012b56:	4630      	mov	r0, r6
 8012b58:	f3af 8000 	nop.w
 8012b5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012b60:	4681      	mov	r9, r0
 8012b62:	d1d5      	bne.n	8012b10 <_vfiprintf_r+0x198>
 8012b64:	89a3      	ldrh	r3, [r4, #12]
 8012b66:	065b      	lsls	r3, r3, #25
 8012b68:	f53f af7e 	bmi.w	8012a68 <_vfiprintf_r+0xf0>
 8012b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b6e:	e77d      	b.n	8012a6c <_vfiprintf_r+0xf4>
 8012b70:	ab03      	add	r3, sp, #12
 8012b72:	9300      	str	r3, [sp, #0]
 8012b74:	4622      	mov	r2, r4
 8012b76:	4b0a      	ldr	r3, [pc, #40]	; (8012ba0 <_vfiprintf_r+0x228>)
 8012b78:	a904      	add	r1, sp, #16
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f000 f888 	bl	8012c90 <_printf_i>
 8012b80:	e7ec      	b.n	8012b5c <_vfiprintf_r+0x1e4>
 8012b82:	bf00      	nop
 8012b84:	08016948 	.word	0x08016948
 8012b88:	08016988 	.word	0x08016988
 8012b8c:	08016968 	.word	0x08016968
 8012b90:	08016928 	.word	0x08016928
 8012b94:	0801698e 	.word	0x0801698e
 8012b98:	08016992 	.word	0x08016992
 8012b9c:	00000000 	.word	0x00000000
 8012ba0:	08012953 	.word	0x08012953

08012ba4 <_printf_common>:
 8012ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba8:	4691      	mov	r9, r2
 8012baa:	461f      	mov	r7, r3
 8012bac:	688a      	ldr	r2, [r1, #8]
 8012bae:	690b      	ldr	r3, [r1, #16]
 8012bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	bfb8      	it	lt
 8012bb8:	4613      	movlt	r3, r2
 8012bba:	f8c9 3000 	str.w	r3, [r9]
 8012bbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012bc2:	4606      	mov	r6, r0
 8012bc4:	460c      	mov	r4, r1
 8012bc6:	b112      	cbz	r2, 8012bce <_printf_common+0x2a>
 8012bc8:	3301      	adds	r3, #1
 8012bca:	f8c9 3000 	str.w	r3, [r9]
 8012bce:	6823      	ldr	r3, [r4, #0]
 8012bd0:	0699      	lsls	r1, r3, #26
 8012bd2:	bf42      	ittt	mi
 8012bd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012bd8:	3302      	addmi	r3, #2
 8012bda:	f8c9 3000 	strmi.w	r3, [r9]
 8012bde:	6825      	ldr	r5, [r4, #0]
 8012be0:	f015 0506 	ands.w	r5, r5, #6
 8012be4:	d107      	bne.n	8012bf6 <_printf_common+0x52>
 8012be6:	f104 0a19 	add.w	sl, r4, #25
 8012bea:	68e3      	ldr	r3, [r4, #12]
 8012bec:	f8d9 2000 	ldr.w	r2, [r9]
 8012bf0:	1a9b      	subs	r3, r3, r2
 8012bf2:	42ab      	cmp	r3, r5
 8012bf4:	dc28      	bgt.n	8012c48 <_printf_common+0xa4>
 8012bf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012bfa:	6822      	ldr	r2, [r4, #0]
 8012bfc:	3300      	adds	r3, #0
 8012bfe:	bf18      	it	ne
 8012c00:	2301      	movne	r3, #1
 8012c02:	0692      	lsls	r2, r2, #26
 8012c04:	d42d      	bmi.n	8012c62 <_printf_common+0xbe>
 8012c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	47c0      	blx	r8
 8012c10:	3001      	adds	r0, #1
 8012c12:	d020      	beq.n	8012c56 <_printf_common+0xb2>
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	68e5      	ldr	r5, [r4, #12]
 8012c18:	f8d9 2000 	ldr.w	r2, [r9]
 8012c1c:	f003 0306 	and.w	r3, r3, #6
 8012c20:	2b04      	cmp	r3, #4
 8012c22:	bf08      	it	eq
 8012c24:	1aad      	subeq	r5, r5, r2
 8012c26:	68a3      	ldr	r3, [r4, #8]
 8012c28:	6922      	ldr	r2, [r4, #16]
 8012c2a:	bf0c      	ite	eq
 8012c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c30:	2500      	movne	r5, #0
 8012c32:	4293      	cmp	r3, r2
 8012c34:	bfc4      	itt	gt
 8012c36:	1a9b      	subgt	r3, r3, r2
 8012c38:	18ed      	addgt	r5, r5, r3
 8012c3a:	f04f 0900 	mov.w	r9, #0
 8012c3e:	341a      	adds	r4, #26
 8012c40:	454d      	cmp	r5, r9
 8012c42:	d11a      	bne.n	8012c7a <_printf_common+0xd6>
 8012c44:	2000      	movs	r0, #0
 8012c46:	e008      	b.n	8012c5a <_printf_common+0xb6>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	4652      	mov	r2, sl
 8012c4c:	4639      	mov	r1, r7
 8012c4e:	4630      	mov	r0, r6
 8012c50:	47c0      	blx	r8
 8012c52:	3001      	adds	r0, #1
 8012c54:	d103      	bne.n	8012c5e <_printf_common+0xba>
 8012c56:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c5e:	3501      	adds	r5, #1
 8012c60:	e7c3      	b.n	8012bea <_printf_common+0x46>
 8012c62:	18e1      	adds	r1, r4, r3
 8012c64:	1c5a      	adds	r2, r3, #1
 8012c66:	2030      	movs	r0, #48	; 0x30
 8012c68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c6c:	4422      	add	r2, r4
 8012c6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c76:	3302      	adds	r3, #2
 8012c78:	e7c5      	b.n	8012c06 <_printf_common+0x62>
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	4639      	mov	r1, r7
 8012c80:	4630      	mov	r0, r6
 8012c82:	47c0      	blx	r8
 8012c84:	3001      	adds	r0, #1
 8012c86:	d0e6      	beq.n	8012c56 <_printf_common+0xb2>
 8012c88:	f109 0901 	add.w	r9, r9, #1
 8012c8c:	e7d8      	b.n	8012c40 <_printf_common+0x9c>
	...

08012c90 <_printf_i>:
 8012c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012c98:	460c      	mov	r4, r1
 8012c9a:	7e09      	ldrb	r1, [r1, #24]
 8012c9c:	b085      	sub	sp, #20
 8012c9e:	296e      	cmp	r1, #110	; 0x6e
 8012ca0:	4617      	mov	r7, r2
 8012ca2:	4606      	mov	r6, r0
 8012ca4:	4698      	mov	r8, r3
 8012ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ca8:	f000 80b3 	beq.w	8012e12 <_printf_i+0x182>
 8012cac:	d822      	bhi.n	8012cf4 <_printf_i+0x64>
 8012cae:	2963      	cmp	r1, #99	; 0x63
 8012cb0:	d036      	beq.n	8012d20 <_printf_i+0x90>
 8012cb2:	d80a      	bhi.n	8012cca <_printf_i+0x3a>
 8012cb4:	2900      	cmp	r1, #0
 8012cb6:	f000 80b9 	beq.w	8012e2c <_printf_i+0x19c>
 8012cba:	2958      	cmp	r1, #88	; 0x58
 8012cbc:	f000 8083 	beq.w	8012dc6 <_printf_i+0x136>
 8012cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012cc8:	e032      	b.n	8012d30 <_printf_i+0xa0>
 8012cca:	2964      	cmp	r1, #100	; 0x64
 8012ccc:	d001      	beq.n	8012cd2 <_printf_i+0x42>
 8012cce:	2969      	cmp	r1, #105	; 0x69
 8012cd0:	d1f6      	bne.n	8012cc0 <_printf_i+0x30>
 8012cd2:	6820      	ldr	r0, [r4, #0]
 8012cd4:	6813      	ldr	r3, [r2, #0]
 8012cd6:	0605      	lsls	r5, r0, #24
 8012cd8:	f103 0104 	add.w	r1, r3, #4
 8012cdc:	d52a      	bpl.n	8012d34 <_printf_i+0xa4>
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	6011      	str	r1, [r2, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	da03      	bge.n	8012cee <_printf_i+0x5e>
 8012ce6:	222d      	movs	r2, #45	; 0x2d
 8012ce8:	425b      	negs	r3, r3
 8012cea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012cee:	486f      	ldr	r0, [pc, #444]	; (8012eac <_printf_i+0x21c>)
 8012cf0:	220a      	movs	r2, #10
 8012cf2:	e039      	b.n	8012d68 <_printf_i+0xd8>
 8012cf4:	2973      	cmp	r1, #115	; 0x73
 8012cf6:	f000 809d 	beq.w	8012e34 <_printf_i+0x1a4>
 8012cfa:	d808      	bhi.n	8012d0e <_printf_i+0x7e>
 8012cfc:	296f      	cmp	r1, #111	; 0x6f
 8012cfe:	d020      	beq.n	8012d42 <_printf_i+0xb2>
 8012d00:	2970      	cmp	r1, #112	; 0x70
 8012d02:	d1dd      	bne.n	8012cc0 <_printf_i+0x30>
 8012d04:	6823      	ldr	r3, [r4, #0]
 8012d06:	f043 0320 	orr.w	r3, r3, #32
 8012d0a:	6023      	str	r3, [r4, #0]
 8012d0c:	e003      	b.n	8012d16 <_printf_i+0x86>
 8012d0e:	2975      	cmp	r1, #117	; 0x75
 8012d10:	d017      	beq.n	8012d42 <_printf_i+0xb2>
 8012d12:	2978      	cmp	r1, #120	; 0x78
 8012d14:	d1d4      	bne.n	8012cc0 <_printf_i+0x30>
 8012d16:	2378      	movs	r3, #120	; 0x78
 8012d18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d1c:	4864      	ldr	r0, [pc, #400]	; (8012eb0 <_printf_i+0x220>)
 8012d1e:	e055      	b.n	8012dcc <_printf_i+0x13c>
 8012d20:	6813      	ldr	r3, [r2, #0]
 8012d22:	1d19      	adds	r1, r3, #4
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	6011      	str	r1, [r2, #0]
 8012d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d30:	2301      	movs	r3, #1
 8012d32:	e08c      	b.n	8012e4e <_printf_i+0x1be>
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	6011      	str	r1, [r2, #0]
 8012d38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d3c:	bf18      	it	ne
 8012d3e:	b21b      	sxthne	r3, r3
 8012d40:	e7cf      	b.n	8012ce2 <_printf_i+0x52>
 8012d42:	6813      	ldr	r3, [r2, #0]
 8012d44:	6825      	ldr	r5, [r4, #0]
 8012d46:	1d18      	adds	r0, r3, #4
 8012d48:	6010      	str	r0, [r2, #0]
 8012d4a:	0628      	lsls	r0, r5, #24
 8012d4c:	d501      	bpl.n	8012d52 <_printf_i+0xc2>
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	e002      	b.n	8012d58 <_printf_i+0xc8>
 8012d52:	0668      	lsls	r0, r5, #25
 8012d54:	d5fb      	bpl.n	8012d4e <_printf_i+0xbe>
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	4854      	ldr	r0, [pc, #336]	; (8012eac <_printf_i+0x21c>)
 8012d5a:	296f      	cmp	r1, #111	; 0x6f
 8012d5c:	bf14      	ite	ne
 8012d5e:	220a      	movne	r2, #10
 8012d60:	2208      	moveq	r2, #8
 8012d62:	2100      	movs	r1, #0
 8012d64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d68:	6865      	ldr	r5, [r4, #4]
 8012d6a:	60a5      	str	r5, [r4, #8]
 8012d6c:	2d00      	cmp	r5, #0
 8012d6e:	f2c0 8095 	blt.w	8012e9c <_printf_i+0x20c>
 8012d72:	6821      	ldr	r1, [r4, #0]
 8012d74:	f021 0104 	bic.w	r1, r1, #4
 8012d78:	6021      	str	r1, [r4, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d13d      	bne.n	8012dfa <_printf_i+0x16a>
 8012d7e:	2d00      	cmp	r5, #0
 8012d80:	f040 808e 	bne.w	8012ea0 <_printf_i+0x210>
 8012d84:	4665      	mov	r5, ip
 8012d86:	2a08      	cmp	r2, #8
 8012d88:	d10b      	bne.n	8012da2 <_printf_i+0x112>
 8012d8a:	6823      	ldr	r3, [r4, #0]
 8012d8c:	07db      	lsls	r3, r3, #31
 8012d8e:	d508      	bpl.n	8012da2 <_printf_i+0x112>
 8012d90:	6923      	ldr	r3, [r4, #16]
 8012d92:	6862      	ldr	r2, [r4, #4]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	bfde      	ittt	le
 8012d98:	2330      	movle	r3, #48	; 0x30
 8012d9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012da2:	ebac 0305 	sub.w	r3, ip, r5
 8012da6:	6123      	str	r3, [r4, #16]
 8012da8:	f8cd 8000 	str.w	r8, [sp]
 8012dac:	463b      	mov	r3, r7
 8012dae:	aa03      	add	r2, sp, #12
 8012db0:	4621      	mov	r1, r4
 8012db2:	4630      	mov	r0, r6
 8012db4:	f7ff fef6 	bl	8012ba4 <_printf_common>
 8012db8:	3001      	adds	r0, #1
 8012dba:	d14d      	bne.n	8012e58 <_printf_i+0x1c8>
 8012dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc0:	b005      	add	sp, #20
 8012dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dc6:	4839      	ldr	r0, [pc, #228]	; (8012eac <_printf_i+0x21c>)
 8012dc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012dcc:	6813      	ldr	r3, [r2, #0]
 8012dce:	6821      	ldr	r1, [r4, #0]
 8012dd0:	1d1d      	adds	r5, r3, #4
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6015      	str	r5, [r2, #0]
 8012dd6:	060a      	lsls	r2, r1, #24
 8012dd8:	d50b      	bpl.n	8012df2 <_printf_i+0x162>
 8012dda:	07ca      	lsls	r2, r1, #31
 8012ddc:	bf44      	itt	mi
 8012dde:	f041 0120 	orrmi.w	r1, r1, #32
 8012de2:	6021      	strmi	r1, [r4, #0]
 8012de4:	b91b      	cbnz	r3, 8012dee <_printf_i+0x15e>
 8012de6:	6822      	ldr	r2, [r4, #0]
 8012de8:	f022 0220 	bic.w	r2, r2, #32
 8012dec:	6022      	str	r2, [r4, #0]
 8012dee:	2210      	movs	r2, #16
 8012df0:	e7b7      	b.n	8012d62 <_printf_i+0xd2>
 8012df2:	064d      	lsls	r5, r1, #25
 8012df4:	bf48      	it	mi
 8012df6:	b29b      	uxthmi	r3, r3
 8012df8:	e7ef      	b.n	8012dda <_printf_i+0x14a>
 8012dfa:	4665      	mov	r5, ip
 8012dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e00:	fb02 3311 	mls	r3, r2, r1, r3
 8012e04:	5cc3      	ldrb	r3, [r0, r3]
 8012e06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012e0a:	460b      	mov	r3, r1
 8012e0c:	2900      	cmp	r1, #0
 8012e0e:	d1f5      	bne.n	8012dfc <_printf_i+0x16c>
 8012e10:	e7b9      	b.n	8012d86 <_printf_i+0xf6>
 8012e12:	6813      	ldr	r3, [r2, #0]
 8012e14:	6825      	ldr	r5, [r4, #0]
 8012e16:	6961      	ldr	r1, [r4, #20]
 8012e18:	1d18      	adds	r0, r3, #4
 8012e1a:	6010      	str	r0, [r2, #0]
 8012e1c:	0628      	lsls	r0, r5, #24
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	d501      	bpl.n	8012e26 <_printf_i+0x196>
 8012e22:	6019      	str	r1, [r3, #0]
 8012e24:	e002      	b.n	8012e2c <_printf_i+0x19c>
 8012e26:	066a      	lsls	r2, r5, #25
 8012e28:	d5fb      	bpl.n	8012e22 <_printf_i+0x192>
 8012e2a:	8019      	strh	r1, [r3, #0]
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	6123      	str	r3, [r4, #16]
 8012e30:	4665      	mov	r5, ip
 8012e32:	e7b9      	b.n	8012da8 <_printf_i+0x118>
 8012e34:	6813      	ldr	r3, [r2, #0]
 8012e36:	1d19      	adds	r1, r3, #4
 8012e38:	6011      	str	r1, [r2, #0]
 8012e3a:	681d      	ldr	r5, [r3, #0]
 8012e3c:	6862      	ldr	r2, [r4, #4]
 8012e3e:	2100      	movs	r1, #0
 8012e40:	4628      	mov	r0, r5
 8012e42:	f7ed fa15 	bl	8000270 <memchr>
 8012e46:	b108      	cbz	r0, 8012e4c <_printf_i+0x1bc>
 8012e48:	1b40      	subs	r0, r0, r5
 8012e4a:	6060      	str	r0, [r4, #4]
 8012e4c:	6863      	ldr	r3, [r4, #4]
 8012e4e:	6123      	str	r3, [r4, #16]
 8012e50:	2300      	movs	r3, #0
 8012e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e56:	e7a7      	b.n	8012da8 <_printf_i+0x118>
 8012e58:	6923      	ldr	r3, [r4, #16]
 8012e5a:	462a      	mov	r2, r5
 8012e5c:	4639      	mov	r1, r7
 8012e5e:	4630      	mov	r0, r6
 8012e60:	47c0      	blx	r8
 8012e62:	3001      	adds	r0, #1
 8012e64:	d0aa      	beq.n	8012dbc <_printf_i+0x12c>
 8012e66:	6823      	ldr	r3, [r4, #0]
 8012e68:	079b      	lsls	r3, r3, #30
 8012e6a:	d413      	bmi.n	8012e94 <_printf_i+0x204>
 8012e6c:	68e0      	ldr	r0, [r4, #12]
 8012e6e:	9b03      	ldr	r3, [sp, #12]
 8012e70:	4298      	cmp	r0, r3
 8012e72:	bfb8      	it	lt
 8012e74:	4618      	movlt	r0, r3
 8012e76:	e7a3      	b.n	8012dc0 <_printf_i+0x130>
 8012e78:	2301      	movs	r3, #1
 8012e7a:	464a      	mov	r2, r9
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	4630      	mov	r0, r6
 8012e80:	47c0      	blx	r8
 8012e82:	3001      	adds	r0, #1
 8012e84:	d09a      	beq.n	8012dbc <_printf_i+0x12c>
 8012e86:	3501      	adds	r5, #1
 8012e88:	68e3      	ldr	r3, [r4, #12]
 8012e8a:	9a03      	ldr	r2, [sp, #12]
 8012e8c:	1a9b      	subs	r3, r3, r2
 8012e8e:	42ab      	cmp	r3, r5
 8012e90:	dcf2      	bgt.n	8012e78 <_printf_i+0x1e8>
 8012e92:	e7eb      	b.n	8012e6c <_printf_i+0x1dc>
 8012e94:	2500      	movs	r5, #0
 8012e96:	f104 0919 	add.w	r9, r4, #25
 8012e9a:	e7f5      	b.n	8012e88 <_printf_i+0x1f8>
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d1ac      	bne.n	8012dfa <_printf_i+0x16a>
 8012ea0:	7803      	ldrb	r3, [r0, #0]
 8012ea2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ea6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012eaa:	e76c      	b.n	8012d86 <_printf_i+0xf6>
 8012eac:	08016999 	.word	0x08016999
 8012eb0:	080169aa 	.word	0x080169aa

08012eb4 <_sbrk_r>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4c06      	ldr	r4, [pc, #24]	; (8012ed0 <_sbrk_r+0x1c>)
 8012eb8:	2300      	movs	r3, #0
 8012eba:	4605      	mov	r5, r0
 8012ebc:	4608      	mov	r0, r1
 8012ebe:	6023      	str	r3, [r4, #0]
 8012ec0:	f7ed ff42 	bl	8000d48 <_sbrk>
 8012ec4:	1c43      	adds	r3, r0, #1
 8012ec6:	d102      	bne.n	8012ece <_sbrk_r+0x1a>
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	b103      	cbz	r3, 8012ece <_sbrk_r+0x1a>
 8012ecc:	602b      	str	r3, [r5, #0]
 8012ece:	bd38      	pop	{r3, r4, r5, pc}
 8012ed0:	200071cc 	.word	0x200071cc

08012ed4 <__sread>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	460c      	mov	r4, r1
 8012ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012edc:	f000 fa48 	bl	8013370 <_read_r>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	bfab      	itete	ge
 8012ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8012ee8:	181b      	addge	r3, r3, r0
 8012eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012eee:	bfac      	ite	ge
 8012ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ef2:	81a3      	strhlt	r3, [r4, #12]
 8012ef4:	bd10      	pop	{r4, pc}

08012ef6 <__swrite>:
 8012ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012efa:	461f      	mov	r7, r3
 8012efc:	898b      	ldrh	r3, [r1, #12]
 8012efe:	05db      	lsls	r3, r3, #23
 8012f00:	4605      	mov	r5, r0
 8012f02:	460c      	mov	r4, r1
 8012f04:	4616      	mov	r6, r2
 8012f06:	d505      	bpl.n	8012f14 <__swrite+0x1e>
 8012f08:	2302      	movs	r3, #2
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f10:	f000 f9b6 	bl	8013280 <_lseek_r>
 8012f14:	89a3      	ldrh	r3, [r4, #12]
 8012f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f1e:	81a3      	strh	r3, [r4, #12]
 8012f20:	4632      	mov	r2, r6
 8012f22:	463b      	mov	r3, r7
 8012f24:	4628      	mov	r0, r5
 8012f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f2a:	f000 b869 	b.w	8013000 <_write_r>

08012f2e <__sseek>:
 8012f2e:	b510      	push	{r4, lr}
 8012f30:	460c      	mov	r4, r1
 8012f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f36:	f000 f9a3 	bl	8013280 <_lseek_r>
 8012f3a:	1c43      	adds	r3, r0, #1
 8012f3c:	89a3      	ldrh	r3, [r4, #12]
 8012f3e:	bf15      	itete	ne
 8012f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f4a:	81a3      	strheq	r3, [r4, #12]
 8012f4c:	bf18      	it	ne
 8012f4e:	81a3      	strhne	r3, [r4, #12]
 8012f50:	bd10      	pop	{r4, pc}

08012f52 <__sclose>:
 8012f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f56:	f000 b8d3 	b.w	8013100 <_close_r>
	...

08012f5c <__swbuf_r>:
 8012f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5e:	460e      	mov	r6, r1
 8012f60:	4614      	mov	r4, r2
 8012f62:	4605      	mov	r5, r0
 8012f64:	b118      	cbz	r0, 8012f6e <__swbuf_r+0x12>
 8012f66:	6983      	ldr	r3, [r0, #24]
 8012f68:	b90b      	cbnz	r3, 8012f6e <__swbuf_r+0x12>
 8012f6a:	f7ff fba1 	bl	80126b0 <__sinit>
 8012f6e:	4b21      	ldr	r3, [pc, #132]	; (8012ff4 <__swbuf_r+0x98>)
 8012f70:	429c      	cmp	r4, r3
 8012f72:	d12a      	bne.n	8012fca <__swbuf_r+0x6e>
 8012f74:	686c      	ldr	r4, [r5, #4]
 8012f76:	69a3      	ldr	r3, [r4, #24]
 8012f78:	60a3      	str	r3, [r4, #8]
 8012f7a:	89a3      	ldrh	r3, [r4, #12]
 8012f7c:	071a      	lsls	r2, r3, #28
 8012f7e:	d52e      	bpl.n	8012fde <__swbuf_r+0x82>
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	b363      	cbz	r3, 8012fde <__swbuf_r+0x82>
 8012f84:	6923      	ldr	r3, [r4, #16]
 8012f86:	6820      	ldr	r0, [r4, #0]
 8012f88:	1ac0      	subs	r0, r0, r3
 8012f8a:	6963      	ldr	r3, [r4, #20]
 8012f8c:	b2f6      	uxtb	r6, r6
 8012f8e:	4283      	cmp	r3, r0
 8012f90:	4637      	mov	r7, r6
 8012f92:	dc04      	bgt.n	8012f9e <__swbuf_r+0x42>
 8012f94:	4621      	mov	r1, r4
 8012f96:	4628      	mov	r0, r5
 8012f98:	f000 f948 	bl	801322c <_fflush_r>
 8012f9c:	bb28      	cbnz	r0, 8012fea <__swbuf_r+0x8e>
 8012f9e:	68a3      	ldr	r3, [r4, #8]
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	60a3      	str	r3, [r4, #8]
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	1c5a      	adds	r2, r3, #1
 8012fa8:	6022      	str	r2, [r4, #0]
 8012faa:	701e      	strb	r6, [r3, #0]
 8012fac:	6963      	ldr	r3, [r4, #20]
 8012fae:	3001      	adds	r0, #1
 8012fb0:	4283      	cmp	r3, r0
 8012fb2:	d004      	beq.n	8012fbe <__swbuf_r+0x62>
 8012fb4:	89a3      	ldrh	r3, [r4, #12]
 8012fb6:	07db      	lsls	r3, r3, #31
 8012fb8:	d519      	bpl.n	8012fee <__swbuf_r+0x92>
 8012fba:	2e0a      	cmp	r6, #10
 8012fbc:	d117      	bne.n	8012fee <__swbuf_r+0x92>
 8012fbe:	4621      	mov	r1, r4
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f000 f933 	bl	801322c <_fflush_r>
 8012fc6:	b190      	cbz	r0, 8012fee <__swbuf_r+0x92>
 8012fc8:	e00f      	b.n	8012fea <__swbuf_r+0x8e>
 8012fca:	4b0b      	ldr	r3, [pc, #44]	; (8012ff8 <__swbuf_r+0x9c>)
 8012fcc:	429c      	cmp	r4, r3
 8012fce:	d101      	bne.n	8012fd4 <__swbuf_r+0x78>
 8012fd0:	68ac      	ldr	r4, [r5, #8]
 8012fd2:	e7d0      	b.n	8012f76 <__swbuf_r+0x1a>
 8012fd4:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <__swbuf_r+0xa0>)
 8012fd6:	429c      	cmp	r4, r3
 8012fd8:	bf08      	it	eq
 8012fda:	68ec      	ldreq	r4, [r5, #12]
 8012fdc:	e7cb      	b.n	8012f76 <__swbuf_r+0x1a>
 8012fde:	4621      	mov	r1, r4
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	f000 f81f 	bl	8013024 <__swsetup_r>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d0cc      	beq.n	8012f84 <__swbuf_r+0x28>
 8012fea:	f04f 37ff 	mov.w	r7, #4294967295
 8012fee:	4638      	mov	r0, r7
 8012ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	08016948 	.word	0x08016948
 8012ff8:	08016968 	.word	0x08016968
 8012ffc:	08016928 	.word	0x08016928

08013000 <_write_r>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4c07      	ldr	r4, [pc, #28]	; (8013020 <_write_r+0x20>)
 8013004:	4605      	mov	r5, r0
 8013006:	4608      	mov	r0, r1
 8013008:	4611      	mov	r1, r2
 801300a:	2200      	movs	r2, #0
 801300c:	6022      	str	r2, [r4, #0]
 801300e:	461a      	mov	r2, r3
 8013010:	f7ed fe49 	bl	8000ca6 <_write>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d102      	bne.n	801301e <_write_r+0x1e>
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	b103      	cbz	r3, 801301e <_write_r+0x1e>
 801301c:	602b      	str	r3, [r5, #0]
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	200071cc 	.word	0x200071cc

08013024 <__swsetup_r>:
 8013024:	4b32      	ldr	r3, [pc, #200]	; (80130f0 <__swsetup_r+0xcc>)
 8013026:	b570      	push	{r4, r5, r6, lr}
 8013028:	681d      	ldr	r5, [r3, #0]
 801302a:	4606      	mov	r6, r0
 801302c:	460c      	mov	r4, r1
 801302e:	b125      	cbz	r5, 801303a <__swsetup_r+0x16>
 8013030:	69ab      	ldr	r3, [r5, #24]
 8013032:	b913      	cbnz	r3, 801303a <__swsetup_r+0x16>
 8013034:	4628      	mov	r0, r5
 8013036:	f7ff fb3b 	bl	80126b0 <__sinit>
 801303a:	4b2e      	ldr	r3, [pc, #184]	; (80130f4 <__swsetup_r+0xd0>)
 801303c:	429c      	cmp	r4, r3
 801303e:	d10f      	bne.n	8013060 <__swsetup_r+0x3c>
 8013040:	686c      	ldr	r4, [r5, #4]
 8013042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013046:	b29a      	uxth	r2, r3
 8013048:	0715      	lsls	r5, r2, #28
 801304a:	d42c      	bmi.n	80130a6 <__swsetup_r+0x82>
 801304c:	06d0      	lsls	r0, r2, #27
 801304e:	d411      	bmi.n	8013074 <__swsetup_r+0x50>
 8013050:	2209      	movs	r2, #9
 8013052:	6032      	str	r2, [r6, #0]
 8013054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013058:	81a3      	strh	r3, [r4, #12]
 801305a:	f04f 30ff 	mov.w	r0, #4294967295
 801305e:	e03e      	b.n	80130de <__swsetup_r+0xba>
 8013060:	4b25      	ldr	r3, [pc, #148]	; (80130f8 <__swsetup_r+0xd4>)
 8013062:	429c      	cmp	r4, r3
 8013064:	d101      	bne.n	801306a <__swsetup_r+0x46>
 8013066:	68ac      	ldr	r4, [r5, #8]
 8013068:	e7eb      	b.n	8013042 <__swsetup_r+0x1e>
 801306a:	4b24      	ldr	r3, [pc, #144]	; (80130fc <__swsetup_r+0xd8>)
 801306c:	429c      	cmp	r4, r3
 801306e:	bf08      	it	eq
 8013070:	68ec      	ldreq	r4, [r5, #12]
 8013072:	e7e6      	b.n	8013042 <__swsetup_r+0x1e>
 8013074:	0751      	lsls	r1, r2, #29
 8013076:	d512      	bpl.n	801309e <__swsetup_r+0x7a>
 8013078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801307a:	b141      	cbz	r1, 801308e <__swsetup_r+0x6a>
 801307c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013080:	4299      	cmp	r1, r3
 8013082:	d002      	beq.n	801308a <__swsetup_r+0x66>
 8013084:	4630      	mov	r0, r6
 8013086:	f7ff fba5 	bl	80127d4 <_free_r>
 801308a:	2300      	movs	r3, #0
 801308c:	6363      	str	r3, [r4, #52]	; 0x34
 801308e:	89a3      	ldrh	r3, [r4, #12]
 8013090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013094:	81a3      	strh	r3, [r4, #12]
 8013096:	2300      	movs	r3, #0
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	6923      	ldr	r3, [r4, #16]
 801309c:	6023      	str	r3, [r4, #0]
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	f043 0308 	orr.w	r3, r3, #8
 80130a4:	81a3      	strh	r3, [r4, #12]
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	b94b      	cbnz	r3, 80130be <__swsetup_r+0x9a>
 80130aa:	89a3      	ldrh	r3, [r4, #12]
 80130ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80130b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130b4:	d003      	beq.n	80130be <__swsetup_r+0x9a>
 80130b6:	4621      	mov	r1, r4
 80130b8:	4630      	mov	r0, r6
 80130ba:	f000 f917 	bl	80132ec <__smakebuf_r>
 80130be:	89a2      	ldrh	r2, [r4, #12]
 80130c0:	f012 0301 	ands.w	r3, r2, #1
 80130c4:	d00c      	beq.n	80130e0 <__swsetup_r+0xbc>
 80130c6:	2300      	movs	r3, #0
 80130c8:	60a3      	str	r3, [r4, #8]
 80130ca:	6963      	ldr	r3, [r4, #20]
 80130cc:	425b      	negs	r3, r3
 80130ce:	61a3      	str	r3, [r4, #24]
 80130d0:	6923      	ldr	r3, [r4, #16]
 80130d2:	b953      	cbnz	r3, 80130ea <__swsetup_r+0xc6>
 80130d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80130dc:	d1ba      	bne.n	8013054 <__swsetup_r+0x30>
 80130de:	bd70      	pop	{r4, r5, r6, pc}
 80130e0:	0792      	lsls	r2, r2, #30
 80130e2:	bf58      	it	pl
 80130e4:	6963      	ldrpl	r3, [r4, #20]
 80130e6:	60a3      	str	r3, [r4, #8]
 80130e8:	e7f2      	b.n	80130d0 <__swsetup_r+0xac>
 80130ea:	2000      	movs	r0, #0
 80130ec:	e7f7      	b.n	80130de <__swsetup_r+0xba>
 80130ee:	bf00      	nop
 80130f0:	20000018 	.word	0x20000018
 80130f4:	08016948 	.word	0x08016948
 80130f8:	08016968 	.word	0x08016968
 80130fc:	08016928 	.word	0x08016928

08013100 <_close_r>:
 8013100:	b538      	push	{r3, r4, r5, lr}
 8013102:	4c06      	ldr	r4, [pc, #24]	; (801311c <_close_r+0x1c>)
 8013104:	2300      	movs	r3, #0
 8013106:	4605      	mov	r5, r0
 8013108:	4608      	mov	r0, r1
 801310a:	6023      	str	r3, [r4, #0]
 801310c:	f7ed fde7 	bl	8000cde <_close>
 8013110:	1c43      	adds	r3, r0, #1
 8013112:	d102      	bne.n	801311a <_close_r+0x1a>
 8013114:	6823      	ldr	r3, [r4, #0]
 8013116:	b103      	cbz	r3, 801311a <_close_r+0x1a>
 8013118:	602b      	str	r3, [r5, #0]
 801311a:	bd38      	pop	{r3, r4, r5, pc}
 801311c:	200071cc 	.word	0x200071cc

08013120 <__sflush_r>:
 8013120:	898a      	ldrh	r2, [r1, #12]
 8013122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013126:	4605      	mov	r5, r0
 8013128:	0710      	lsls	r0, r2, #28
 801312a:	460c      	mov	r4, r1
 801312c:	d458      	bmi.n	80131e0 <__sflush_r+0xc0>
 801312e:	684b      	ldr	r3, [r1, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	dc05      	bgt.n	8013140 <__sflush_r+0x20>
 8013134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013136:	2b00      	cmp	r3, #0
 8013138:	dc02      	bgt.n	8013140 <__sflush_r+0x20>
 801313a:	2000      	movs	r0, #0
 801313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013142:	2e00      	cmp	r6, #0
 8013144:	d0f9      	beq.n	801313a <__sflush_r+0x1a>
 8013146:	2300      	movs	r3, #0
 8013148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801314c:	682f      	ldr	r7, [r5, #0]
 801314e:	6a21      	ldr	r1, [r4, #32]
 8013150:	602b      	str	r3, [r5, #0]
 8013152:	d032      	beq.n	80131ba <__sflush_r+0x9a>
 8013154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	075a      	lsls	r2, r3, #29
 801315a:	d505      	bpl.n	8013168 <__sflush_r+0x48>
 801315c:	6863      	ldr	r3, [r4, #4]
 801315e:	1ac0      	subs	r0, r0, r3
 8013160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013162:	b10b      	cbz	r3, 8013168 <__sflush_r+0x48>
 8013164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013166:	1ac0      	subs	r0, r0, r3
 8013168:	2300      	movs	r3, #0
 801316a:	4602      	mov	r2, r0
 801316c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801316e:	6a21      	ldr	r1, [r4, #32]
 8013170:	4628      	mov	r0, r5
 8013172:	47b0      	blx	r6
 8013174:	1c43      	adds	r3, r0, #1
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	d106      	bne.n	8013188 <__sflush_r+0x68>
 801317a:	6829      	ldr	r1, [r5, #0]
 801317c:	291d      	cmp	r1, #29
 801317e:	d848      	bhi.n	8013212 <__sflush_r+0xf2>
 8013180:	4a29      	ldr	r2, [pc, #164]	; (8013228 <__sflush_r+0x108>)
 8013182:	40ca      	lsrs	r2, r1
 8013184:	07d6      	lsls	r6, r2, #31
 8013186:	d544      	bpl.n	8013212 <__sflush_r+0xf2>
 8013188:	2200      	movs	r2, #0
 801318a:	6062      	str	r2, [r4, #4]
 801318c:	04d9      	lsls	r1, r3, #19
 801318e:	6922      	ldr	r2, [r4, #16]
 8013190:	6022      	str	r2, [r4, #0]
 8013192:	d504      	bpl.n	801319e <__sflush_r+0x7e>
 8013194:	1c42      	adds	r2, r0, #1
 8013196:	d101      	bne.n	801319c <__sflush_r+0x7c>
 8013198:	682b      	ldr	r3, [r5, #0]
 801319a:	b903      	cbnz	r3, 801319e <__sflush_r+0x7e>
 801319c:	6560      	str	r0, [r4, #84]	; 0x54
 801319e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131a0:	602f      	str	r7, [r5, #0]
 80131a2:	2900      	cmp	r1, #0
 80131a4:	d0c9      	beq.n	801313a <__sflush_r+0x1a>
 80131a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131aa:	4299      	cmp	r1, r3
 80131ac:	d002      	beq.n	80131b4 <__sflush_r+0x94>
 80131ae:	4628      	mov	r0, r5
 80131b0:	f7ff fb10 	bl	80127d4 <_free_r>
 80131b4:	2000      	movs	r0, #0
 80131b6:	6360      	str	r0, [r4, #52]	; 0x34
 80131b8:	e7c0      	b.n	801313c <__sflush_r+0x1c>
 80131ba:	2301      	movs	r3, #1
 80131bc:	4628      	mov	r0, r5
 80131be:	47b0      	blx	r6
 80131c0:	1c41      	adds	r1, r0, #1
 80131c2:	d1c8      	bne.n	8013156 <__sflush_r+0x36>
 80131c4:	682b      	ldr	r3, [r5, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d0c5      	beq.n	8013156 <__sflush_r+0x36>
 80131ca:	2b1d      	cmp	r3, #29
 80131cc:	d001      	beq.n	80131d2 <__sflush_r+0xb2>
 80131ce:	2b16      	cmp	r3, #22
 80131d0:	d101      	bne.n	80131d6 <__sflush_r+0xb6>
 80131d2:	602f      	str	r7, [r5, #0]
 80131d4:	e7b1      	b.n	801313a <__sflush_r+0x1a>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131dc:	81a3      	strh	r3, [r4, #12]
 80131de:	e7ad      	b.n	801313c <__sflush_r+0x1c>
 80131e0:	690f      	ldr	r7, [r1, #16]
 80131e2:	2f00      	cmp	r7, #0
 80131e4:	d0a9      	beq.n	801313a <__sflush_r+0x1a>
 80131e6:	0793      	lsls	r3, r2, #30
 80131e8:	680e      	ldr	r6, [r1, #0]
 80131ea:	bf08      	it	eq
 80131ec:	694b      	ldreq	r3, [r1, #20]
 80131ee:	600f      	str	r7, [r1, #0]
 80131f0:	bf18      	it	ne
 80131f2:	2300      	movne	r3, #0
 80131f4:	eba6 0807 	sub.w	r8, r6, r7
 80131f8:	608b      	str	r3, [r1, #8]
 80131fa:	f1b8 0f00 	cmp.w	r8, #0
 80131fe:	dd9c      	ble.n	801313a <__sflush_r+0x1a>
 8013200:	4643      	mov	r3, r8
 8013202:	463a      	mov	r2, r7
 8013204:	6a21      	ldr	r1, [r4, #32]
 8013206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013208:	4628      	mov	r0, r5
 801320a:	47b0      	blx	r6
 801320c:	2800      	cmp	r0, #0
 801320e:	dc06      	bgt.n	801321e <__sflush_r+0xfe>
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013216:	81a3      	strh	r3, [r4, #12]
 8013218:	f04f 30ff 	mov.w	r0, #4294967295
 801321c:	e78e      	b.n	801313c <__sflush_r+0x1c>
 801321e:	4407      	add	r7, r0
 8013220:	eba8 0800 	sub.w	r8, r8, r0
 8013224:	e7e9      	b.n	80131fa <__sflush_r+0xda>
 8013226:	bf00      	nop
 8013228:	20400001 	.word	0x20400001

0801322c <_fflush_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	690b      	ldr	r3, [r1, #16]
 8013230:	4605      	mov	r5, r0
 8013232:	460c      	mov	r4, r1
 8013234:	b1db      	cbz	r3, 801326e <_fflush_r+0x42>
 8013236:	b118      	cbz	r0, 8013240 <_fflush_r+0x14>
 8013238:	6983      	ldr	r3, [r0, #24]
 801323a:	b90b      	cbnz	r3, 8013240 <_fflush_r+0x14>
 801323c:	f7ff fa38 	bl	80126b0 <__sinit>
 8013240:	4b0c      	ldr	r3, [pc, #48]	; (8013274 <_fflush_r+0x48>)
 8013242:	429c      	cmp	r4, r3
 8013244:	d109      	bne.n	801325a <_fflush_r+0x2e>
 8013246:	686c      	ldr	r4, [r5, #4]
 8013248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801324c:	b17b      	cbz	r3, 801326e <_fflush_r+0x42>
 801324e:	4621      	mov	r1, r4
 8013250:	4628      	mov	r0, r5
 8013252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013256:	f7ff bf63 	b.w	8013120 <__sflush_r>
 801325a:	4b07      	ldr	r3, [pc, #28]	; (8013278 <_fflush_r+0x4c>)
 801325c:	429c      	cmp	r4, r3
 801325e:	d101      	bne.n	8013264 <_fflush_r+0x38>
 8013260:	68ac      	ldr	r4, [r5, #8]
 8013262:	e7f1      	b.n	8013248 <_fflush_r+0x1c>
 8013264:	4b05      	ldr	r3, [pc, #20]	; (801327c <_fflush_r+0x50>)
 8013266:	429c      	cmp	r4, r3
 8013268:	bf08      	it	eq
 801326a:	68ec      	ldreq	r4, [r5, #12]
 801326c:	e7ec      	b.n	8013248 <_fflush_r+0x1c>
 801326e:	2000      	movs	r0, #0
 8013270:	bd38      	pop	{r3, r4, r5, pc}
 8013272:	bf00      	nop
 8013274:	08016948 	.word	0x08016948
 8013278:	08016968 	.word	0x08016968
 801327c:	08016928 	.word	0x08016928

08013280 <_lseek_r>:
 8013280:	b538      	push	{r3, r4, r5, lr}
 8013282:	4c07      	ldr	r4, [pc, #28]	; (80132a0 <_lseek_r+0x20>)
 8013284:	4605      	mov	r5, r0
 8013286:	4608      	mov	r0, r1
 8013288:	4611      	mov	r1, r2
 801328a:	2200      	movs	r2, #0
 801328c:	6022      	str	r2, [r4, #0]
 801328e:	461a      	mov	r2, r3
 8013290:	f7ed fd4c 	bl	8000d2c <_lseek>
 8013294:	1c43      	adds	r3, r0, #1
 8013296:	d102      	bne.n	801329e <_lseek_r+0x1e>
 8013298:	6823      	ldr	r3, [r4, #0]
 801329a:	b103      	cbz	r3, 801329e <_lseek_r+0x1e>
 801329c:	602b      	str	r3, [r5, #0]
 801329e:	bd38      	pop	{r3, r4, r5, pc}
 80132a0:	200071cc 	.word	0x200071cc

080132a4 <__swhatbuf_r>:
 80132a4:	b570      	push	{r4, r5, r6, lr}
 80132a6:	460e      	mov	r6, r1
 80132a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ac:	2900      	cmp	r1, #0
 80132ae:	b096      	sub	sp, #88	; 0x58
 80132b0:	4614      	mov	r4, r2
 80132b2:	461d      	mov	r5, r3
 80132b4:	da07      	bge.n	80132c6 <__swhatbuf_r+0x22>
 80132b6:	2300      	movs	r3, #0
 80132b8:	602b      	str	r3, [r5, #0]
 80132ba:	89b3      	ldrh	r3, [r6, #12]
 80132bc:	061a      	lsls	r2, r3, #24
 80132be:	d410      	bmi.n	80132e2 <__swhatbuf_r+0x3e>
 80132c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132c4:	e00e      	b.n	80132e4 <__swhatbuf_r+0x40>
 80132c6:	466a      	mov	r2, sp
 80132c8:	f000 f864 	bl	8013394 <_fstat_r>
 80132cc:	2800      	cmp	r0, #0
 80132ce:	dbf2      	blt.n	80132b6 <__swhatbuf_r+0x12>
 80132d0:	9a01      	ldr	r2, [sp, #4]
 80132d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80132d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80132da:	425a      	negs	r2, r3
 80132dc:	415a      	adcs	r2, r3
 80132de:	602a      	str	r2, [r5, #0]
 80132e0:	e7ee      	b.n	80132c0 <__swhatbuf_r+0x1c>
 80132e2:	2340      	movs	r3, #64	; 0x40
 80132e4:	2000      	movs	r0, #0
 80132e6:	6023      	str	r3, [r4, #0]
 80132e8:	b016      	add	sp, #88	; 0x58
 80132ea:	bd70      	pop	{r4, r5, r6, pc}

080132ec <__smakebuf_r>:
 80132ec:	898b      	ldrh	r3, [r1, #12]
 80132ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132f0:	079d      	lsls	r5, r3, #30
 80132f2:	4606      	mov	r6, r0
 80132f4:	460c      	mov	r4, r1
 80132f6:	d507      	bpl.n	8013308 <__smakebuf_r+0x1c>
 80132f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80132fc:	6023      	str	r3, [r4, #0]
 80132fe:	6123      	str	r3, [r4, #16]
 8013300:	2301      	movs	r3, #1
 8013302:	6163      	str	r3, [r4, #20]
 8013304:	b002      	add	sp, #8
 8013306:	bd70      	pop	{r4, r5, r6, pc}
 8013308:	ab01      	add	r3, sp, #4
 801330a:	466a      	mov	r2, sp
 801330c:	f7ff ffca 	bl	80132a4 <__swhatbuf_r>
 8013310:	9900      	ldr	r1, [sp, #0]
 8013312:	4605      	mov	r5, r0
 8013314:	4630      	mov	r0, r6
 8013316:	f7ff faab 	bl	8012870 <_malloc_r>
 801331a:	b948      	cbnz	r0, 8013330 <__smakebuf_r+0x44>
 801331c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013320:	059a      	lsls	r2, r3, #22
 8013322:	d4ef      	bmi.n	8013304 <__smakebuf_r+0x18>
 8013324:	f023 0303 	bic.w	r3, r3, #3
 8013328:	f043 0302 	orr.w	r3, r3, #2
 801332c:	81a3      	strh	r3, [r4, #12]
 801332e:	e7e3      	b.n	80132f8 <__smakebuf_r+0xc>
 8013330:	4b0d      	ldr	r3, [pc, #52]	; (8013368 <__smakebuf_r+0x7c>)
 8013332:	62b3      	str	r3, [r6, #40]	; 0x28
 8013334:	89a3      	ldrh	r3, [r4, #12]
 8013336:	6020      	str	r0, [r4, #0]
 8013338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801333c:	81a3      	strh	r3, [r4, #12]
 801333e:	9b00      	ldr	r3, [sp, #0]
 8013340:	6163      	str	r3, [r4, #20]
 8013342:	9b01      	ldr	r3, [sp, #4]
 8013344:	6120      	str	r0, [r4, #16]
 8013346:	b15b      	cbz	r3, 8013360 <__smakebuf_r+0x74>
 8013348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801334c:	4630      	mov	r0, r6
 801334e:	f000 f833 	bl	80133b8 <_isatty_r>
 8013352:	b128      	cbz	r0, 8013360 <__smakebuf_r+0x74>
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	f023 0303 	bic.w	r3, r3, #3
 801335a:	f043 0301 	orr.w	r3, r3, #1
 801335e:	81a3      	strh	r3, [r4, #12]
 8013360:	89a3      	ldrh	r3, [r4, #12]
 8013362:	431d      	orrs	r5, r3
 8013364:	81a5      	strh	r5, [r4, #12]
 8013366:	e7cd      	b.n	8013304 <__smakebuf_r+0x18>
 8013368:	08012679 	.word	0x08012679

0801336c <__malloc_lock>:
 801336c:	4770      	bx	lr

0801336e <__malloc_unlock>:
 801336e:	4770      	bx	lr

08013370 <_read_r>:
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	4c07      	ldr	r4, [pc, #28]	; (8013390 <_read_r+0x20>)
 8013374:	4605      	mov	r5, r0
 8013376:	4608      	mov	r0, r1
 8013378:	4611      	mov	r1, r2
 801337a:	2200      	movs	r2, #0
 801337c:	6022      	str	r2, [r4, #0]
 801337e:	461a      	mov	r2, r3
 8013380:	f7ed fc74 	bl	8000c6c <_read>
 8013384:	1c43      	adds	r3, r0, #1
 8013386:	d102      	bne.n	801338e <_read_r+0x1e>
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	b103      	cbz	r3, 801338e <_read_r+0x1e>
 801338c:	602b      	str	r3, [r5, #0]
 801338e:	bd38      	pop	{r3, r4, r5, pc}
 8013390:	200071cc 	.word	0x200071cc

08013394 <_fstat_r>:
 8013394:	b538      	push	{r3, r4, r5, lr}
 8013396:	4c07      	ldr	r4, [pc, #28]	; (80133b4 <_fstat_r+0x20>)
 8013398:	2300      	movs	r3, #0
 801339a:	4605      	mov	r5, r0
 801339c:	4608      	mov	r0, r1
 801339e:	4611      	mov	r1, r2
 80133a0:	6023      	str	r3, [r4, #0]
 80133a2:	f7ed fca8 	bl	8000cf6 <_fstat>
 80133a6:	1c43      	adds	r3, r0, #1
 80133a8:	d102      	bne.n	80133b0 <_fstat_r+0x1c>
 80133aa:	6823      	ldr	r3, [r4, #0]
 80133ac:	b103      	cbz	r3, 80133b0 <_fstat_r+0x1c>
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	bd38      	pop	{r3, r4, r5, pc}
 80133b2:	bf00      	nop
 80133b4:	200071cc 	.word	0x200071cc

080133b8 <_isatty_r>:
 80133b8:	b538      	push	{r3, r4, r5, lr}
 80133ba:	4c06      	ldr	r4, [pc, #24]	; (80133d4 <_isatty_r+0x1c>)
 80133bc:	2300      	movs	r3, #0
 80133be:	4605      	mov	r5, r0
 80133c0:	4608      	mov	r0, r1
 80133c2:	6023      	str	r3, [r4, #0]
 80133c4:	f7ed fca7 	bl	8000d16 <_isatty>
 80133c8:	1c43      	adds	r3, r0, #1
 80133ca:	d102      	bne.n	80133d2 <_isatty_r+0x1a>
 80133cc:	6823      	ldr	r3, [r4, #0]
 80133ce:	b103      	cbz	r3, 80133d2 <_isatty_r+0x1a>
 80133d0:	602b      	str	r3, [r5, #0]
 80133d2:	bd38      	pop	{r3, r4, r5, pc}
 80133d4:	200071cc 	.word	0x200071cc

080133d8 <_init>:
 80133d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133da:	bf00      	nop
 80133dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133de:	bc08      	pop	{r3}
 80133e0:	469e      	mov	lr, r3
 80133e2:	4770      	bx	lr

080133e4 <_fini>:
 80133e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133e6:	bf00      	nop
 80133e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ea:	bc08      	pop	{r3}
 80133ec:	469e      	mov	lr, r3
 80133ee:	4770      	bx	lr
